<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="manipuler-chaines-caracteres-python" type="translation" xml:base="manipuler-chaines-caracteres-python/manipuler-chaines-caracteres-python.xml">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Manipuler des chaînes de caractères en Python</title>
                <author role="original_author">
                    <persName>William J. Turkel</persName>
                    <persName>Adam Crymble</persName>
                </author>
                <editor role="reviewers">Jim Clifford</editor>
                <author role="translators">Camille Carette</author>
                <editor role="translation-reviewers">
                    <persName>Marie-Christine Boucher</persName>
                    <persName>Florian Cafiero</persName>
                </editor>
                <editor role="editors">Miriam Posner</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <date type="translated">04/02/2020</date>
                <idno type="doi">10.46430/phfr0008</idno>
                <date type="published">07/17/2012</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#manipulating-strings-in-python"/>.</p>
                <p>There are other translations: <ref target="#manipular-strings-python #manipular-cadenas-de-caracteres-en-python"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>Cette leçon constitue une brève introduction aux techniques de manipulation des chaînes de caractères en Python.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">python</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="fr">
        <body>
            <div type="2" n="1">
                <head>Objectifs de la leçon</head>
                <p>Cette leçon constitue une courte introduction à la manipulation des <ref target="https://fr.wikipedia.org/wiki/Cha%C3%AEne_de_caract%C3%A8res">chaînes de caractères</ref> en Python. Pour la plupart des tâches de traitement du langage naturel, il est crucial de savoir comment manipuler les chaînes de caractères. Si vous souhaitez mettre la leçon en pratique, vous pouvez écrire et exécuter des programmes courts dans votre environnement de programmation favori ou encore ouvrir un terminal en Python pour tester le code à la ligne de commande.</p>
            </div>
            <div type="2" n="2">
                <head>Manipuler les chaînes de caractères en Python</head>
                <p>Si vous avez déjà été confrontés à un autre langage de programmation auparavant, vous avez peut-être appris que vous aviez besoin de <emph>déclarer</emph> ou de <emph>typer</emph> vos variables avant de pouvoir y stocker des données. Ce n’est pas nécessaire lorsque l’on travaille avec Python. En effet, on peut simplement créer une chaîne de caractères en mettant entre guillemets le contenu de la variable et en utilisant le signe égal (=) :</p>
                <ab>
                    <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_0" corresp="code_manipuler-chaines-caracteres-python_0.txt" rend="block"/>
                </ab>
            </div>
            <div type="2" n="3">
                <head>Les opérateurs de chaînes : additionner et multiplier</head>
                <p>Une chaîne de caractères est une classe d’objets qui consiste en une série de caractères. Python sait déjà gérer un certain nombre de types de données polyvalents et puissants, y compris les chaînes de caractères. L’une des façons de manipuler ces chaînes de caractères est d’utiliser un <emph>opérateur de chaînes</emph>. Ces opérateurs sont représentés par des signes que l’on associe généralement avec les mathématiques, tels que +, -, *, / et =. Lorsqu’on les utilise avec des chaînes de caractères, ces opérateurs effectuent des actions qui sont comparables, mais non similaires, à leurs équivalents mathématiques.</p>
                <div type="3" n="3.1">
                    <head>Concaténer</head>
                    <p>Ce terme signifie “joindre des chaînes de caractères”. Ce processus est appelé <emph>la concaténation de chaînes</emph>, et s’effectue en utilisant l’opérateur plus (+). Notez qu’il vous faut indiquer explicitement là où vous voulez que des espaces apparaissent, en les mettant eux aussi entre des guillemets simples.</p>
                    <p>Dans cette exemple, on attribue le contenu “Bonjour le monde!” à la chaîne de caractères “message1”.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_1" corresp="code_manipuler-chaines-caracteres-python_1.txt" rend="block"/>
                    </ab>
                </div>
                <div type="3" n="3.2">
                    <head>Multiplier</head>
                    <p>Si vous voulez plusieurs copies d’une chaîne de caractères, utilisez l’opérateur de la multiplication (*). Dans cet exemple, on attribue le contenu “bonjour” trois fois à la chaîne de caractères <emph>message2a</emph> et le contenu “le monde” à la chaîne de caractères <emph>message2b</emph>. Puis, nous imprimons ces deux chaînes.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_2" corresp="code_manipuler-chaines-caracteres-python_2.txt" rend="block"/>
                    </ab>
                </div>
                <div type="3" n="3.3">
                    <head>Ajouter</head>
                    <p>Que faire si vous souhaitez ajouter quelque chose à la fin d’une chaîne de caractères, à la suite du contenu ? Il existe un opérateur spécial conçu à cette fin (+=).</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_3" corresp="code_manipuler-chaines-caracteres-python_3.txt" rend="block"/>
                    </ab>
                </div>
            </div>
            <div type="2" n="4">
                <head>Méthodes pour les chaînes de caractères : rechercher, modifier</head>
                <p>En plus des opérateurs, Python possède des douzaines de <emph>méthodes</emph> pré-installées qui nous permettent de manipuler les chaînes de caractères. Utilisées seules ou en combinaisons, ces méthodes peuvent appliquer à peu près toutes les opérations imaginables aux chaînes de caractères. Vous pouvez consulter une liste de ces méthodes sur <ref target="https://docs.python.org/3.8/library/stdtypes.html#string-methods">le site de Python</ref>, y compris des informations sur la manière de les utiliser correctement. Pour vous aider à bien démarrer votre exploration, voici un bref aperçu de quelques-unes des méthodes les plus couramment utilisées :</p>
                <div type="3" n="4.1">
                    <head>Longueur</head>
                    <p>Vous pouvez déterminer le nombre de caractères contenus dans une chaîne de caractères à l'aide de <code rend="inline">len</code>. Notez que l'espace blanc compte comme un caractère séparé.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_4" corresp="code_manipuler-chaines-caracteres-python_4.txt" rend="block"/>
                    </ab>
                </div>
                <div type="3" n="4.2">
                    <head>Rechercher une sous-chaîne</head>
                    <p>Vous pouvez rechercher <emph>une sous-chaîne</emph> dans une chaîne de caractères et votre programme retournera la position de l'index de départ de cette sous-chaîne. Cela vous sera utile lors de nombreuses opérations plus complexes. Notez que les index sont numérotés de gauche à droite et que le décompte commence à la position 0 et non 1.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_5" corresp="code_manipuler-chaines-caracteres-python_5.txt" rend="block"/>
                    </ab>
                    <p>Si la sous-chaîne n'est pas présente, le programme renvoie une valeur de -1.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_6" corresp="code_manipuler-chaines-caracteres-python_6.txt" rend="block"/>
                    </ab>
                </div>
                <div type="3" n="4.3">
                    <head>Minuscules</head>
                    <p>Il est parfois utile de convertir une chaîne de caractères en minuscules. Par exemple, il est plus facile pour l'ordinateur de reconnaître que "Parfois" et "parfois" sont le même mot si nous standardisons les casses au préalable.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_7" corresp="code_manipuler-chaines-caracteres-python_7.txt" rend="block"/>
                    </ab>
                    <p>L'effet inverse, qui consiste à transformer tous les caractères en majuscules, peut être obtenu en changeant <code rend="inline">.lower()</code> en <code rend="inline">.upper().</code>
                    </p>
                </div>
                <div type="3" n="4.4">
                    <head>Remplacer</head>
                    <p>Si vous avez besoin de remplacer une sous-chaîne à l'intérieur d'une chaîne, vous pouvez le faire avec la méthode <code rend="inline">replace</code>.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_8" corresp="code_manipuler-chaines-caracteres-python_8.txt" rend="block"/>
                    </ab>
                </div>
                <div type="3" n="4.5">
                    <head>Couper (Slice)</head>
                    <p>Si vous voulez couper (<code rend="inline">slice</code>) les parties non désirées au début ou à la fin d'une chaîne de caractères, vous pouvez le faire en créant une nouvelle chaîne à l'aide de l'opérateur ':'. La même technique vous permet également de diviser une longue chaîne de caractères en composantes plus faciles à gérer.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_9" corresp="code_manipuler-chaines-caracteres-python_9.txt" rend="block"/>
                    </ab>
                    <p>Vous pouvez substituer des variables aux entiers utilisés dans cet exemple.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_10" corresp="code_manipuler-chaines-caracteres-python_10.txt" rend="block"/>
                    </ab>
                    <p>Le découpage d'une partie d'une chaîne facilite de beaucoup l'utilisation de cette méthode en conjonction avec la méthode <code rend="inline">find</code>.  L'exemple suivant vérifie la présence de la lettre "d" dans les six premiers caractères de "Bonjour le monde" et nous dit correctement qu'elle n'est pas présente (-1). Cette technique est beaucoup plus utile dans des chaînes de caractères plus longues - des documents entiers par exemple. Notez que l'absence d'un entier avant les deux points signifie que nous voulons commencer au début de la chaîne. Nous pourrions utiliser la même technique pour dire au programme d'aller jusqu'au bout, en ne mettant aucun entier après les deux points. Et n'oubliez pas que l'on commence à compter les positions de l'indice à partir de 0 plutôt que de 1.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_11" corresp="code_manipuler-chaines-caracteres-python_11.txt" rend="block"/>
                    </ab>
                    <p>Il existe beaucoup d'autres méthodes de manipulation des chaînes, mais celles décrites ci-dessus constituent un bon début. Notez que dans ce dernier exemple, nous utilisons des crochets au lieu de parenthèses. Cette différence de syntaxe signale une distinction importante. En Python, les parenthèses sont généralement utilisées pour passer un <emph>argument</emph> à une fonction. Donc quand on voit quelque chose comme</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_12" corresp="code_manipuler-chaines-caracteres-python_12.txt" rend="block"/>
                    </ab>
                    <p>cela signifie passer la chaîne de caracteres "message" à la fonction <code rend="inline">len</code>, puis envoyer la valeur retournée par cette fonction à l'instruction d'impression (<code rend="inline">print</code>). Si une fonction peut être appelée sans argument, vous devez souvent inclure une paire de parenthèses vides après le nom de la fonction. Nous en avons aussi vu un exemple :</p>
                    <ab>
                        <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_13" corresp="code_manipuler-chaines-caracteres-python_13.txt" rend="block"/>
                    </ab>
                    <p>Cette instruction demande à Python d'appliquer la fonction <code rend="inline">lower</code> à la chaîne "message7", puis de stocker la valeur retournée dans la chaîne <emph>message7a</emph>.</p>
                    <p>Les crochets ont une fonction différente. Si vous concevez une chaîne de caractères comme une séquence de caractères, et que vous voulez accéder à une partie du contenu de la chaîne en spécifiant son emplacement dans la séquence, alors vous avez évidemment besoin d'un moyen d'indiquer à Python un emplacement dans une séquence. C'est ce que font les crochets : indiquer un emplacement de début et de fin dans une séquence, comme nous l'avons vu en utilisant la méthode <code rend="inline">slice</code>.</p>
                </div>
            </div>
            <div type="2" n="5">
                <head>Séquence d'échappement</head>
                <p>Que faire lorsque vous devez inclure des guillemets dans une chaîne de caractères ? Vous ne voulez pas que l'interpréteur Python se méprenne et mette fin à la chaîne lorsqu'il rencontre l'un de ces caractères. En Python, vous pouvez placer une barre oblique inversée devant un guillemet pour que ce guillemet ne termine pas la chaîne. C'est ce qu'on appelle les <emph>séquences d'échappement</emph>.</p>
                <ab>
                    <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_14" corresp="code_manipuler-chaines-caracteres-python_14.txt" rend="block"/>
                </ab>
                <ab>
                    <code lang="language-python" xml:id="code_manipuler-chaines-caracteres-python_15" corresp="code_manipuler-chaines-caracteres-python_15.txt" rend="block"/>
                </ab>
                <p>Deux autres séquences d'échappement vous permettent d'imprimer des tabulateurs et des fins de lignes :</p>
                <ab>
                    <code xml:id="code_manipuler-chaines-caracteres-python_16" corresp="code_manipuler-chaines-caracteres-python_16.txt" rend="block"/>
                </ab>
            </div>
            <div type="2" n="6">
                <head>Bibliographie</head>
                <list type="unordered">
                    <item>
Mark Lutz, <emph>
                            <ref target="http://www.worldcat.org/oclc/1061273329">Learning Python</ref>
                        </emph>
                        <list type="unordered">
                            <item>Ch. 7: Strings <emph>(Chaînes de caractères)</emph>
                            </item>
                            <item>Ch. 8: Lists and Dictionaries <emph>(Listes et dictionnaires)</emph>
                            </item>
                            <item>Ch. 10: Introducing Python Statements <emph>(Introduction aux déclarations en Python)</emph>
                            </item>
                            <item>Ch. 15: Function Basics <emph>(Les fondamentaux des fonctions en Python)</emph>
                            </item>
                        </list>
                    </item>
                </list>
            </div>
            <div type="2" n="7">
                <head>Synchronisation de code</head>
                <p>Pour suivre les leçons à venir, il est important d'avoir les bons fichiers et programmes dans votre répertoire programming-historian. À la fin de chaque chapitre, vous pouvez télécharger le fichier zip de programming-historian pour vous assurer que vous avez le bon code. Notez que nous avons supprimé les fichiers inutiles des leçons précédentes. Votre répertoire peut contenir plus de fichiers et c'est OK !</p>
                <list type="unordered">
                    <item>programming-historian-1 (<ref target="/assets/python-lessons1.zip">zip</ref>)</item>
                </list>
                <p>Super ! Vous êtes maintenant prêt à passer à <ref target="/en/lessons/from-html-to-list-of-words-1">la leçon suivante</ref> (en anglais).</p>
            </div>
        </body>
    </text>
</TEI>
