<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="data-mining-the-internet-archive">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Data Mining the Internet Archive Collection</title>
                <author role="original_author">Caleb McDaniel</author>
                <editor role="reviewers">Adam Crymble</editor>
                <editor role="editors">
                    <persName>William J. Turkel</persName>
                    <persName>Adam Crymble</persName>
                </editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <idno type="doi">10.46430/phen0035</idno>
                <date type="published">03/03/2014</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. This lesson is original. Available translations are the following: Available translations are the following:<ref type="translations" target="#mineria-de-datos-en-internet-archive"/>
                    <ref type="translations" target="#mineria-de-datos-en-internet-archive"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>The collections of the Internet Archive include many digitized historical sources. Many contain rich bibliographic data in a format called MARC. In this lesson, you'll learn how to use Python to automate the downloading of large numbers of MARC files from the Internet Archive and the parsing of MARC records for specific information such as authors, places of publication, and dates. The lesson can be applied more generally to other Internet Archive files and to MARC records found elsewhere.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">web-scraping</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="en">
        <body>
            <div type="2">
                <head>Lesson Goals</head>
                <p>The collections of the <ref target="http://archive.org/">Internet Archive</ref> (IA) include many digitized
sources of interest to historians, including <ref target="https://archive.org/details/jstor_ejc">early JSTOR journal
content</ref>, <ref target="https://archive.org/details/johnadamsBPL">John Adams's personal library</ref>, and the <ref target="https://archive.org/details/jcbhaiti">Haiti
collection</ref> at the John Carter Brown Library. In short, to quote
Programming Historian <ref target="http://activehistory.ca/2013/09/the-internet-archive-rocks-or-two-million-plus-free-sources-to-explore/">Ian Milligan</ref>, "The Internet Archive rocks."</p>
                <p>In this lesson, you'll learn how to download files from such collections
using a Python module specifically designed for the Internet Archive.
You will also learn how to use another Python module designed for
parsing MARC XML records, a widely used standard for formatting
bibliographic metadata.</p>
                <p>For demonstration purposes, this lesson will focus on working with the
digitized version of the <ref target="http://archive.org/details/bplscas">Anti-Slavery Collection</ref> at the Boston
Public Library in Copley Square. We will first download a large
collection of MARC records from this collection, and then use Python to
retrieve and analyze bibliographic information about items in the
collection. For example, by the end of this lesson, you will be able to
create a list of every named place from which a letter in the
antislavery collection was written, which you could then use for a
mapping project or some other kind of analysis.</p>
            </div>
            <div type="2">
                <head>For Whom Is This Useful?</head>
                <p>This intermediate lesson is good for users of the Programming Historian
who have completed general lessons on downloading files and performing
text analysis on them, but would like an applied example of these
principles. It will also be of interest to historians or archivists who
work with the MARC format or the Internet Archive on a regular basis.</p>
            </div>
            <div type="2">
                <head>Before You Begin</head>
                <p>To write scripts that interact with the Internet Archive, you will
first need to <ref target="https://archive.org/account/login.createaccount.php">create an IA account</ref>.
Follow the steps to confirm your account and carefully note down
your email address and password.</p>
                <p>We will be working with two Python modules that are not included in
Python's standard library.</p>
                <p>The first, <ref target="https://pypi.python.org/pypi/internetarchive">internetarchive</ref>, provides programmatic access to the
Internet Archive. The second, <ref target="https://pypi.python.org/pypi/pymarc/">pymarc</ref>, makes it easier to parse MARC
records.</p>
                <p>The easiest way to download both is to use pip, the python package
manager. Begin by installing <code rend="inline">pip</code> using Fred Gibbs' <ref target="/lessons/installing-python-modules-pip">Installing Python Modules with pip</ref>. Then issue these commands at the command line: To install
<code rend="inline">internetarchive</code>:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_0" corresp="code_data-mining-the-internet-archive_0.txt" lang="language-bash" rend="block"/>
                </ab>
                <p>Now you will need to configure your computer so that the new package
will work. Type <code rend="inline">ia configure</code> at the command line, and then enter in
the email address and password you used above to create your Internet Archive
account.</p>
                <p>To install <code rend="inline">pymarc</code>:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_1" corresp="code_data-mining-the-internet-archive_1.txt" lang="language-bash" rend="block"/>
                </ab>
                <p>Now you are ready to go to work!</p>
            </div>
            <div type="2">
                <head>The Antislavery Collection at the Internet Archive</head>
                <p>The Boston Public Library's anti-slavery collection at Copley Square
contains not only the letters of William Lloyd Garrison, one of the
icons of the American abolitionist movement, but also large collections
of letters by and to reformers somehow connected to him. And by "large
collection," I mean large. According to the library's estimates, there
are over 16,000 items at Copley.</p>
                <p>As of this writing, approximately 7,000 of those items have been
digitized and uploaded to the <ref target="http://archive.org/">Internet Archive</ref>. This is good news,
not only because the Archive is committed to making its considerable
cultural resources free for download, but also because each uploaded
item is paired with a wealth of metadata suitable for machine-reading.</p>
                <p>Take <ref target="http://archive.org/details/lettertowilliaml00doug">this letter</ref> sent by Frederick Douglass to William Lloyd
Garrison. Anyone can read the <ref target="http://archive.org/stream/lettertowilliaml00doug/39999066767938#page/n0/mode/2up">original manuscript</ref> online, without
making the trip to Boston, and that alone may be enough to revolutionize
and democratize future abolitionist historiography. But you can also
download <ref target="http://archive.org/download/lettertowilliaml00doug">multiple files</ref> related to the letter that are rich in
metadata, like a <ref target="http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_dc.xml">Dublin Core</ref> record and a fuller <ref target="http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_marc.xml">MARCXML</ref> record
that uses the <ref target="http://www.loc.gov/marc/bibliographic/">Library of Congress's MARC 21 Format for Bibliographic
Data</ref>.</p>
                <p>Stop and think about that for a moment: every item uploaded from the
Collection contains these things. Right now, that means historians have
access to rich metadata, full images, and partial descriptions for
<ref target="http://archive.org/search.php?query=collection%3Abplscas&amp;sort=-publicdate">thousands of antislavery letters, manuscripts, and publications</ref>.</p>
            </div>
            <div type="2">
                <head>Accessing an IA Collection in Python</head>
                <p>Internet Archive (IA) collections and items all have a unique
identifier, and URLs to collections and items all look like this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_2" corresp="code_data-mining-the-internet-archive_2.txt" rend="block"/>
                </ab>
                <p>So, for example, here is a URL to the Archive item discussed above,
Douglass's letter to Garrison:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_3" corresp="code_data-mining-the-internet-archive_3.txt" rend="block"/>
                </ab>
                <p>And here is a URL to the entire antislavery collection at the Boston
Public Library:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_4" corresp="code_data-mining-the-internet-archive_4.txt" rend="block"/>
                </ab>
                <p>Because the URLs are so similar, the only way to tell that you are
looking at a collection page, instead of an individual item page, is to
examine the page layout. An item page usually has a lefthand sidebar
that says "View the Book" and lists links for reading the item online or
accessing other file formats. A collection page will probably have a
"Spotlight Item" in the lefthand sidebar instead. You can browse to
different collections through the <ref target="https://archive.org/details/texts">eBook and Texts</ref> portal, and you
may also want to read a little bit about <ref target="http://blog.archive.org/2011/03/31/how-archive-org-items-are-structured/">the way that items and item
URLs are structured</ref>.</p>
                <p>Once you have a collection's identifier—in this case, <code rend="inline">bplscas</code>—seeing
all of the items in the collection is as easy as navigating to the
Archive's <ref target="https://archive.org/advancedsearch.php">advanced search</ref> page, selecting the id from the drop down
menu next to "Collection," and hitting the search button. Performing
that search with <code rend="inline">bplscas</code> selected returns <ref target="https://archive.org/search.php?query=collection%3A%28bplscas%29">this page</ref>, which as of
this writing showed 7,029 results.</p>
                <p>We can also <ref target="http://internetarchive.readthedocs.io/en/latest/quickstart.html#searching">search the Archive using the Python module that we
installed</ref>, and doing so makes it easier to iterate over all the items
in the collection for purposes of further inspection and downloading.</p>
                <p>For example, let's modify the sample code from the module's
documentation to see if we can tell, with Python, how many items are in
the digital Antislavery Collection. The sample code looks something like
what you see below. The only difference is that instead of importing
only the <code rend="inline">search_items</code> module from <code rend="inline">internetarchive</code>, we are going to
import the whole library.</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_5" corresp="code_data-mining-the-internet-archive_5.txt" lang="language-python" rend="block"/>
                </ab>
                <p>All we should need to modify is the collection identifier, from <code rend="inline">nasa</code>
to <code rend="inline">bplscas</code>. After starting your computer's Python interpreter, try
entering each of the above lines, followed by enter, but modify the
collection id in the second command:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_6" corresp="code_data-mining-the-internet-archive_6.txt" lang="language-python" rend="block"/>
                </ab>
                <p>After hitting enter on the print command, you should see a number that
matches the number of results you saw when doing <ref target="http://archive.org/search.php?query=collection%3Abplscas">the advanced search
for the collection</ref> in the browser.</p>
            </div>
            <div type="2">
                <head>Accessing an IA Item in Python</head>
                <p>The <code rend="inline">internetarchive</code> module also allows you to access individual items
using their identifiers. Let's try that using the <ref target="http://internetarchive.readthedocs.io/en/latest/quickstart.html#downloading">documentation's
sample code</ref>, modifying it in order to get the
Douglass letter we discussed earlier.</p>
                <p>If you are still at your Python interpreter's command prompt, you don't
need to <code rend="inline">import internetarchive</code> again. Since we imported the whole
module, we also need to modify the sample code so that our interpreter
will know that <code rend="inline">get_item</code> is from the <code rend="inline">internetarchive</code> module. We also
need to change the sample identifier <code rend="inline">stairs</code> to our item identifier,
<emph>lettertowilliaml00doug</emph> (note that the character before the two zeroes
is a lowercase L, not the number 1):</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_7" corresp="code_data-mining-the-internet-archive_7.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Enter each of those lines in your interpreter, followed by enter.
Depending on your Internet connection speed, it will now probably take a
minute or two for the command prompt to return, because your computer is
downloading all of the files associated with that item, including some
pretty large images. But when it's done downloading, you should be see a
new directory on your computer whose name is the item identifier. To
check, first exit your Python interpreter:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_8" corresp="code_data-mining-the-internet-archive_8.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Then list the contents of the current directory to see if a folder now
appears named <code rend="inline">lettertowilliaml00doug</code>. If you list the contents of that
folder, you should see a list of files similar to this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_9" corresp="code_data-mining-the-internet-archive_9.txt" rend="block"/>
                </ab>
                <p>Now that we know how to use the Search and Item functions in the
<code rend="inline">internetarchive</code> module, we can turn to thinking about how to make this
process more effective for downloading lots of information from the
collection for further analysis.</p>
            </div>
            <div type="2">
                <head>Downloading MARC Records from a Collection</head>
                <p>Downloading one item is nice, but what if we want to look at thousands
of items in a collection? We're in luck, because the <code rend="inline">internetarchive</code>
module's Search function allows us to iterate over all the results in a
search.</p>
                <p>To see how, let's first start our Python interpreter again. We'll need
to import our module again, and perform our search again:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_10" corresp="code_data-mining-the-internet-archive_10.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Now let's enter the documentation's sample code for printing out the
item identifier of every item returned by our search:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_11" corresp="code_data-mining-the-internet-archive_11.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Note that after entering the first line, your Python interpreter will
automatically print an ellipsis on line two. This is because you have
started a <emph>for loop,</emph> and Python is expecting there to be more. It wants
to know what you want to do for each result in the search. That's also
why, once you hit enter on the second line, you'll see a third line with
another ellipsis, because Python doesn't know whether you are finished
telling it what to do with each result. Hit enter again to end the for
loop and execute the command.</p>
                <p>You should now see your terminal begin to print out the identifiers for
each result returned by our <emph>bplscas search</emph>---in this case, all 7,029 of
them! You can interrupt the print out by hitting <code rend="inline">Ctrl-C</code> on your
keyboard, which will return you to the prompt.</p>
                <p>If you didn't see identifiers printing out to your screen, but instead
saw an error like this, you may have forgotten to enter a few spaces
before your print command:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_12" corresp="code_data-mining-the-internet-archive_12.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Remember that whitespace matters in Python, and you need to indent the
lines in a for loop so that Python can tell which command(s) to perform
on each item in the loop.</p>
            </div>
            <div type="2">
                <head>Understanding the for loop</head>
                <p>The <emph>for loop,</emph> expressed in plain English, tells Python to do something
to each thing in a collection of things. In the above case, we printed
the identifier for each result in the results of our collection search.
Two additional points about the <emph>for loop:</emph>
                </p>
                <p>First, the word we used after <code rend="inline">for</code> is what's called a <emph>local variable</emph> in
Python. It serves as a placeholder for whatever instance or item we are
going to be working with inside the loop. Usually it makes sense to pick
a name that describes what kind of thing we are working with—in this
case, a search result—but we could have used other names in place of
that one. For example, try running the above for loop again, but
substitute a different name for the local variable, such as:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_13" corresp="code_data-mining-the-internet-archive_13.txt" lang="language-python" rend="block"/>
                </ab>
                <p>You should get the same results.</p>
                <p>The second thing to note about the <emph>for loop</emph> is that the indented block
could could have contained other commands. In this case, we printed each
individual search result's identifier. But we could have chosen to do,
for each result, anything that we could do to an individual Internet
Archive item.</p>
                <p>For example, earlier we downloaded all the files associated with the
item <emph>lettertowilliaml00doug.</emph> We could have done that to each item
returned by our search by changing the line <code rend="inline">print result['identifier']</code>
in our <emph>for loop</emph> to <code rend="inline">result.download()</code>.</p>
                <p>We probably want to think twice before doing that, though—downloading
all the files for each of the 7,029 items in the bplscas collection is a
lot of files. Fortunately, the download function in the
<code rend="inline">internetarchive</code> module also allows you to <ref target="http://internetarchive.readthedocs.io/en/latest/quickstart.html#downloading">download specific files
associated with an item</ref>. If we had only wanted to download the MARC XML record associated with a particular item, we could have instead done this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_14" corresp="code_data-mining-the-internet-archive_14.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Because Internet Archive <ref target="https://archive.org/about/faqs.php#140">item files are named according to specific
rules</ref>, we can also figure out the name of the MARC file we want just
by knowing the item's unique identifier. And armed with that knowledge,
we can proceed to …</p>
            </div>
            <div type="2">
                <head>Download All the MARC XML Files from a Collection</head>
                <p>For the next section, we're going to move from using the Python shell to
writing a Python script that downloads the MARC record from each item in
the BPL Antislavery Collection. Try putting this script into Komodo or
your preferred text editor:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_15" corresp="code_data-mining-the-internet-archive_15.txt" lang="language-python" rend="block"/>
                </ab>
                <p>This script looks a lot like the experiments we have done above with the
Frederick Douglass letter, but since we want to download the MARC record
for each item returned by our collection search, we are using an itemid
variable to account for the fact that the identifier and filename will
be different for each result.</p>
                <p>Before running this script (which, I should note, is going to download
thousands of small XML files to your computer), make a directory where
you want those MARC records to be stored and place the above script in
that directory. Then run the script from within the directory so that
the files will be downloaded in an easy-to-find place.</p>
                <p>(Note that if you receive what looks like a <code rend="inline">ConnectionError</code> on your
first attempt, check your Internet connection, wait a few minutes, and
then try running the script again.)</p>
                <p>If all goes well, when you run your script, you should see the program
begin to print out status updates telling you that it is downloading
MARC records. But allowing the script to run its full course will
probably take a couple of hours, so let's stop the script and look a
little more closely at ways to improve it. Pressing <code rend="inline">Ctrl-C</code> while in
your terminal window should make the script stop.</p>
            </div>
            <div type="2">
                <head>Building Error Reporting into the Script</head>
                <p>Since downloading all of these records will take some time, we are
probably going to want to walk away from our computer for a while. But
the chances are high that during those two hours, something could go
wrong that would prevent our script from working.</p>
                <p>Let's say, for example, that we had forgotten that we already downloaded
an individual file into this directory. Or maybe your computer briefly
loses its Internet connection, or some sort of outage happens on the
Internet Archive server that prevents the script from getting the file
it wants.</p>
                <p>In those and other error cases, Python will raise an "exception" telling
you what the problem is. Unfortunately, an exception will also crash
your script instead of continuing on to the next item.</p>
                <p>To prevent this, we can use what's called a <emph>try statement</emph> in Python,
which does exactly what it sounds like. The statement will try to
execute a certain snippet of code until it hits an exception, in which
case you can give it some other code to execute instead. You can read
more about <ref target="http://docs.python.org/2/tutorial/errors.html#handling-exceptions">handling exceptions</ref> in the Python documentation, but for
now let's just update our above script so that it looks like this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_16" corresp="code_data-mining-the-internet-archive_16.txt" lang="language-python" rend="block"/>
                </ab>
                <p>The main thing we've added here, after our module import statements, is
a line that opens a text file called <code rend="inline">bpl-marcs-errors.log</code> and prepares
it to have text appended to it. We are going to use this file to log
exceptions that the script raises. The <emph>try statement</emph> that we have added
to our <emph>for loop</emph> will attempt to download the MARC record. If it can't,
it will write a descriptive statement about what went wrong to our log
file. That way we can go back to the file later and identify which items
we will need to try to download again. If the try clause succeeds and
can download the record, then the script will execute the code in the
<emph>else</emph> clause.</p>
                <p>One other thing we have added, upon successful download, is this line:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_17" corresp="code_data-mining-the-internet-archive_17.txt" lang="language-python" rend="block"/>
                </ab>
                <p>This line uses the <code rend="inline">time</code> module that we are now importing at the
beginning to tell our script to pause for one second before proceeding,
which is basically just a way for us to be nice to Internet Archive's
servers by not clobbering them every millisecond or so with a request.</p>
                <p>Try updating your script to look like the above lines, and run it again
in the directory where you want to store your MARC files. Don't be
surprised if you immediately encounter a string of error messages; that
means the script is doing what it's supposed to do! Calmly go into your
text editor, while leaving the script running, and open the
<code rend="inline">bpl-marcs-errors.log</code> to see what exceptions have been recorded there.
You'll probably see that the script raised the exception "File already
exists" for each of the files that you had already downloaded when
running our earlier, shorter program.</p>
                <p>If you leave the program running for a little while, the script will
eventually get to items that you have not already downloaded and resume
collecting your MARCs!</p>
            </div>
            <div type="2">
                <head>Scraping Information from a MARC Record</head>
                <p>Once your download script has completed, you should find yourself in the
possession of nearly 7,000 detailed MARC XML records about items in the
Anti-Slavery Collection (or whichever other collection you may have
downloaded instead; the methods above should work on any collection
whose items have MARC files attached to them).</p>
                <p>Now what?</p>
                <p>The next step depends on what sort of questions about the collection you
want to answer. The MARC formatting language captures a wealth of data
about an item, as you can see if you return to <ref target="http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_marc.xml">the MARC XML record for
the Frederick Douglass letter</ref> mentioned at the outset.</p>
                <p>Notice, for example, that the Douglass letter contains information about
the place where the letter was written in the <emph>datafield</emph> that is tagged
<emph>260,</emph> inside the subfield coded <emph>a.</emph> The person who prepared this MARC
record knew to put place information in that specific field because of
<ref target="http://www.loc.gov/marc/bibliographic/bd260.html">rules specified for the 260 datafield</ref> by the <ref target="http://www.loc.gov/marc/">MARC standards</ref>.</p>
                <p>That means that it should be possible for us to look inside all of the
MARC records we have downloaded, grab the information inside of
datafield <emph>260,</emph> subfield <emph>a,</emph> and make a list of every place name where
items in the collection were published.</p>
                <p>To do this, we'll use the other helpful Python module that we downloaded
with <code rend="inline">pip</code> at the beginning: <ref target="https://github.com/edsu/pymarc">pymarc</ref>.</p>
                <p>That module makes it easy to get information out of subfields. Assuming
that we have a MARC record prepared for parsing by the module assigned
to the variable record, we could get the information about publication
place names this way:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_18" corresp="code_data-mining-the-internet-archive_18.txt" lang="language-python" rend="block"/>
                </ab>
                <p>The documentation for <code rend="inline">pymarc</code> is a little less complete than that for
the Internet Archive, especially when it comes to parsing XML records.
But a little rooting around in the source code for the module reveals
some <ref target="https://github.com/edsu/pymarc/blob/master/pymarc/marcxml.py">functions that it provides for working with MARC XML records</ref>.
One of these, called <code rend="inline">map_xml()</code> is described this way:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_19" corresp="code_data-mining-the-internet-archive_19.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Translated into plain English, this function means that we can take an
XML file containing MARC data (like the nearly 7,000 we now have on our
computer), pass it to the <code rend="inline">map_xml</code> function in the <code rend="inline">pymarc</code> module, and
then specify another function (that we will write) telling our program
what to do with the MARC data retrieved from the XML file. In rough
outline, our code will look something like this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_20" corresp="code_data-mining-the-internet-archive_20.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Try saving that code to a script and running it from a directory where
you already have the Douglass letter XML saved. If all goes well, the
script should spit out this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_21" corresp="code_data-mining-the-internet-archive_21.txt" lang="language-python" rend="block"/>
                </ab>
                <p>Voila! Of course, this script would be much more useful if we scraped
the place of publication from every letter in our collection of MARC
records. Putting together what we've learned from earlier in the lesson,
we can do that with a script that looks like this:</p>
                <ab>
                    <code xml:id="code_data-mining-the-internet-archive_22" corresp="code_data-mining-the-internet-archive_22.txt" lang="language-python" rend="block"/>
                </ab>
                <p>This script modifies our above code in several ways. First, it uses a
<emph>for loop</emph> to iterate over each file in our directory. In place of the
<code rend="inline">internetarchive</code> search results that we iterated over in our first part
of this lesson, we iterate over the files returned by <code rend="inline">os.listdir(path)</code>
which uses the built-in Python module <code rend="inline">os</code> to list the contents of the
directory specified in the path variable, which you will need to modify
so that it matches the directory where you have downloaded all of your
MARC files.</p>
                <p>We have also added some error handling to our <code rend="inline">get_place_of_pub()</code>
function to account for the fact that some records may (for whatever
reason) not contain the information we are looking for. The function
will try to print the place of publication, but if this raises an
Exception, it will print out the information returned by the Exception
instead. In this case, if the try statement failed, the exception will
probably print <code rend="inline">None</code>. Understanding why is a subject for another lesson
on Python Type errors, but for now the None printout is descriptive
enough of what happened, so it could be useful to us.</p>
                <p>Try running this script. If all goes well, your screen should fill with
a list of the places where these letters were written. If that works,
try modifying your script so that it saves the place names to a text
file instead of printing them to your screen. You could then use the
<ref target="/lessons/counting-frequencies">Counting Frequencies</ref> lesson to figure out which place names are most
common in the collection. You could work with the place names to find
coordinates that could be placed on a map using the <ref target="/lessons/googlemaps-googleearth">Google Maps
lesson</ref>.</p>
                <p>Or, to get a very rough visual sense of the places where letters were
written, you could do what I've done below and simply make a <ref target="https://web.archive.org/web/20201202151557/http://www.wordle.net/">Wordle
word cloud</ref> of the text file.</p>
                <figure>
                    <desc>Wordle wordcloud of places of publication for abolitionist letters</desc>
                    <graphic url="bpl-wordle.png"/>
                </figure>
                <p>Of course, to make such techniques useful would require more <ref target="/lessons/cleaning-ocrd-text-with-regular-expressions">cleaning
of your data</ref>. And other applications of this lesson may prove more
useful. For example, working with the MARC data fields for personal
names, you could create a network of correspondents. Or you could
analyze which subjects are common in the MARC records. Now that you have
the MARC records downloaded and can use <code rend="inline">pymarc</code> to extract information
from the fields, the possibilities can multiply rapidly!</p>
            </div>
        </body>
    </text>
</TEI>
