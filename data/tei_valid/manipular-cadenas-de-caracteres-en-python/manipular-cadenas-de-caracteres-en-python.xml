<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="manipular-cadenas-de-caracteres-en-python">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Manipular cadenas de caracteres en Python</title>
                <author role="original_author">
                    <persName>William J. Turkel</persName>
                    <persName>Adam Crymble</persName>
                </author>
                <editor role="reviewers">Jim Clifford</editor>
                <author role="translators">Víctor Gayol</author>
                <editor role="translation-reviewers">
                    <persName>Jairo A. Melo</persName>
                    <persName>Maria José Afanador-Llach</persName>
                    <persName>Antonio Rojas Castro</persName>
                </editor>
                <editor role="editors">Miriam Posner</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <date type="translated">03/15/2017</date>
                <idno type="doi">10.46430/phes0018</idno>
                <date type="published">07/17/2012</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#manipulating-strings-in-python"/>.</p>
                <p>There are other translations: <ref target="#manipular-strings-python #manipuler-chaines-caracteres-python"/>
                </p>
                <p>There are other translations: <ref target="#manipular-strings-python #manipuler-chaines-caracteres-python"/>
                </p>
                <p>There are other translations: <ref target="#manipular-strings-python #manipuler-chaines-caracteres-python"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>Esta lección es una rápida introducción a técnicas de manipulación de cadenas de caracteres (o strings) en Python.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">python</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="es">
        <body>
            <div type="2">
                <head>Objetivos de la lección</head>
                <p>Esta lección es una rápida introducción a técnicas de manipulación de <ref target="https://es.wikipedia.org/wiki/Cadena_de_caracteres">cadenas de caracteres</ref> (o <emph>strings</emph>) en Python. Saber cómo manipular cadenas de caracteres juega un papel fundamental en la mayoría de las tareas de procesamiento de texto. Si quieres experimentar con las siguientes lecciones puedes escribir y ejecutar pequeños programas tal como lo hicimos en lecciones previas, o puedes abrir tu intérprete de comandos de Python / Terminal para probarlos ahí.</p>
            </div>
            <div type="2">
                <head>Manipular cadenas de caracteres en Python</head>
                <p>Si has estado expuesto antes a otro lenguaje de programación, sabrás que necesitas <emph>declarar</emph> o <emph>escribir</emph> variables antes de que puedas almacenar cualquier cosa en ellas. Esto no es necesario cuando trabajas con cadenas de caracteres en Python. Podemos crear una cadena de caracteres simplemente encerrando contenido entre comillas después de un signo de igual (=).</p>
                <ab>
                    <code xml:id="code_manipular-cadenas-de-caracteres-en-python_0" corresp="code_manipular-cadenas-de-caracteres-en-python_0.txt" lang="language-python" rend="block"/>
                </ab>
            </div>
            <div type="2">
                <head>Operadores de cadenas de caracteres: adición y multiplicación</head>
                <p>Una cadena de caracteres en un objeto que consiste precisamente en una serie de signos o caracteres. Python sabe cómo tratar un número de representaciones poderosas y de propósito general, incluidas las cadenas de caracteres. Una forma de manipular cadenas de caracteres es utilizar <emph>operadores de cadenas de caracteres</emph>. Dichos operadores se representan con símbolos que asociamos a las matemáticas, como +, -, *, / y =. Estos signos realizan acciones similares a sus contrapartes matemáticas cuando se usan con las cadenas de carateres, aunque no iguales.</p>
                <div type="3">
                    <head>Concatenar</head>
                    <p>Este término significa juntar cadenas de caracteres. El proceso de <emph>concatenación</emph> se realiza mediante el operador de suma (+). Ten en cuenta que debes marcar explícitamente dónde quieres los espacios en blanco y colocarlos entre comillas.</p>
                    <p>En este ejemplo, la cadena de caracteres "mensaje1" tiene el contenido "Hola Mundo"</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_1" corresp="code_manipular-cadenas-de-caracteres-en-python_1.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Multiplicar</head>
                    <p>Si quieres varias copias de una cadena de caracteres utiliza el operador de multiplicación (*). En este ejemplo, la cadena de caracteres <emph>mensaje2a</emph> lleva el contenido "Hola" tres veces, mientras que la cadena de caracteres <emph>mensaje2b</emph> tiene el contenido "Mundo". Ordenemos imprimir las dos cadenas.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_2" corresp="code_manipular-cadenas-de-caracteres-en-python_2.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Añadir</head>
                    <p>¿Qué pasa si quieres añadir material de manera sucesiva al final de una cadena de caracteres? El operador especial para ello es compuesto (+=).</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_3" corresp="code_manipular-cadenas-de-caracteres-en-python_3.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
            </div>
            <div type="2">
                <head>Métodos para cadenas de caracteres: buscar, cambiar</head>
                <p>En adición a los operadores, Python trae preinstalado docenas de métodos que te permiten hacer cosas con las cadenas de caracteres. Solos o en combinación, los métodos pueden hacer casi todo lo que te imagines con las cadenas de caracteres. Puedes usar como referencia la lista de métodos de cadenas de caracteres (<emph>String Methods</emph>) en el <ref target="https://docs.python.org/2/library/stdtypes.html#string-methods">sitio web de Python</ref>, que incluye información de cómo utilizar correctamente cada uno. Para asegurar que tengas una comprensión básica de métodos para cadenas de caracteres, lo que sigue es una breve descripción de los utilizados más comúnmente.</p>
                <div type="3">
                    <head>Extensión</head>
                    <p>Puedes determinar el número de caracteres en una cadena utilizando el método <code rend="inline">len</code>. Acuérdate que los espacios en blanco cuentan como un carácter.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_4" corresp="code_manipular-cadenas-de-caracteres-en-python_4.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Encontrar</head>
                    <p>Puedes buscar una sub-cadena en una cadena de caracteres utilizando el método <code rend="inline">find</code> y tu programa te indicará el índice de inicio de la misma. Esto es muy útil para procesos que veremos más adelante. Ten en mente que los índices están numerados de izquierda a derecha y que el número en el que se comienza a contar la posición es el 0, no el 1.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_5" corresp="code_manipular-cadenas-de-caracteres-en-python_5.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Si la sub-cadena no está presente el programa imprimirá el valor -1.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_6" corresp="code_manipular-cadenas-de-caracteres-en-python_6.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Minúsculas</head>
                    <p>A veces es útil convertir una cadena de caracteres a minúsculas. Para ello se utiliza el método <code rend="inline">lower</code>. Por ejemplo, al uniformar los caracteres permitimos que la computadora reconozca fácilmente que "Algunas Veces" y "algunas veces" son la misma frase.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_7" corresp="code_manipular-cadenas-de-caracteres-en-python_7.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Convertir las minúsculas en mayúsculas se logra cambiando <code rend="inline">.lower()</code> por <code rend="inline">upper()</code>.</p>
                </div>
                <div type="3">
                    <head>Reemplazar</head>
                    <p>Si necesitas cambiar una sub-cadena de una cadena se puede utilizar el método <code rend="inline">replace</code>.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_8" corresp="code_manipular-cadenas-de-caracteres-en-python_8.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Cortar</head>
                    <p>Si quieres <code rend="inline">cortar</code> partes que no quieras del principio o del final de la cadena de caracteres, lo puedes hacer creando una sub-cadena. El mismo tipo de técnica te permite separar una cadena muy larga en componentes más manejables.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_9" corresp="code_manipular-cadenas-de-caracteres-en-python_9.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Puedes sustituir las variables por números enteros como en este ejemplo:</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_10" corresp="code_manipular-cadenas-de-caracteres-en-python_10.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Esto hace mucho más simple usar este método en conjunción con el método <code rend="inline">find</code> como en el próximo ejemplo, que busca la letra "d" en los seis primeros caracteres de "Hola Mundo" y correctamente nos dice que no se encuentra ahí (-1). Esta técnica es mucho más eficaz en cadenas largas -documentos enteros, por ejemplo. Observa que la ausencia de un número entero antes de los dos puntos significa que queremos empezar desde el principio de la cadena. Podemos usar la misma técnica para decirle al programa que pase hasta el final de la cadena de caracteres dejando vacío después de los dos puntos. Y recuerda que la posición del índice empieza a contar desde 0, no desde 1.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_11" corresp="code_manipular-cadenas-de-caracteres-en-python_11.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Hay muchos más, pero los métodos para cadenas de caracteres anteriores son un buen comienzo. Fíjate que en el ejemplo anterior utilizamos corchetes en vez de paréntesis. Esta diferencia en los símbolos de la <emph>sintaxis</emph> es muy importante. Los paréntesis en Python son utilizados generalmente para <emph>llevar un argumento</emph> a una función. De tal manera que cuando vemos algo como:</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_12" corresp="code_manipular-cadenas-de-caracteres-en-python_12.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>quiere decir que se lleva la cadena de caracteres "mensaje7" a la función <code rend="inline">len</code> y entonces enviar el valor resultante de esa función a la declaración <code rend="inline">print</code> para ser impresa. Una función puede ser llamada sin un argumento, pero de todas formas tienes que incluir un par de paréntesis vacíos después del nombre de la función. Vimos un ejemplo de ello también.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_13" corresp="code_manipular-cadenas-de-caracteres-en-python_13.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Esta declaración le dice a Python que aplique la función <code rend="inline">lower</code> a la cadena <emph>mensaje7</emph> y guarde el valor resultante en la cadena <emph>mensaje7a</emph>.</p>
                    <p>Los corchetes sirven para propósitos diferentes. La cadena es una secuencia de caracteres; así que si quieres acceder al contenido de la cadena a partir de su posición en la secuencia, tienes que indicarle a Python un lugar en la secuencia. Eso es lo que hacen los corchetes: señalan el lugar del principio y del final de la secuencia, tal y como vimos en el método <code rend="inline">cortar</code>.</p>
                </div>
                <div type="3">
                    <head>Secuencias de escape</head>
                    <p>¿Qué haces cuando necesitas incluir comillas en una cadena de caracteres? No quieres que el intérprete de Python se equivoque y piense que la cadena termina en donde se encuentre una comilla. En Python puedes poner una barra invertida (\) enfrente de la comilla para que no acabe ahí la cadena. Esto es conocido como secuencia de escape.</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_14" corresp="code_manipular-cadenas-de-caracteres-en-python_14.txt" lang="language-python" rend="block"/>
                    </ab>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_15" corresp="code_manipular-cadenas-de-caracteres-en-python_15.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Otras dos secuencias de escape te permiten incluir marcas de tabulación (t) y saltos de línea (n):</p>
                    <ab>
                        <code xml:id="code_manipular-cadenas-de-caracteres-en-python_16" corresp="code_manipular-cadenas-de-caracteres-en-python_16.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
            </div>
            <div type="2">
                <head>Lecturas sugeridas</head>
                <list type="unordered">
                    <item>
Lutz, <emph>Learning Python</emph>
                        <list type="unordered">
                            <item>Ch. 7: Strings</item>
                            <item>Ch. 8: Lists and Dictionaries</item>
                            <item>Ch. 10: Introducing Python Statements</item>
                            <item>Ch. 15: Function Basics</item>
                        </list>
                    </item>
                </list>
                <div type="3">
                    <head>Sicronización de código</head>
                    <p>Para seguir a lo largo de las lecciones futuras es importante que tengas los archivos correctos y programas en el directorio "programming-historian" de tu disco duro. Al final de cada lección puedes descargar el archivo zip "python-es-lecciones" para asegurarte que tienes el código correcto.</p>
                    <list type="unordered">
                        <item>python-es-lecciones1.zip (<ref target="/assets/python-es-lecciones1.zip">zip</ref>)</item>
                    </list>
                </div>
            </div>
        </body>
    </text>
</TEI>
