<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="interactive-visualization-with-plotly">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Creating Interactive Visualizations with Plotly</title>
                <author role="original_author">Grace Di Méo</author>
                <editor role="reviewers">
                    <persName>Mario Bañuelos</persName>
                    <persName>Rob Lewis</persName>
                </editor>
                <editor role="editors">Scott Kleinman</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <idno type="doi">10.46430/phen0115</idno>
                <date type="published">12/13/2023</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. This lesson is original.</p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>This lesson demonstrates how to create interactive data visualizations in Python with Plotly's open-source graphing libraries using materials from the Historical Violence Database.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">python</term>
                    <term xml:lang="en">data-visualization</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="en">
        <body>
            <div type="2">
                <head>Introduction</head>
                <div type="3">
                    <head>Lesson Goals</head>
                    <p>This lesson demonstrates how to create interactive data visualizations in Python using <ref target="https://perma.cc/94J3-8LAS">Plotly's open-source graphing libraries</ref>. In particular, you will learn:</p>
                    <list type="unordered">
                        <item>The distinction between Plotly Express, Plotly's Graph Objects, and Plotly Dash</item>
                        <item>How to create and export graphs using <code rend="inline">plotly.express</code> and <code rend="inline">plotly.graph_objects</code>
                        </item>
                        <item>How to add custom features to graphs</item>
                    </list>
                </div>
                <div type="3">
                    <head>Prerequisites</head>
                    <p>In order to follow this lesson, it is assumed that you have:</p>
                    <list type="unordered">
                        <item>Installed <ref target="https://www.python.org/downloads/">Python 3</ref> and the <ref target="https://pypi.org/project/pip/">
                                <code rend="inline">pip</code> package installer</ref>
                        </item>
                        <item>An intermediate level understanding of the Python programming language</item>
                        <item>Some familiarity with <ref target="https://perma.cc/UT9Y-KR76">pandas</ref> and <ref target="https://perma.cc/JQW9-AM8Y">NumPy</ref>, which should also be installed</item>
                        <item>Knowledge of basic data visualization techniques (especially bar charts, histograms and scatterplots)</item>
                        <item>Some familiarity with data preprocessing (we will be using pandas)</item>
                    </list>
                    <p>This lesson was developed using Jupyter Notebook. For those who are unfamiliar with this software, the <emph>Programming Historian</emph> offers an excellent lesson on how to create, edit and export Jupyter notebooks <ref target="/en/lessons/jupyter-notebooks">here</ref>. You may also follow this lesson using your own preferred code editor (VSCode, PyCharm, etc.).</p>
                </div>
                <div type="3">
                    <head>What is Plotly?</head>
                    <p>Plotly is a company which provides a number of open-source libraries allowing users to build interactive graphs. Unlike static images, Plotly graphs can respond to user actions with popup labels, pan-and-zoom abilities, faceted data displays, and more. Plotly libraries are available in Python — the focus of this tutorial — as well as various programming languages, including R and Julia.<ref type="footnotemark" target="#note_1"/> A wide variety of graphs is available through Plotly libraries, ranging from the statistical or scientific to the financial or geographic. These graphs can be displayed using various methods, including Jupyter notebooks, HTML files, and web applications produced with Plotly's Dash framework. Static (non-interactive) graphs can also be exported either as raster or vector images.</p>
                    <p style="alert alert-warning">
                        <b>Throughout this lesson, Plotly graphs will be displayed as static images. To access their interactive features, either click on the image or the link in the caption below the image.</b>
                    </p>
                </div>
                <div type="3">
                    <head>Plotly's Python Graphing Library: Plotly Express vs. Plotly Graph Objects vs. Plotly Dash</head>
                    <p>To understand how to use Plotly, it is vital to understand the differences between Plotly Express, Plotly Graph Objects, and Plotly Dash.</p>
                    <p>Essentially, these are three distinct — but often overlapping — Plotly modules with their own use cases:</p>
                    <list type="unordered">
                        <item>Plotly Express (<code rend="inline">plotly.express</code>, usually imported as <code rend="inline">px</code>) is an accessible, high-level interface for creating data visualizations, offering around 30 different graph types. The module provides functions which create figures in just one line of code (although more lines are required for certain customizations), making graphs quick and easy to create. Since this is a 'high-level' interface, users do not need to interact with the underlying data structure of graphs when using <code rend="inline">plotly.px</code>. Plotly recommends that new users start with Express before working directly with Plotly Graph Objects.</item>
                        <item>Plotly Graph Objects (<code rend="inline">plotly.graph_objects</code>, usually imported as <code rend="inline">go</code>) are the actual  figures created and rendered by Plotly 'under the hood': in essence, when a user creates a figure in <code rend="inline">plotly.px</code>, Plotly will generate a 'Graph Object' to store the graph's data. These data include the information visualized in the graph as well as various attributes such as graph colors, sizes, and shapes. It is therefore possible to create visualizations with the lower-level <code rend="inline">plotly.go</code> module; in fact, it is possible to recreate anything made with <code rend="inline">plotly.px</code> using <code rend="inline">plotly.go</code>. It is generally advised to use <code rend="inline">plotly.px</code> where possible, since using <code rend="inline">plotly.go</code> often involves generating many lines of code. However, as we will see later, there are some specific use cases for <code rend="inline">plotly.go</code>.</item>
                        <item>The Plotly Dash module (imported as <code rend="inline">dash</code>) is a framework for building interactive web applications (typically dashboards) which can be embedded into websites and other platforms. Users often integrate figures created using <code rend="inline">plotly.px</code> and/or <code rend="inline">plotly.go</code> into their Dash apps, making the Plotly Python stack a full suite for creating, manipulating, and publishing interactive data visualizations. Plotly Dash is built on top of <code rend="inline">React.js</code> and <code rend="inline">Plotly.js</code> to enable integration with the web, meaning that users do not need to have any knowledge of Javascript, CSS or HTML (only Python).<ref type="footnotemark" target="#note_2"/>
                        </item>
                    </list>
                    <p>Plotly provides comprehensive documentation for working with <ref target="https://perma.cc/94J3-8LAS">Express and Graph Objects</ref> and for using <ref target="https://perma.cc/E7S3-6W3H">Dash</ref>.</p>
                </div>
                <div type="3">
                    <head>Why Plotly?</head>
                    <p>There are currently a plethora of graphing libraries available to Python users, including <ref target="https://perma.cc/N3Y9-CPWN">Matplotlib</ref>, <ref target="https://perma.cc/3AQL-5H6C">Seaborn</ref>, <ref target="https://perma.cc/L2MP-43BL">Bokeh</ref> and <ref target="https://perma.cc/UZM9-2LBE">Pygal</ref>. With so many options to choose from, users will need to select one library over another. Factors such as use case, stylistic taste, and ease of use will be important here, with each library having its own merits. Some of the notable advantages of working with Plotly include:</p>
                    <list type="unordered">
                        <item>Plotly is one of the only packages to be directed at interactive graphs: options such as Matplotlib and Pygal provide only limited interactivity (although Bokeh is also designed for interactivity and is a viable alternative)<ref type="footnotemark" target="#note_3"/>
                        </item>
                        <item>Plotly is the only Python graphing suite which facilitates both the creation of graphs and the integration of these graphs within web apps</item>
                        <item>Plotly has easy (seamless) integration with pandas (for example, DataFrames can be added directly into graph objects)</item>
                        <item>Interactive 3D graphs are available (typically not available in other libraries)</item>
                        <item>Plotly is simple to use (adding features like animation and dropdown bars is relatively easy)</item>
                    </list>
                </div>
            </div>
            <div type="2">
                <head>Sample Dataset</head>
                <p>The dataset for this lesson is a subset of Roger Lane's <ref target="https://perma.cc/93XS-LFG4">'Homicides in Philadelphia, 1839-1932' dataset</ref>
                    <ref type="footnotemark" target="#note_4"/>, covering only the years 1902-1932. If you wish to work along with this lesson, you can <ref target="/assets/interactive-visualization-with-plotly/sample-dataset-philadelphia-homicides-1902-1932.csv">download this particular dataset directly</ref>. (The corresponding 'Philadelphia homicide codebook 1902-1932' document was also consulted to verify variables in the dataset but is not required for completing this lesson.)  As its title suggests, the dataset records homicides which occurred in Philadelphia in the early twentieth century. It is informed by arrest reports filed by the Philadephia police and covers the years 1902, 1908, 1914, 1920, 1926, and 1932. In its downloaded format, the dataset contains 26 columns and 717 rows, although we will be scaling this down.</p>
            </div>
            <div type="2">
                <head>Building Graphs with Plotly Express</head>
                <div type="3">
                    <head>Setting Up Plotly Express</head>
                    <list type="ordered">
                        <item>
                            <p>Before starting, you will need to install three modules to your environment:<ref type="footnotemark" target="#note_5"/>
                            </p>
                            <list type="unordered">
                                <item>Plotly (using the terminal command <code rend="inline">pip install plotly</code>)</item>
                                <item>pandas (using the terminal command <code rend="inline">pip install pandas</code>)<ref type="footnotemark" target="#note_6"/>
                                </item>
                                <item>Kaleido (using the terminal command <code rend="inline">pip install kaleido</code>)<ref type="footnotemark" target="#note_7"/>
                                </item>
                            </list>
                        </item>
                        <item>
                            <p>With these packages installed, create a new Jupyter notebook (or a new Python file in your chosen code editor). Ideally, your notebook should be stored in the same folder as the downloaded sample dataset.</p>
                        </item>
                        <item>
                            <p>
                                <code rend="inline">import</code> these modules at the start of your new notebook:</p>
                        </item>
                    </list>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_0" corresp="code_interactive-visualization-with-plotly_0.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Importing and Cleaning Data</head>
                    <p>Next, we will import and clean the Philadelphia homicide dataset using pandas. This will involve:</p>
                    <list type="unordered">
                        <item>Importing only the required columns from our dataset</item>
                        <item>Replacing any missing numeric values as a NumPy 'non-number' (the <code rend="inline">NaN</code> data type)</item>
                        <item>Relabeling and removing certain data points for clarity and accuracy</item>
                    </list>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_1" corresp="code_interactive-visualization-with-plotly_1.txt" lang="language-python" rend="block"/>
                    </ab>
                </div>
                <div type="3">
                    <head>Bar Charts</head>
                    <p>Now that we've created a pandas <code rend="inline">DataFrame</code> for our historical homicide data, we can start building some basic graphs using Plotly Express. Let's begin by creating a bar chart to represent the count of prosecutions per type of crime. Since our existing dataset does not contain counts of offences (each row represents one individual prosecution), we will first need to create a new <code rend="inline">DataFrame</code> which groups cases by offence type and provides a count:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_2" corresp="code_interactive-visualization-with-plotly_2.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>The next step is to create the bar chart using this new <code rend="inline">phl_by_charge</code> dataset. Notice that the graph has been saved to the variable <code rend="inline">fig</code>, which is a common convention when working with Plotly:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_3" corresp="code_interactive-visualization-with-plotly_3.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-01.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-01.png" alt="Bar graph plotting Charge on the x axis, against Size on the y axis. The Charges are Abortion, Manslaughter and Murder, and the Sizes range from 0 to 500."/>
                        </ref>
                        <figcaption>
                            <p>Figure 1. Simple bar graph with basic interactivity created using Plotly Express. If readers hover over the bars, they will notice floating labels appear. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-01.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>So we have our first <code rend="inline">px</code> graph! Notice that this graph already has some interactivity: hovering over each bar will specify its crime type and prosecution count. Another notable feature is that users can easily save this graph (as a static image) by navigating to the top-right corner and clicking on the camera icon to download the plot as a <code rend="inline">.png</code> file. In this same corner, users have the option to zoom, pan, autoscale or reset their view of the plot. These features are available throughout all the following Plotly visualizations.</p>
                    <p>However, this isn't the most visually appealing graph: it could use a title, some colors, and a clearer y-axis label. We could have done this when we initially created the bar chart by passing additional arguments into the <code rend="inline">.bar()</code> method. We can use the <code rend="inline">labels</code> argument to change the y-axis labels from 'size' to 'Count' and the <code rend="inline">color</code> argument to color the bars according to a given variable (in this example, we will use the crime type, 'Charge'). To add a title, uncomment the <code rend="inline">title</code> argument in the code below and add a title of your choice.</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_4" corresp="code_interactive-visualization-with-plotly_4.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-02.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-02.png" alt="Bar graph plotting Charge on the x axis, against Count on the y axis. The Charges are Abortion, Manslaughter and Murder, and the Counts range from 0 to 500. Each bar now has its own different color. The graph also features a legend which defines its color attributes."/>
                        </ref>
                        <figcaption>
                            <p>Figure 2. Simple bar graph with basic interactivity created using Plotly Express. This plot is a variant of that produced in Figure 1, now featuring color attributes as well as an interactive legend which allows readers to isolate or remove data points. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-02.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>As demonstrated above, Plotly will automatically add a legend to the graph if you are dividing attributes by color (this can be avoided if desired). The legend is also interactive: clicking once on an element will remove its corresponding bar from the graph; double-clicking on an element will isolate all others.</p>
                </div>
                <div type="3">
                    <head>Line Graphs</head>
                    <p>Let's move on to creating a line graph. As a general rule, Plotly Express graphs are created using the syntax <code rend="inline">px.somegraph()</code>, where <code rend="inline">somegraph</code> represents the graph being created. While we used the syntax <code rend="inline">px.bar()</code> to create a bar chart, we will use <code rend="inline">px.line()</code> to create a line graph. The exact term needed for each graph type can be found via the <ref target="https://perma.cc/U4N7-2VM5">Plotly documentation</ref>.</p>
                    <p>Our line graph will illustrate changes in prosecution rates per crime type over the research period. As before, we will need to create a new <code rend="inline">DataFrame</code> which groups cases both by year and offence type:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_5" corresp="code_interactive-visualization-with-plotly_5.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Next, we will create a line graph using the <code rend="inline">.line()</code> method and will use the <code rend="inline">labels</code> and <code rend="inline">color</code> keywords to add some formatting. Again, uncomment the <code rend="inline">title</code> argument in the code below (and in subsequent code samples) if you wish to add a title:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_6" corresp="code_interactive-visualization-with-plotly_6.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-03.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-03.png" alt="Line graph plotting Charges over time. The x axis is labeled with Years 1905 to 1930, while the y axis is labeled with Count from 0 to 180. The Charges are Abortion, Manslaughter and Murder, and the Counts range from 0 to 180. The graph also features a legend which defines its color attributes."/>
                        </ref>
                        <figcaption>
                            <p>Figure 3. Simple line graph with basic interactivity created using Plotly Express. Hovering over the lines at plot points invokes a floating label. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-03.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>We have now learned to create new graphs with some added formatting — but what if we wanted to add our formatting after creating the graph instead? We can use the <code rend="inline">.update_layout()</code> method on our <code rend="inline">fig</code> object to edit the graph at a later stage. This method can be applied to any Plotly Express graph and accepts a very wide range of adjustable parameters. As an example, let's use this method to update our font family, font colors, and the text of our title:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_7" corresp="code_interactive-visualization-with-plotly_7.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-04.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-04.png" alt="Line graph plotting Charges over time. The x axis is labeled with Years 1905 to 1930, while the y axis is labeled Count from 0 to 180. The Charges are Abortion, Manslaughter and Murder, and the Counts range from 0 to 180. The graph also features a legend which defines its color attributes and an embedded title, which reads: Fig. 4: a formatted title!"/>
                        </ref>
                        <figcaption>
                            <p>Figure 4. Simple line graph with basic interactivity created using Plotly Express. Hovering over the lines at plot points invokes a floating label. This plot is a variant of that produced in Figure 3, now featuring updated font, font colors, and an embedded figure title. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-04.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                </div>
                <div type="3">
                    <head>Scatterplots</head>
                    <p>Scatterplots, commonly used for visualizing relationships between continuous variables, can be created with Plotly Express using the <code rend="inline">.scatter()</code> method. For our sample dataset, it might be appropriate to use a scatterplot to depict the relationship between victim and assailant ages.</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_8" corresp="code_interactive-visualization-with-plotly_8.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-05.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-05.png" alt="Scatterplot graph plotting the Age of victims and accused assailants in the case of Charges of Abortion, Manslaughter and Murder. The x axis is labeled Age of Accused 10 to 100, while the y axis is labeled Victim Age 0 to 90. The graph's legend defines its color attributes."/>
                        </ref>
                        <figcaption>
                            <p>Figure 5. Simple scatterplot with basic interactivity created using Plotly Express. Readers can hover over individual plot points to invoke floating labels. Additionally, an interactive legend allows isolation, comparison or removal of data categories. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-05.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>As you can see, scatterplots also contain some inherent interactivity: hovering over a unique data point will display the specific charge and the ages of both the accused and the victim. Clicking and double-clicking on the legend allows you to isolate certain elements.</p>
                </div>
                <div type="3">
                    <head>Facet Plots</head>
                    <p>Facet plots are made up of the multiple subplots which a) share the same set of axes; and b) show a subset of the data (for the same set of variables). These can be made very easily in Plotly Express. First, using the same procedure as outlined in the above examples, you'll need to specify the type of graph you want to use in your subplots. Second, the <code rend="inline">facet_col</code> parameter allows you to specify which variable to use for splitting the data into subplots. In the example below, a 2x1 grid of bar charts shows prosecution counts for each weapon type used by suspects in homicide cases. One bar chart provides counts for male suspects and the other for female suspects:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_9" corresp="code_interactive-visualization-with-plotly_9.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-06.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-06.png" alt="A pair of bar graphs plotting prosecution Counts for each Weapon type. The x axes are labeled Weapon, and the y axes are labeled Size (representing prosecution count). The Weapon types include guns, knives, and poison. The counts range from 0 to 250. The left graph shows Counts for gender of accused - Female, while the right graph shows counts for gender of accused - Male. The graph's legend defines its color attributes."/>
                        </ref>
                        <figcaption>
                            <p>Figure 6. Two bar graph subplots with basic interactivity created using Plotly Express, separating the data between the two genders. Readers can hover over the bars to invoke floating labels. An interactive legend allows isolation, comparison or removal of data categories. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-06.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>Note that this method circumvents the need to specify your grid dimensions, as Plotly Express will automatically divide the grid into the number of categories available (in this case, a 2x1 grid — one chart for males and one for females). However, the method only works for creating a figure which contains just one type of graph. We will discuss how to create figures which contain specified dimensions and multiple types of graph in <ref target="#subplots">this section</ref> on using Graph Objects.</p>
                </div>
                <div type="3">
                    <head>Adding Animations: Animation Frames</head>
                    <p>As we have seen, Plotly Express figures already feature some inbuilt interactivity. Yet, there are a number of other features which we could add to increase interactivity, including animation frames.</p>
                    <p>An animation frame depicts the way data change in relation to a certain measure. In historical research, the measure which is most likely to be useful is time, although most other numerical variables with some inherent rankability (e.g. ordinal or interval data) should work. A Plotly Express figure with an animation frame will contain an interactive toolbar which allows users not only to play/stop the animation but also to manually scroll to the data dispersion at selected points.</p>
                    <p>To create a figure with an animation frame, start by using the usual method outlined in the above examples to specify which type of graph is desired. Then, within that method, use the <code rend="inline">animation_frame</code> parameter to specify which variable should be used for visualizing change. The example below builds a bar chart depicting changes in male and female homicide prosecutions over the sample period:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_10" corresp="code_interactive-visualization-with-plotly_10.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-07.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-07.png" alt="Amimated bar graph plotting Counts of homicide according to the Gender of accused assailants. The x axis is labeled Gender of Accused, and the y axis is labeled Count. A legend defines the bar graph's color attributes. Beneath the bar graph, there are Play and Stop buttons alongside a slider labeled with Years from 1902 to 1930. Upon initial click, the slider node is positioned at the year 1902."/>
                        </ref>
                        <figcaption>
                            <p>Figure 7. Animated bar graph featuring an interactive slider created using Plotly Express. As before, readers have the option to hover over the bars to display floating labels. Readers can either invoke an animation of the graph using Play and Stop buttons, or use the slider function to manually shift their view of the data. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-07.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                </div>
                <div type="3">
                    <head>Adding Animations: Dropdown Bars</head>
                    <p>Dropdown bars are slightly more complicated than animation frames. They can allow users to switch between a wide variety of display options, including changing colors, lines, axes and even variables. When creating figures with dropdown bars, the first step is to create the initial graph without a dropdown bar (this will be the first graph which your users will see). In this example, we'll be working with a scatter plot which visualises the ages of perpetrators and victims, so we'll create this as follows:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_11" corresp="code_interactive-visualization-with-plotly_11.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Note that the graph has been created but is not visible since we have not used the <code rend="inline">fig.show()</code> command yet. This figure will be displayed once we have added a dropdown bar in the following steps.</p>
                    <p>After creating our initial graph, we can use the <code rend="inline">update_layout</code> method again to add a dropdown bar. This is a more complex step, since Plotly Express objects' data are nested at many levels under the hood, so we'll need to go a few layers deeper than normal to access the dropdown feature.</p>
                    <p>Once we have called the <code rend="inline">update_layout</code> method:</p>
                    <list type="unordered">
                        <item>We first need to access the <code rend="inline">updatemenus</code> parameter: this stores a list of dictionaries, each storing the metadata for various design features.</item>
                        <item>The only design feature we are currently interested in is the dropdown box, which is stored under the <code rend="inline">buttons</code> dictionary.</item>
                        <item>The <code rend="inline">buttons</code> key stores as its value <emph>another</emph> list of dictionaries, each representing the options available in your dropdown bar.</item>
                        <item>We'll need to create two <code rend="inline">buttons</code> — one for the stacked bar chart and one for the pie chart — so our <code rend="inline">buttons</code> list will store two dictionaries.</item>
                        <item>
Each of these two dictionaries will need three key-value pairs:<list type="unordered">
                                <item>The first, under the <code rend="inline">args</code> key, will specify which type of graph to display.</item>
                                <item>The second, under the <code rend="inline">label</code> key, will specify the text to display in the dropdown bar.</item>
                                <item>The third, under the <code rend="inline">method</code> key, will specify how to modify the chart (update, restyle, animate, etc.).</item>
                            </list>
                        </item>
                    </list>
                    <p>In the example below, we will look at how to use a dropdown bar to toggle between different categories of a variable. Since our initial scatterplot displays the ages of the accused and their victims, we'll add a dropdown bar which allows users to see data points for either a) all cases, b) murder charges only, c) manslaughter charges only, or d) abortion charges only.</p>
                    <p>To create the dropdown, we need to take the following steps:</p>
                    <list type="unordered">
                        <item>Under the <code rend="inline">label</code> key, the value will specify the text to display in the dropdown bar.</item>
                        <item>Under the <code rend="inline">method</code> key, the value will be 'update' since we are altering the layout <emph>and</emph> the data.</item>
                        <item>Under the <code rend="inline">args</code> key, the value (which is another list of dictionaries) will specify which data will be <code rend="inline">visible</code> (more on this issue below), the title for this graph view (optional), and the titles for the x- and y-axes of this graph view (optional).</item>
                    </list>
                    <p>You need to enter a list for the <code rend="inline">visible</code> key: each item in the list indicates whether the data at that specific index should be displayed. In our example, we have partitioned our dataset into three groups: the data corresponding to murder charges, the data for the manslaughter charges, and the data for the abortion charges. As such, our list for the <code rend="inline">visible</code> key should have three items. Our first <code rend="inline">button</code>, which represents the first graph displayed to the user, should therefore specify <code rend="inline">[True, True, True]</code> since we want all charges to be shown in that first view. However, the remaining three <code rend="inline">buttons</code> will only specify <code rend="inline">True</code> for one item, because we want to show the data for only one type of crime.</p>
                    <p>Now let's put this into practice:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_12" corresp="code_interactive-visualization-with-plotly_12.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-08.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-08.png" alt="Scatterplot graph plotting the Age of victims and accused assailants in the case of Charges of Abortion, Manslaughter and Murder. The x axis is labeled Age of Accused 10 to 100, while the y axis is labeled Victim Age 0 to 90. The graph's legend defines its color attributes. A dropdown filter offers readers the option to isolate each category of Charge or display All Charges."/>
                        </ref>
                        <figcaption>
                            <p>Figure 8. Scatterplot featuring an interactive dropdown filter created using Plotly Express. This iteration of the plot also features a dropdown menu which facilitates filtering by category of Charge or to display All Charges. As before, an interactive legend allows readers to isolate, compare or remove data categories, and hover-over invokes floating labels for individual data points. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-08.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>Creating the dropdown bar in the above example provides users with the ability to isolate (and examine) a given element from the wider visualization. We visited this Plotly feature earlier when noting that double-clicking on an element in the graph's legend will remove it from the visualization. However, the dropdown menu offers an additional advantage: it provides us with the ability to create dynamic headings, which means our titles and labels change depending on which option we have selected from the dropdown box.</p>
                    <p>The above examples demonstrate that it is very easy to create graphs using Plotly Express and relatively simple to add interactivity such as animation frames and dropdown bars. We will now look at creating graphs with Plotly Graph Objects. Specifically, we will focus on what 'Graph Objects' are, how they work, and when (and why) you might want to create graphs using <code rend="inline">plotly.go</code> instead of <code rend="inline">plotly.px</code>.</p>
                </div>
            </div>
            <div type="2">
                <head>Building Graphs with Plotly Graph Objects</head>
                <div type="3">
                    <head>Setting Up Plotly Graph Objects</head>
                    <p>To start working with Plotly's Graph Objects, you'll need to import the <code rend="inline">graph_objects</code> module:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_13" corresp="code_interactive-visualization-with-plotly_13.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p style="alert alert-warning">
Note that in a conventional `.py `script the libraries should all be imported at the start of the script.
The code to import these libraries is provided at this stage for clarity.
</p>
                </div>
                <div type="3">
                    <head>They're All Objects! Data Structure of Plotly Graph Objects</head>
                    <p>As mentioned in the introduction to this lesson, all Plotly Express figures are actually Graph Objects 'under the hood'. This means that, when you create a figure using <code rend="inline">plotly.px</code>, you are creating an instance of a Graph Object.</p>
                    <p>This becomes evident if we call the <code rend="inline">type</code> function on the <code rend="inline">fig</code> variable:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_14" corresp="code_interactive-visualization-with-plotly_14.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>It is important to note therefore that all figures created in Plotly are effectively Graph Objects.</p>
                    <p>Graph Objects are represented by tree-like (hierarchical) data structures with three top levels: <code rend="inline">data</code>, <code rend="inline">layout</code>, and <code rend="inline">frames</code>:</p>
                    <list type="unordered">
                        <item>The <code rend="inline">data</code> level contains information such as the type of chart, the categories available, the data points falling under each category, whether to show the category in the legend, the types of markers being used for data points, and the text/data to display when hovering over data points.</item>
                        <item>The <code rend="inline">layout</code> attribute contains information such as the figure dimensions, the fonts and colors used, any annotations, the coordinates of subplots, the metadata associated with any <code rend="inline">buttons</code> (as discussed in a previous example), and whether any images should be used in the background.</item>
                        <item>The <code rend="inline">frames</code> attribute stores information relating to animations used in the figure, such as the data to be displayed at each stop point on a sliding bar. This attribute will not be created unless you add an animation to the figure.</item>
                    </list>
                    <p>It is easy to view the underlying data structure of a figure by printing it as a Python dictionary with the <code rend="inline">fig.to_dict()</code> function. We can format the structure for easier reading by viewing it in JSON format with <code rend="inline">fig.to_json(pretty=True)</code>. In the example below, we display only the first 500 characters to provide a sample of the output when we use this method (again using the <code rend="inline">fig</code> variable we created above).</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_15" corresp="code_interactive-visualization-with-plotly_15.txt" lang="language-python" rend="block"/>
                    </ab>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_16" corresp="code_interactive-visualization-with-plotly_16.txt" lang="language-json" rend="block"/>
                    </ab>
                    <p>Examining the output of a figure should help you to understand the underlying data structure and properties of a graph object. If you print the full output (using the <code rend="inline">fig.to_dict()</code> method), you will notice that:</p>
                    <list type="unordered">
                        <item>Our <code rend="inline">data</code> attribute stores data for each of the three categories (murder, manslaughter, and abortion) under separate dictionaries</item>
                        <item>The <code rend="inline">data</code> attribute qualifies which type of graph is being used (in this case 'scatter')</item>
                        <item>The <code rend="inline">layout</code> attribute contains the figure title</item>
                        <item>The <code rend="inline">layout</code> attribute contains the data associated with the <code rend="inline">buttons</code> (i.e. the dropdown bar)</item>
                        <item>There is no <code rend="inline">traces</code> attribute since there is no animation frame associated with this figure</item>
                    </list>
                </div>
                <div type="3">
                    <head>Using Plotly Graph Objects vs. Plotly Express</head>
                    <p>Another key point to be aware of is that creating graphs with <code rend="inline">plotly.go</code> typically requires much more code than making the same graph with <code rend="inline">plotly.px</code>.</p>
                    <p>Consider the following example: building a simple horizontal bar chart to show male vs. female homicide prosecutions. First, let's create a <code rend="inline">DataFrame</code> which tallies prosecution counts by gender:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_17" corresp="code_interactive-visualization-with-plotly_17.txt" lang="language-python" rend="block"/>
                    </ab>
                    <p>Now let's build the horizontal bar chart with these data with <code rend="inline">plotly.go</code>:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_18" corresp="code_interactive-visualization-with-plotly_18.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-09.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-09.png" alt="Horizontal bar chart. The x axis is labeled with Counts from 0&#10;        to 600, while the y axis is labeled Gender. The upper bar shows the number of male accused,&#10;        whereas the lower bar shows the number of female accused."/>
                        </ref>
                        <figcaption>
                            <p>Figure 9. Horizontal bar chart with basic interactivity created using Plotly Graph Objects. Readers can hover over the bars to invoke floating labels. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-09.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>Note that when using Plotly Graph Objects, you can supply a title using the <code rend="inline">layout</code> argument, which takes a dictionary containing the <code rend="inline">title</code> keyword and its value.</p>
                    <p>Now, let's create the same figure using <code rend="inline">plotly.px</code>:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_19" corresp="code_interactive-visualization-with-plotly_19.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-10.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-10.png" alt="Horizontal bar chart. The x axis is labeled with Counts from 0 to 600,&#10;        while the y axis is labeled Gender. The upper bar shows the number of male accused, whereas the&#10;        lower bar shows the number of female accused."/>
                        </ref>
                        <figcaption>
                            <p>Figure 10. Horizontal bar chart with basic interactivity created using Plotly Express. Readers can hover over the bars to invoke floating labels. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-10.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>It becomes clear from the above examples that <code rend="inline">plotly.go</code> requires more code than <code rend="inline">plotly.px</code> because many features need to be manually created in <code rend="inline">plotly.go</code>. Thus, it is usually better to use <code rend="inline">plotly.px</code> where possible.</p>
                </div>
                <div type="3">
                    <head>Why Use Graph Objects?</head>
                    <p>This leads us to a key question: if it's so much easier to create graphs using <code rend="inline">plotly.px</code>, why should we bother using <code rend="inline">plotly.go</code> at all? The simple answer is that there are several useful features and capabilities which are only available by using <code rend="inline">plotly.go</code>. We will look at two such capabilities in this section of the tutorial: tables and subplots.</p>
                </div>
                <div type="3">
                    <head>Tables</head>
                    <p>One of the most useful features provided through the <code rend="inline">plotly.go</code> module is the option to create neat, interactive tables. This requires four steps:</p>
                    <list type="ordered">
                        <item>Create a new figure using the <code rend="inline">.Figure()</code> method.</item>
                        <item>Under the <code rend="inline">data</code> attribute, call the <code rend="inline">.Table()</code> method to specify that the figure should be a table.</item>
                        <item>Within the <code rend="inline">.Table()</code> method, create a <code rend="inline">header</code> dictionary to store a list of column headings.</item>
                        <item>Also within the <code rend="inline">.Table()</code> method, create a <code rend="inline">cells</code> dictionary to store the data (values).</item>
                    </list>
                    <p>It is also possible to customise it with labels, colors and alignment options.</p>
                    <p>In the example below, we'll create a table to store the entire Philadelphia homicides dataset:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_20" corresp="code_interactive-visualization-with-plotly_20.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-11.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-11.png" alt="Table showing a portion of the Philadelphia Homicides dataset for the year 1902. Column headers are Year, Charge, Gender of accused, Victim age, &#10;             Weapon, and Gang."/>
                        </ref>
                        <figcaption>
                            <p>Figure 11. Table containing the Philadelphia Homicides dataset created with Plotly Graph Objects. Readers can
        scroll through the entire dataset as they would in a spreadsheet. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-11.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                    <p>As with <code rend="inline">plotly.px</code>, figures created with <code rend="inline">plotly.go</code> have some inherent interactivity. Tables, for example, provide users the ability to scroll through rows (either using a trackpad or the scrollbar on the right) and are therefore excellent for saving space. It is also easy to move columns around by clicking on the column headers and dragging them left or right.</p>
                </div>
                <div type="3">
                    <head>Subplots</head>
                    <p>Another useful feature of the <code rend="inline">plotly.go</code> module is its capacity for building subplots. Although <code rend="inline">plotly.px</code> can build facet plots, these are comparatively limited, since they must all share the same graph type, axes and variables. Subplots, on the other hand, allow you to create a grid containing different types of graphs with their own axes and variables, which ends up looking like a sort of 'dashboard'.</p>
                    <p>Since the code is particularly lengthy for creating subplots, this example will be provided on a step-by-step basis. We will create a 3x1 grid containing three different charts: the first will be a standard bar chart to quantify prosecution counts for male vs. female suspects; the second will be a line graph showing changes in male vs. female prosecutions over time; and the third will be a boxplot showing the minimum, inter-quartile range and maximum ages of male vs. female suspects.</p>
                    <div type="4">
                        <head>Step 1: Import the subplots module and get data</head>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_21" corresp="code_interactive-visualization-with-plotly_21.txt" lang="language-python" rend="block"/>
                        </ab>
                    </div>
                    <div type="4">
                        <head>Step 2: Create an empty subplot with a 3x1 grid using the <code rend="inline">make_subplots()</code> function</head>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_22" corresp="code_interactive-visualization-with-plotly_22.txt" lang="language-python" rend="block"/>
                        </ab>
                    </div>
                    <div type="4">
                        <head>Step 3: Add the first graph (the bar chart) using the <code rend="inline">.add_trace()</code> method</head>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_23" corresp="code_interactive-visualization-with-plotly_23.txt" lang="language-python" rend="block"/>
                        </ab>
                        <figure style="">
                            <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-12.html">
                                <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-12.png" alt="A three-column plot with a bar chart in the left column and two empty columns on its right. The&#10;        y axis is labeled with counts from 0 to 600, while the bar charts on the x axis are labeled (from left to&#10;        right) Female and Male."/>
                            </ref>
                            <figcaption>
                                <p>Figure 12. A three-column plot with basic interactivity created using Plotly Graph Objects, with a bar chart on the left showing the number of accused by
        gender, and two empty columns on the right. Readers can hover over the bars to invoke floating labels. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-12.html">Click to explore an interactive variant of this plot</ref>.</p>
                            </figcaption>
                        </figure>
                        <p style="alert alert-warning">
Note: If you are creating a subplot using Jupyter Notebook, rerunning the code may duplicate the trace you added and thereby add more items to the legend. If you need to rerun the code, it is best to restart the kernel first.
</p>
                    </div>
                    <div type="4">
                        <head>Step 4: Add the second graph (the line graph)</head>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_24" corresp="code_interactive-visualization-with-plotly_24.txt" lang="language-python" rend="block"/>
                        </ab>
                        <figure style="">
                            <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-13.html">
                                <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-13.png" alt="A three-column plot with a bar chart in the left column and a line graph in the middle column. The bar chart's&#10;        y axis is labeled with counts from 0 to 600, while the x axis is labeled (from left to right) Female and Male.&#10;        The line graph's x axis is labeled with years from 1900 to 1930 and the y axis is labeled with counts from 0 to 150. A green line indicates the number &#10;        of male accused, and a red line indicates the number of female accused. A legend in the top right provides the color attributes for the bars in the bar &#10;        chart and the lines in the line chart."/>
                            </ref>
                            <figcaption>
                                <p>Figure 13. A three-column plot created using Plotly Graph Objects, with a bar chart showing the number of accused by
        gender and a line graph showing the number of male and female accused by year. Hover-over invokes floating labels for each bar and individual data points. The third column is still empty. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-13.html">Click to explore an interactive variant of this plot</ref>.</p>
                            </figcaption>
                        </figure>
                        <p style="alert alert-warning">
Note that if you did not import `plotly.graph_objs.scatter.Line`, you may get the following warning (which you can safely ignore):
<ab>
                                <code xml:id="code_interactive-visualization-with-plotly_25" corresp="code_interactive-visualization-with-plotly_25.txt" rend="block"/>
                            </ab>
                        </p>
                    </div>
                    <div type="4">
                        <head>Step 5: Add the final graph (the boxplot)</head>
                        <p>We have not looked at boxplots yet, but they are created in a similar way to other graphs and have similar interactive behaviour (e.g. scrolling over a box will show the minimum, maximum, median, and interquartile range of the data).</p>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_26" corresp="code_interactive-visualization-with-plotly_26.txt" lang="language-python" rend="block"/>
                        </ab>
                        <figure style="">
                            <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-14.html">
                                <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-14.png" alt="A three-column plot with a bar chart in the left column, a line graph in the middle column and a box plot in the right column. The bar chart's&#10;        y axis is labeled with counts from 0 to 600, while the x axis is labeled (from left to right) Female and Male.&#10;        The line graph's x axis is labeled with years from 1900 to 1930 and the y axis is labeled with counts from 0 to 150. A green line indicates the number &#10;        of male accused, and a red line indicates the number of female accused.&#10;        The x axis of the box plot shows one box for female accused on the left and another box for male accused on the right. The y axis indicates age between &#10;        0 and 100. The legend indicates the color attributes and&#10;        labels for all three subplots."/>
                            </ref>
                            <figcaption>
                                <p>Figure 14. A three-column plot created using Plotly Graph Objects, with a bar chart showing the number of accused by
        gender, a line graph showing the number of male and female accused by year, and a box plot showing the
        distribution and outlier values of male and female accused by age. Hover-over invokes floating labels for each bar or individual data point and shows 
        the minimum, maximum, median, and interquartile range on the box plot. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-14.html">Click to explore an interactive variant of this plot</ref>.</p>
                            </figcaption>
                        </figure>
                    </div>
                    <div type="4">
                        <head>Step 6: Format the figure</head>
                        <p>There are still some tweaks needed, like adding a main title for the figure and subtitles for each subplot. You might also want to change fonts, text positioning, and the figure size — you can use the <code rend="inline">.update_layout()</code> method to change these properties:</p>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_27" corresp="code_interactive-visualization-with-plotly_27.txt" lang="language-python" rend="block"/>
                        </ab>
                        <figure style="">
                            <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-15.html">
                                <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-15.png" alt="A three-column plot with a bar chart in the left column, a line graph in the middle column and a box plot in the right column. The bar chart's&#10;        y axis is labeled with counts from 0 to 600, while the x axis is labeled (from left to right) Female and Male.&#10;        The line graph's x axis is labeled with years from 1900 to 1930 and the y axis is labeled with counts from 0 to 150. A green line indicates the number &#10;        of male accused, and a red line indicates the number of female accused.&#10;        The x axis of the box plot shows one box for female accused on the left and another box for male accused on the right. The y axis indicates age between &#10;        0 and 100. The legend indicates the color attributes and&#10;        labels for all three subplots. The subtitles: Suspect gender, Year, and Suspect gender are placed under each subplot (from left to&#10;        right)."/>
                            </ref>
                            <figcaption>
                                <p>Figure 15. A three-column plot created using Plotly Graph Objects, with a bar chart showing the number of accused by
        gender, a line graph showing the number of male and female accused by year, and a box plot showing the
        distribution and outlier values of male and female accused by age. This plot is a variant of that produced in
        Figure 14, with added subtitles for each subplot. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-15.html">Click to explore an interactive variant of this plot</ref>.</p>
                            </figcaption>
                        </figure>
                    </div>
                    <div type="4">
                        <head>Step 7: Add annotations to the line graph</head>
                        <p>Since the legend has been removed, it's now impossible to distinguish between the lines which represent males and those which represent females in the line graph. We can use the <code rend="inline">.update_layout()</code> method to add annotated arrows pointing to each line:</p>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_28" corresp="code_interactive-visualization-with-plotly_28.txt" lang="language-python" rend="block"/>
                        </ab>
                        <figure style="">
                            <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-16.html">
                                <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-16.png" alt="A three-column plot with a bar chart in the left column, a line graph in the middle column and a box plot in the right column. The bar chart's&#10;        y axis is labeled with counts from 0 to 600, while the x axis is labeled (from left to right) Female and Male.&#10;        The line graph's x axis is labeled with years from 1900 to 1930 and the y axis is labeled with counts from 0 to 150. A green line indicates the number &#10;        of male accused, and a red line indicates the number of female accused. An arrow with the label Males points to the green line and an arrow&#10;        with the label females points to the red line.&#10;        The x axis of the box plot shows one box for female accused on the left and another box for male accused on the right. The y axis indicates age between &#10;        0 and 100. The legend indicates the color attributes and&#10;        labels for all three subplots. The subtitles: Suspect gender, Year, and Suspect gender are placed under each&#10;        subplot (from left to right)."/>
                            </ref>
                            <figcaption>
                                <p>Figure 16. A three-column plot created using Plotly Graph Objects, with a bar chart showing the number of accused by
        gender, a line graph showing the number of male and female accused by year, and a box plot showing the
        distribution and outlier values of male and female accused by age. This plot is a variant of that produced in
        Figure 15, with added annotations in the line graph. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-16.html">Click to explore an interactive variant of this plot</ref>.</p>
                            </figcaption>
                        </figure>
                    </div>
                    <div type="4">
                        <head>Step 8: Add annotations below the figure</head>
                        <p>We might want to add annotations below the figure to specify the focus of each subplot (particularly useful for academic publishing), which we can do using the <code rend="inline">.add_annotation()</code> method:</p>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_29" corresp="code_interactive-visualization-with-plotly_29.txt" lang="language-python" rend="block"/>
                        </ab>
                        <figure style="">
                            <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-17.html">
                                <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-17.png" alt="A three-column plot with a bar chart in the left column, a line graph in the middle column and a box plot in the right column. The bar chart's&#10;        y axis is labeled with counts from 0 to 600, while the x axis is labeled (from left to right) Female and Male.&#10;        The line graph's x axis is labeled with years from 1900 to 1930 and the y axis is labeled with counts from 0 to 150. A green line indicates the number &#10;        of male accused, and a red line indicates the number of female accused. An arrow with the label Males points to the green line and an arrow&#10;        with the label females points to the red line.&#10;        The x axis of the box plot shows one box for female accused on the left and another box for male accused on the right. The y axis indicates age between &#10;        0 and 100. The legend indicates the color attributes and&#10;        labels for all three subplots. The subtitles: Suspect gender, Year, and Suspect gender are placed under each&#10;        subplot (from left to right). An additional annotation below all three subplots reads Male vs. female suspects&#10;        (left); male vs. female suspects over time (middle); age distributions of male vs. female suspects (right)."/>
                            </ref>
                            <figcaption>
                                <p>Figure 17. A three-column plot created using Plotly Graph Objects, with a bar chart showing the number of accused by
        gender, a line graph showing the number of male and female accused by year, and a box plot showing the
        distribution and outlier values of male and female accused by age. This plot is a variant of that produced in
        Figure 16, with an additional annotation added below all three subplots. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-17.html">Click to explore an interactive variant of this plot</ref>.</p>
                            </figcaption>
                        </figure>
                    </div>
                </div>
            </div>
            <div type="2">
                <head>Viewing and Exporting Figures</head>
                <p>In the previous sections of the lesson, we saw how to create and modify interactive graphs using both the <code rend="inline">plotly.px</code> and <code rend="inline">plotly.go</code> modules. We will next consider how to view and export these graphs for publications or other research outputs.</p>
                <p>The methods discussed here will use a basic line graph, identical to that created earlier in the tutorial (see Figure 3). Let's start by recreating that figure:</p>
                <ab>
                    <code xml:id="code_interactive-visualization-with-plotly_30" corresp="code_interactive-visualization-with-plotly_30.txt" lang="language-python" rend="block"/>
                </ab>
                <div type="3">
                    <head>Viewing Figures</head>
                    <p>As we have seen throughout this lesson, the <code rend="inline">.show()</code> method can be used to output a figure. By default, this method uses the inbuilt Plotly renderer and therefore provides interactivity:</p>
                    <ab>
                        <code xml:id="code_interactive-visualization-with-plotly_31" corresp="code_interactive-visualization-with-plotly_31.txt" lang="language-python" rend="block"/>
                    </ab>
                    <figure style="">
                        <ref style="" target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-03.html">
                            <img src="/images/interactive-visualization-with-plotly/en-or-interactive-visualization-with-plotly-03.png" alt="Bar graph plotting Charge on the x axis, against Size on the y axis. The Charges are Abortion,&#10;        Manslaughter and Murder, and the Sizes range from 0 to 500."/>
                        </ref>
                        <figcaption>
                            <p>Figure 18. Reproduction of Figure 3, illustrating the <code rend="inline">fig.show()</code> method. <ref target="/assets/interactive-visualization-with-plotly/interactive-visualization-with-plotly-03.html">Click to explore an interactive variant of this plot</ref>.</p>
                        </figcaption>
                    </figure>
                </div>
                <div type="3">
                    <head>Exporting Figures</head>
                    <p>Plotly figures can be exported either as interactive or static (non-interactive) graphs. Interactive graphs may be useful for research websites and (some) digital publications, whereas static graphs are appropriate for print publications.</p>
                    <div type="4">
                        <head>Exporting as HTML</head>
                        <p>Exporting figures as HTML retains their interactivity when viewed in a web browser. Any figure can be saved as an HTML file by using the <code rend="inline">.write_html()</code> method:</p>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_32" corresp="code_interactive-visualization-with-plotly_32.txt" lang="language-python" rend="block"/>
                        </ab>
                        <p>By default, any exported figure will be saved in the same folder as that in which your script is stored. If you want to store the figure elsewhere (a different folder), you can specify the exact directory when you specify the file name (for example, <code rend="inline">fig.write_html("your_path/your_file_name.html")</code>).</p>
                    </div>
                    <div type="4">
                        <head>Exporting static images</head>
                        <p>Plotly provides numerous options for exporting both raster images (<code rend="inline">.png</code> or <code rend="inline">.jpg</code>) and vector images (<code rend="inline">.pdf</code> or .<code rend="inline">svg</code>). To do this, use the <code rend="inline">.write_image()</code> function and specify the image type within the file name:</p>
                        <ab>
                            <code xml:id="code_interactive-visualization-with-plotly_33" corresp="code_interactive-visualization-with-plotly_33.txt" lang="language-python" rend="block"/>
                        </ab>
                    </div>
                </div>
            </div>
            <div type="2">
                <head>Summary</head>
                <p>Plotly offers the ability to create publication-quality, interactive figures using Python and other programming languages. This lesson provides an overview of what Plotly is, why it's useful, and how it can be used with Python. It also demonstrates the different modules in the Plotly framework (Plotly Express and Plotly Graph Objects) and the methods required to create, edit, and export data visualizations. The key syntaxes covered in this lesson are:</p>
                <list type="unordered">
                    <item>Installing Plotly using <code rend="inline">pip install plotly</code>
                    </item>
                    <item>Importing Plotly Express and Plotly Graph Objects using <code rend="inline">import plotly.express as px</code> and <code rend="inline">import plotly.graph_objects as go</code>
                    </item>
                    <item>
With Plotly Express:<list type="unordered">
                            <item>Creating graphs using <code rend="inline">px.bar()</code>, <code rend="inline">px.line()</code>, and <code rend="inline">px.scatter()</code>
                            </item>
                            <item>Adding features to graphs using parameters such as <code rend="inline">title</code>, <code rend="inline">labels</code>, <code rend="inline">color</code>, and <code rend="inline">animation_frame</code>
                            </item>
                            <item>Using <code rend="inline">.update_layout()</code> to edit figures after creation and/or add dropdown bars</item>
                        </list>
                    </item>
                    <item>
With Plotly Graph Objects:<list type="unordered">
                            <item>Recognizing the <code rend="inline">data</code>, <code rend="inline">layout</code>, and <code rend="inline">traces</code> attributes as key underlying structure of a graph object</item>
                            <item>Creating new (empty) graph objects with <code rend="inline">go.Figure()</code>
                            </item>
                            <item>Creating graphs using <code rend="inline">go.Bar()</code>, <code rend="inline">go.Table()</code>, <code rend="inline">go.Line()</code>, and <code rend="inline">go.Box()</code>
                            </item>
                            <item>Editing features using the <code rend="inline">layout</code> attribute</item>
                            <item>Creating subplots (importing the subplots module using <code rend="inline">from plotly.subplots import make_subplots</code>, implementing subplots with <code rend="inline">make_subplots()</code> function, and adding traces to subplots using <code rend="inline">.add_trace()</code> method)</item>
                            <item>Using <code rend="inline">.update_layout()</code> to edit figures after creation</item>
                        </list>
                    </item>
                    <item>Exporting figures created with Express or Graph Objects using <code rend="inline">.write_html()</code> and <code rend="inline">.write_image()</code>
                    </item>
                </list>
            </div>
            <div type="2">
                <head>Endnotes</head>
                <p>
                    <ref type="footnotemark" target="#note_1"/> : Under the hood, these libraries are built on top of the Plotly JavaScript library.
<ref type="footnotemark" target="#note_2"/> : Plotly Dash is outside the scope of this lesson, which instead focuses on <code rend="inline">plotly.px</code> and <code rend="inline">plotly.go</code>.
<ref type="footnotemark" target="#note_3"/> : For further information on Bokeh, see Charlie Harper's lesson on <ref target="/en/lessons/visualizing-with-bokeh">Visualizing Data with Bokeh and Pandas</ref> here on <emph>Programming Historian</emph>.
<ref type="footnotemark" target="#note_4"/> : The dataset and its related documents are available freely via the <ref target="https://perma.cc/WCW9-YRX9">Historical Violence Database</ref> project organized by Ohio State University and licensed under a <ref target="https://perma.cc/3BYZ-UDYW">Creative Commons Attribution-Noncommercial-Share Alike 3.0 United States License</ref>.
<ref type="footnotemark" target="#note_5"/> : If you already work with Jupyter notebooks, there is a good chance that other dependencies are already installed. However, if you are working in a clean Python environment or in a code editor like VS Code, it may also be necessary to run <code rend="inline">pip install ipykernel</code> and <code rend="inline">pip install nbformat</code>.
<ref type="footnotemark" target="#note_6"/> : We will also be using the NumPy module, but this is automatically installed with the installation of pandas.
<ref type="footnotemark" target="#note_7"/> : Kaleido is a Python library for generating static images (e.g. JPG and SVG files) and will therefore be needed when exporting non-interactive graphs.</p>
            </div>
        </body>
    </text>
</TEI>
