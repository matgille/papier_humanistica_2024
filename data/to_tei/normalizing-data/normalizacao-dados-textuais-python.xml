<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Normaliza&#231;&#227;o de Dados Textuais com Python</title>
  <layout>lesson</layout>
  <collection>lessons</collection>
  <slug>normalizacao-dados-textuais-python</slug>
  <date>2012-07-17</date>
  <translation_date>2022-10-27</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford,Frederik Elwert</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Felipe Lamarca</translator>
  <translation-editor>Jimmy Medeiros</translation-editor>
  <translation-reviewer>Andr&#233; Salvo,Gabriela Kucuruza</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/460</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Nesta li&#231;&#227;o tornar&#225; a lista criada na li&#231;&#227;o 'De HTML para Lista de Palavras' mais f&#225;cil de ser analisada atrav&#233;s da normaliza&#231;&#227;o desses dados.</abstract>
  <original>normalizing-data</original>
  <avatar_alt>Mulher alta a arrastar um jovem baixo</avatar_alt>
  <doi>10.46430/phpt0029</doi>
</metadata>
  <text>
    <body>
      <div n="2"><head>Objetivos da Li&#231;&#227;o</head>
<p>A lista que cri&#225;mos na li&#231;&#227;o <link target="/pt/licoes/HTML-lista-palavras-2">De HTML para Lista de Palavras (parte 2)</link> precisa ser normalizada antes de poder ser utilizada. Faremos isso atrav&#233;s da aplica&#231;&#227;o de alguns m&#233;todos de string adicionais, bem como utilizando express&#245;es regulares. Uma vez normalizados, estaremos aptos a analisar os nossos dados mais facilmente.</p>
</div>
      <div n="2"><head>Ficheiros Necess&#225;rios para esta Li&#231;&#227;o</head>
<ul>
<li><code type="inline">html-to-list1.py</code></li>
<li><code type="inline">obo.py</code></li>
</ul>
<p>Caso n&#227;o tenha esses ficheiros das li&#231;&#245;es anteriores, pode fazer o <emph>download</emph> de um <link target="/assets/python-lessons3.zip">zip</link>.</p>
</div>
      <div n="2"><head>Limpando a Lista</head>
<p>Na li&#231;&#227;o <link target="/pt/licoes/HTML-lista-palavras-2">De HTML para Lista de Palavras (parte 2)</link>, escrevemos um programa em Python chamado <code type="inline">html-to-list1.py</code> que fazia o <emph>download</emph> de uma <link target="https://perma.cc/8LM6-W39K">p&#225;gina web</link>, removia a formata&#231;&#227;o HTML e os metadados e retornava uma lista de "palavras" como a apresentada abaixo. Tecnicamente, essas entidades s&#227;o chamadas de "<emph>tokens</emph>" ao inv&#233;s de "palavras". Elas incluem alguns elementos que, estritamente falando, n&#227;o s&#227;o palavras (como a abrevia&#231;&#227;o &amp;c. para "etcetera"). Elas tamb&#233;m incluem elementos que podem ser considerados composi&#231;&#245;es de mais de uma palavra. O possessivo "Akerman's", por exemplo, &#233; ocasionalmente analisado por linguistas como duas palavras: "Akerman" e um marcador de posse. "o'clock" &#233; uma palavra ou duas? E assim por diante.</p>
<p>Volte ao seu programa <code type="inline">html-to-list1.py</code> e certifique-se de que o seu resultado se assemelha ao seguinte:</p>
<pre><code class="language-python" xml:id="code_normalizacao-dados-textuais-python_0" type="block" corresp="code_normalizacao-dados-textuais-python_0.txt"></code></pre>
<p>Por si s&#243;, a habilidade de separar um documento em palavras n&#227;o &#233; muito &#250;til, j&#225; que somos capazes de ler. Podemos usar o texto, no entanto, para executar tarefas que n&#227;o s&#227;o sempre poss&#237;veis sem <emph>softwares</emph> especiais. Come&#231;aremos calculando as frequ&#234;ncias dos <emph>tokens</emph> e outras unidades lingu&#237;sticas, uma forma cl&#225;ssica de mensurar textos. </p>
<p>Est&#225; claro que a nossa lista precisar&#225; de uma limpeza antes de conseguirmos utiliz&#225;-la para contar frequ&#234;ncias. Em linha com as pr&#225;ticas estabelecidas em <link target="/pt/licoes/HTML-lista-palavras-1">De HTML para Lista de Palavras (parte 1)</link>, vamos tentar descrever o nosso algoritmo em portugu&#234;s primeiro. Desejamos saber a frequ&#234;ncia de cada palavra com sentido que aparece na transcri&#231;&#227;o do julgamento. Desse modo, as etapas envolvidas podem ser semelhantes a estas:</p>
<ul>
<li>Converter todas as palavras para letras min&#250;sculas de modo que "BENJAMIN" e "benjamin" sejam contabilizadas como a mesma palavra</li>
<li>Remover quaisquer caracteres estranhos ou incomuns</li>
<li>Contar o n&#250;mero de vezes que cada palavra aparece</li>
<li>Remover palavras excessivamente comuns como "it", "the", "and", etc.</li>
</ul>
</div>
      <div n="2"><head>Converter para Min&#250;sculas</head>
<p>Tipicamente tokens s&#227;o convertidos em letras min&#250;sculas ao contar frequ&#234;ncias, ent&#227;o faremos isso atrav&#233;s do m&#233;todo de string <code type="inline">lower</code> que foi introduzido em <link target="/pt/licoes/manipular-strings-python">Manipular strings com Python</link>. J&#225; que este &#233; um m&#233;todo de string, devemos aplic&#225;-lo &#224; string <code type="inline">text</code> no programa <code type="inline">html-to-list1.py</code>. Ajuste <code type="inline">html-to-list1.py</code> adicionando a <emph>string tag</emph> <code type="inline">lower()</code> ao final da string <code type="inline">text</code>. </p>
<pre><code class="language-python" xml:id="code_normalizacao-dados-textuais-python_1" type="block" corresp="code_normalizacao-dados-textuais-python_1.txt"></code></pre>
<p>Agora deve ver a mesma lista de palavras de antes, mas com todos os caracteres min&#250;sculos.</p>
<p>Ao chamar m&#233;todos em sequ&#234;ncia como mostrado, torna-se poss&#237;vel manter o nosso c&#243;digo curto e fazer mudan&#231;as bastante significativas no nosso programa.</p>
<p>Como afirm&#225;mos anteriormente, o Python torna f&#225;cil a execu&#231;&#227;o de muitas tarefas com pouqu&#237;ssimo c&#243;digo.</p>
<p>Neste ponto, podemos examinar uma s&#233;rie de outras entradas do <emph>Old Bailey Online</emph> e uma ampla gama de outras fontes em potencial para termos certeza de que n&#227;o h&#225; outros caracteres especiais que causar&#227;o problema posteriormente. Tamb&#233;m podemos tentar antecipar situa&#231;&#245;es nas quais n&#227;o desejamos nos livrar de pontua&#231;&#227;o (por exemplo, para distinguir valores monet&#225;rios como "$1629&#8221; ou &#8220;&#163;1295&#8221; de datas, ou reconhecer que &#8220;1629-40&#8221; carrega um significado diferente de &#8220;1629 40&#8221;). Isso &#233; o que programadores profissionais s&#227;o pagos para fazer: tentar pensar em tudo que pode dar errado e tratar isso com anteced&#234;ncia.</p>
<p>Vamos adotar uma abordagem diferente. O nosso objetivo principal &#233; desenvolver t&#233;cnicas que um historiador em exerc&#237;cio pode utilizar durante o processo de investiga&#231;&#227;o. Isso significa que quase sempre preferiremos solu&#231;&#245;es aproximadamente corretas que possam ser desenvolvidas rapidamente. Ent&#227;o, ao inv&#233;s de perder tempo neste momento para tornar o nosso programa robusto em face de exce&#231;&#245;es, vamos simplesmente nos livrar de tudo que n&#227;o seja uma letra com ou sem acento ou um algarismo ar&#225;bico. Programa&#231;&#227;o &#233; tipicamente um processo de "refinamento gradual". Come&#231;amos com um problema e parte de uma solu&#231;&#227;o, e depois continuamos refinando a solu&#231;&#227;o at&#233; obter um resultado que funcione melhor.</p>
</div>
      <div n="2"><head>Express&#245;es Regulares de Python</head>
<p>N&#243;s eliminamos as letras mai&#250;sculas. Agora s&#243; precisamos nos livrar da pontua&#231;&#227;o. A pontua&#231;&#227;o prejudicar&#225; as nossas contagens de frequ&#234;ncia se as mantivermos l&#225;. Desejamos que "evening?" seja contabilizado como "evening" e "1780." como "1780", claro.</p>
<p>&#201; poss&#237;vel utilizar o m&#233;todo de string <code type="inline">replace</code> para remover cada tipo de pontua&#231;&#227;o:</p>
<pre><code class="language-python" xml:id="code_normalizacao-dados-textuais-python_2" type="block" corresp="code_normalizacao-dados-textuais-python_2.txt"></code></pre>
<p>No entanto, isso n&#227;o &#233; muito eficiente. Em linha com o nosso objetivo de criar programas curtos e poderosos, utilizaremos um mecanismo chamado <emph>express&#245;es regulares</emph>. Express&#245;es regulares s&#227;o fornecidas por muitas linguagens de programa&#231;&#227;o de v&#225;rias maneiras distintas.</p>
<p>Express&#245;es regulares permitem que busque por padr&#245;es bem definidos e podem diminuir drasticamente o comprimento do c&#243;digo. Por exemplo, se desejasse saber se uma substring corresponde a uma letra do alfabeto, ao inv&#233;s de usar uma condi&#231;&#227;o <code type="inline">if/else</code> para verificar se ela representa a letra "a", depois "b", depois "c" e assim por diante, poderia usar uma express&#227;o regular para verificar se a substring se assemelha a uma letra entre "a" e "z". Ou poderia verificar a presen&#231;a de um d&#237;gito, uma letra mai&#250;scula, ou qualquer caractere alfanum&#233;rico, ou um <link target="https://perma.cc/T7DA-RG2L">retorno de carro</link>, ou qualquer combina&#231;&#227;o dos itens acima e muito mais.</p>
<p>Em Python, express&#245;es regulares est&#227;o dispon&#237;veis como um m&#243;dulo. Para acelerar o processamento, ele n&#227;o &#233; carregado automaticamente porque nem todos os programas o exigem. Ent&#227;o, precisar&#225; importar (<code type="inline">import</code>) o m&#243;dulo (chamado <code type="inline">re</code>, abrevia&#231;&#227;o de <emph>regular expressions</emph>) da mesma forma que importou o m&#243;dulo <code type="inline">obo.py</code>.</p>
<p>Como estamos interessados apenas em caracteres alfanum&#233;ricos, criaremos uma express&#227;o regular que ir&#225; isol&#225;-los e remover&#225; o resto. Copie a fun&#231;&#227;o a seguir e cole-a ao final do m&#243;dulo <code type="inline">obo.py</code>. Pode manter as outras fun&#231;&#245;es do m&#243;dulo, j&#225; que continuaremos a us&#225;-las.</p>
<pre><code class="language-python" xml:id="code_normalizacao-dados-textuais-python_3" type="block" corresp="code_normalizacao-dados-textuais-python_3.txt"></code></pre>
<p>A express&#227;o regular no c&#243;digo acima &#233; o material dentro da string, em outras palavras: <code type="inline">W+</code>. <code type="inline">W</code> &#233; uma abreviatura para a classe de caracteres n&#227;o-alfanum&#233;ricos. Numa express&#227;o regular de Python, o sinal de adi&#231;&#227;o (+) encontra uma ou mais c&#243;pias de um determinado caractere. <code type="inline">re.UNICODE</code> informa ao interpretador que desejamos incluir caracteres de outros idiomas do mundo em nossa defini&#231;&#227;o de alfanum&#233;rico, assim como de "A" a "Z", "a" a "z" e 0-9 do portugu&#234;s. Express&#245;es regulares devem ser <emph>compiladas</emph> antes de poderem ser utilizadas, que &#233; o que o resto do comando faz. N&#227;o se preocupe em compreender a parte da compila&#231;&#227;o agora.</p>
<p>Agora que refinamos o nosso programa <code type="inline">html-to-list1.py</code>, ele se parece com isto:</p>
<pre><code class="language-python" xml:id="code_normalizacao-dados-textuais-python_4" type="block" corresp="code_normalizacao-dados-textuais-python_4.txt"></code></pre>
<p>Ao executar o programa e verificar a sa&#237;da no painel "Sa&#237;da de Comando", ver&#225; que ele fez um bom trabalho. Esse c&#243;digo ir&#225; dividir formas hifenizadas como "coach-wheels" em duas palavras e ir&#225; transformar o possessivo "s" ou "o'clock" em palavras separadas ao perderem o ap&#243;strofo. Ainda assim, o c&#243;digo faz uma aproxima&#231;&#227;o boa o suficiente para os nossos objetivos e devemos agora passar para a contagem de frequ&#234;ncias antes de tentar melhor&#225;-lo. (Caso trabalhe com fontes em mais de um idioma, precisa aprender um pouco mais a respeito do padr&#227;o <link target="https://perma.cc/7ACH-KCDN">Unicode</link> e sobre o <link target="https://web.archive.org/web/20180502053841/http://www.diveintopython.net/xml_processing/unicode.html">suporte de Python</link> a ele.)</p>
</div>
      <div n="2"><head>Leituras Sugeridas</head>
<p>Para praticar mais as Express&#245;es Regulares, o cap&#237;tulo 7 de "<link target="https://web.archive.org/web/20180416143856/http://www.diveintopython.net/regular_expressions/index.html">Dive into Python</link>" de Mark Pilgrim pode ser um tutorial &#250;til.</p>
</div>
      <div n="2"><head>Sincroniza&#231;&#227;o de C&#243;digo</head>
<p>Para acompanhar as li&#231;&#245;es futuras, &#233; importante que tenha os ficheiros e programas corretos no seu diret&#243;rio <emph>programming historian</emph>. Ao final de cada cap&#237;tulo nesta s&#233;rie pode fazer o <emph>download</emph> do ficheiro zip do programming historian para garantir que possui o c&#243;digo correto. </p>
<ul>
<li>python-lessons4.zip (<link target="/assets/python-lessons4.zip">zip sync</link>)</li>
</ul>
</div>
    </body>
  </text>
</TEI>
