<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="visualizacion-y-animacion-de-tablas-historicas-con-R">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Visualización y animación de tablas históricas con R
</title>
                <author role="original_author">Marcelo Raimundo</author>
                <editor role="reviewers">
                    <persName>Jennifer Isasi</persName>
                    <persName>Basthian Medina</persName>
                </editor>
                <editor role="editors">Riva Quiroga</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <idno type="doi">10.46430/phes0052</idno>
                <date type="published">06/28/2021</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. This lesson is original. Available translations are the following:<ref type="translations" target="#visualizacao-animacao-tabelas-historicas-R"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>En esta lección aprenderás a visualizar y animar temporalmente datos históricos almacenados en forma de tabla.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">distant-reading</term>
                    <term xml:lang="en">r</term>
                    <term xml:lang="en">data-visualization</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="es">
        <body>
            <div type="2">
                <head>Contenidos</head>
                <p>{:.no_toc}</p>
                <list type="unordered">
                    <item>TOC
{:toc}</item>
                </list>
                <div type="1">
                    <head>Resumen</head>
                    <p>Esta lección te mostrará cómo cruzar, graficar y animar un conjunto de datos históricos. Aprenderás a importar en <emph>RStudio</emph> una tabla disponible en una hoja de cálculo y a utilizar funciones que te permitan transformar esos datos para representarlos como una tabla de contingencia. También sabrás cómo utilizar funciones de nuevas librerías que te permitirán visualizar tus datos cruzados en forma gráfica e inclusive llegar a animarlos en perspectiva temporal.  </p>
                </div>
                <div type="1">
                    <head>Objetivos</head>
                    <p>En esta lección aprenderás a:</p>
                    <list type="ordered">
                        <item>Ordenar y transformar tablas históricas para realizar análisis exploratorios</item>
                        <item>Generar gráficos estáticos y animados para visualizar datos históricos</item>
                    </list>
                </div>
                <div type="1">
                    <head>Introducción</head>
                    <p>Es indudable que en una disciplina como la historia predomina el tratamiento cualitativo de los documentos y fuentes que el pasado nos ha legado. Pero, como ha señalado Roderick Floud, “aunque estemos básicamente más interesados en las cuestiones ‘cualitativas’ que en las ‘cuantitativas’, ambas están inextricablemente unidas”<ref type="footnotemark" target="#es_note_1"/>. Es decir, no compiten, no se reemplazan, sino que se complementan. Una forma de combinar ambas metodologías, es a través de la búsqueda de regularidades o patrones ocultos o, a la inversa, de anomalías. Esto permite acercar a quienes hacen investigación histórica a un mejor conocimiento de las coordenadas en las que situar sus interpretaciones. Si esa comprensión global de los datos puede visualizarse gráficamente, posibilita “que el investigador descubra fácilmente relaciones, similitudes y diferencias entre sus casos”. Desde que escribió Floud -a mediados de los años setenta- la tecnología informática y la programación han avanzado de tal manera que hacen muy fácil el cruce entre perspectivas metodológicas. De esta manera, si un trabajo histórico cualitativo apunta a profundizar aspectos de fenómenos que sucedieron en el pasado, uno cuantitativo te permitirá saber con qué frecuencia sucedieron, observar patrones y anomalías, y a establecer relaciones temporales entre las diferentes categorías de análisis existentes.</p>
                    <p>Quien se propone hacer un análisis histórico cuantitativo debe partir de un ejercicio de codificación de las fuentes documentales que el pasado nos ha legado y plasmarlas en una matriz de datos. Es decir, esto demanda un proceso de conversión de nuestras fuentes de información, para transformar los datos textuales (palabras) en datos simbólicos operables digitalmente (números). Lo anterior consta de varios pasos: 1) <emph>clasificar</emph> los documentos a los que se ha accedido de forma que permitan su puesta en común según criterios determinados, 2) <emph>categorizar</emph> descriptiva, interpretativa o analíticamente, con ideas, categorías o conceptos el contenido de las fuentes, 3) <emph>codificar</emph>, poniendo a las distintas expresiones particulares de cada caso un símbolo (números, palabras), 4) <emph>tabular</emph>, es decir, representar los casos organizados en forma de una matriz en un soporte informático, habitualmente una hoja de cálculo.</p>
                    <p>En esta lección te mostraremos una de las tantas formas en que se pueden analizar cuantitativamente archivos que reúnen información sistemática y seriada (como son casos de productores de documentación permanente como el Estado, empresas o la prensa) utilizando el lenguaje de programación R. El objetivo es que adquieras conocimientos que te permitan efectuar un análisis exploratorio de datos, trabajando principalmente la distribución de frecuencias de distintas variables a través de tablas de contingencia, para luego visualizarlas, generar gráficos y, finalmente, crear una animación de los mismos en perspectiva temporal.</p>
                </div>
                <div type="1">
                    <head>Requisitos</head>
                    <p>Esta lección requiere que cuentes con nociones básicas de R, que tratan las lecciones <ref target="/es/lecciones/datos-tabulares-en-r">Datos tabulares en R</ref> de Trayn Dewar y <ref target="/es/lecciones/administracion-de-datos-en-r">Administración de datos en R</ref> de Nabeel Siddiqui.</p>
                    <p>Además de R, deberás tener instalado el entorno de desarrollo [RStudio]
(<ref target="https://www.rstudio.com/products/rstudio/download/#download)">https://www.rstudio.com/products/rstudio/download/#download)</ref>. Si no lo tienes aún, <ref target="https://www.youtube.com/watch?v=Nmu4WPdJBRo">en este video</ref> encontrarás una guía sobre cómo descargarlo e instalarlo.</p>
                </div>
                <head>Los datos explorados</head>
                <p>El conjunto de datos que aquí se presenta servirá para que veas cómo R te puede ayudar a analizar dinámicas de la violencia política en Argentina a finales de la década de los años cincuenta, a partir de documentos policiales de espionaje. Habitualmente estos archivos de inteligencia se han utilizado para el estudio histórico de casos particulares, pero rara vez se ha apuntado a lograr grados de agregación que permitan hacer comparaciones entre distintos casos. Contar con algunos elementos básicos de programación facilita dar pasos en esa dirección.</p>
                <p>La fuente que te proponemos codificar es un legajo muy especial del archivo de la ex Dirección de Inteligencia de la Policía de Buenos Aires (Argentina). Contiene varios informes de inteligencia que contabilizan "actos terroristas" durante los años del período de conflictividad política y social que se conoce en la historia argentina como "Resistencia peronista"<ref type="footnotemark" target="#es_note_2"/>. En la Figura 1 se presenta una imagen escaneada de uno de los legajos. Lo interesante es que la información cruda se presenta de una manera que facilita su tabulación.</p>
                <figure>
                    <desc>Figura 1. Imagen de un legajo con datos sobre atentados</desc>
                    <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R1.jpg"/>
                </figure>
                <p>Este documento fue transformado en un conjunto de datos procesables cuantitativamente. Se construyó una tabla a partir información sobre algunas localidades de la provincia de Buenos Aires en 1959, año en el que el número de "actos terroristas" o atentados fue muy alto. Los datos representan los valores de ciertas variables de análisis comunes a todos los registros, como son la <emph>ciudad</emph> (dónde) y la <emph>fecha</emph> del atentado (cuándo). Desde la información descriptiva de la policía (atributos del atentado), fue posible generar variables como: <emph>objeto</emph> utilizado en el atentado (con qué elemento se realizó), <emph>sitio</emph> (lugar/espacio) y <emph>objetivo</emph> (contra quién). Con esta categorización, buscamos ahorrar un paso, ya que la tabla sigue los preceptos de "datos ordenados" (<emph>tidy data</emph>): cada variable forma una columna, cada observación forma una fila, cada valor tiene su propia celda, cada tipo de unidad observacional forma una tabla<ref type="footnotemark" target="#es_note_3"/>.</p>
                <table>
                    <row>
                        <cell role="label">fecha</cell>
                        <cell role="label">ciudad</cell>
                        <cell role="label">objeto</cell>
                        <cell role="label">sitio</cell>
                        <cell role="label">objetivo</cell>
                    </row>
                    <row>
                        <cell>18/01/1959</cell>
                        <cell>La Plata</cell>
                        <cell>bomba</cell>
                        <cell>sede</cell>
                        <cell>institucion extranjera</cell>
                    </row>
                    <row>
                        <cell>19/01/1959</cell>
                        <cell>La Plata</cell>
                        <cell>petardo</cell>
                        <cell>vias ffcc</cell>
                        <cell>ferrocarril</cell>
                    </row>
                    <row>
                        <cell>19/01/1959</cell>
                        <cell>Matanza</cell>
                        <cell>bomba</cell>
                        <cell>vias ffcc</cell>
                        <cell>ferrocarril</cell>
                    </row>
                    <row>
                        <cell>20/01/1959</cell>
                        <cell>Avellaneda</cell>
                        <cell>molotov</cell>
                        <cell>comercio</cell>
                        <cell>comercio</cell>
                    </row>
                    <row>
                        <cell>20/01/1959</cell>
                        <cell>Avellaneda</cell>
                        <cell>bomba</cell>
                        <cell>vias ffcc</cell>
                        <cell>ferrocarril</cell>
                    </row>
                    <row>
                        <cell>20/01/1959</cell>
                        <cell>Lomas</cell>
                        <cell>bomba</cell>
                        <cell>vias ffcc</cell>
                        <cell>ferrocarril</cell>
                    </row>
                    <row>
                        <cell>20/01/1959</cell>
                        <cell>Matanza</cell>
                        <cell>bomba</cell>
                        <cell>vias ffcc</cell>
                        <cell>ferrocarril</cell>
                    </row>
                </table>
                <p>Para esta lección utilizaremos la tabla correspondiente a los atentados en cinco ciudades de Argentina durante 1959, la que se encuentra disponible en el archivo <ref target="/assets/visualizacion-y-animacion-de-tablas-historicas-con-R/atentados1959.xlsx">atentados1959.xlsx</ref>
                </p>
                <div type="1">
                    <head>Tratamiento y limpieza de los datos con R</head>
                    <p>En esta sección te mostraremos cómo cargar los datos en RStudio para comenzar a procesarlos. No esperes que esté todo listo para trabajar una vez importada la hoja de cálculo; siempre será necesaria una adecuación de tus datos para que R pueda interpretarlos. En lo que atañe a este caso, por ejemplo, luego de importarlos deberás asignarle un tipo a las variables, convertirlas, hacer algunas modificaciones en los datos y luego ordenarlos temporalmente.</p>
                    <p>El primer paso será importarlos desde su formato de hoja de cálculo al entorno de RStudio. Para poder hacerlo, primero deberás instalar el paquete que te dará los recursos necesarios: <ref target="https://readxl.tidyverse.org/">readxl</ref>
                        <ref type="footnotemark" target="#es_note_4"/>. Este paquete es parte de la colección de paquetes conocida como <ref target="https://www.tidyverse.org/">Tidyverse</ref>
                        <ref type="footnotemark" target="#es_note_5"/>, una de las más utilizados para el tipo de análisis que te proponemos, ya que permite realizar fácilmente tareas tales como leer, transformar, tratar, manipular, organizar y visualizar distinto tipo de datos. Además de <emph>readxl</emph>, contiene varios de los paquetes que necesitarás más adelante.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_0" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_0.txt" rend="block"/>
                    </ab>
                    <p>A continuación, debes cargar tanto el paquete <emph>readxl</emph> como el paquete <emph>tidyverse</emph>. Si bien el paquete <emph>readxl</emph> está contenido dentro de este último, es necesario cargarlo de forma independiente.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_1" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_1.txt" rend="block"/>
                    </ab>
                    <p>Ahora estás en condiciones de importar el dataset, usando la función <code rend="inline">read_excel()</code>. Esta función toma como argumento el nombre del archivo donde almacenaste la hoja de cálculo, suponiendo que está en tu directorio actual de trabajo. Si no estuviese en tu directorio de trabajo, deberás indicar toda la ruta del archivo.
El contenido del archivo lo asignaremos a un nuevo objeto que llamaremos <code rend="inline">at59</code>:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_2" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_2.txt" rend="block"/>
                    </ab>
                    <p>Es fundamental entender en qué forma fue almacenada la información. En R todo es un objeto y, dependiendo de las características de los datos importados, corresponderá a una determinada estructura de datos. R maneja varias estructuras que se diferencian por tener distinta cantidad de dimensiones y por si pueden guardar o no datos de diverso tipo. La más conocida es el <emph>vector</emph>, que es una colección de una dimensión de datos de igual tipo. Otra estructura es la <emph>matriz</emph>, que es similar al vector, pero permite trabajar en dos dimensiones.</p>
                    <p>Además, R cuenta con una forma particular de estructura de datos, la cual tiene dos dimensiones y nos da la posibilidad de contener datos de distinto tipo (enteros junto a fechas, caracteres, etcétera). Esta estructura es denominada <emph>data frame</emph>, y se compone por filas y columnas; cada fila corresponde a una observación o registro, mientras que cada columna es un vector que representa una variable de análisis. El <emph>data frame</emph> es una de las estructuras más utilizadas en <emph>R</emph> y los datos que importamos de hojas de cálculo se almacenarán de esta manera. Es importante tener en cuenta que muchas de las funciones del Tidyverse (como <code rend="inline">read_excel()</code>) devuelven un tipo particular de <emph>data frame</emph> llamado <emph>tibble</emph>. La principal diferencia entre ambos tipos es la forma en que los datos se muestran en la consola. Los <emph>tibble</emph>, por ejemplo, muestran debajo del nombre de cada variable a qué tipo corresponde. Esto lo podrás apreciar al usar la función <code rend="inline">head()</code>, que muestra los primeros seis registros de <code rend="inline">at59</code>. Ahí se puede observar que la fecha está en formato <emph>datetime</emph> (fecha y hora) y el resto de las columnas son de tipo <emph>character</emph> (caracter).</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_3" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_3.txt" rend="block"/>
                    </ab>
                    <p>Con la tabla ya cargada en <emph>RStudio</emph> puedes empezar el tratamimiento de los datos para poder trabajar con ellos. Así, por ejemplo, podemos partir reemplazando determinados valores de la estructura de datos para corregir o cambiar contenidos masivamente. Para tal efecto, utilizaremos la función <code rend="inline">ifelse()</code>, la que te permite seleccionar elementos de una estructura de datos según se cumpla o no alguna condición. Esta función aprovecha la vectorialización del lenguaje R y permite que, al aplicar una función a un objeto, esta lo haga sobre todos sus elementos. Así, se evita la necesidad de utilizar bucles (<code rend="inline">for</code> o <code rend="inline">while</code>, por ejemplo) para recorrer las filas. Lo recomendable es que hagas estas operaciones sobre los datos antes de realizar alguna conversión sobre su tipo.</p>
                    <p>Supón que deseas reemplazar todos los casos donde el <emph>objeto</emph> figura como ‘bomba’, por el término ‘explosivo’. Para tal efecto puedes utilizar la función <code rend="inline">ifelse()</code> pasándole solo tres argumentos. Primero se indica la condición a cumplir, en este caso, los valores ‘bomba’ de la columna <emph>objeto</emph> de <emph>at59</emph>, que es seleccionada con el símbolo <code rend="inline">$</code>. El segundo argumento corresponde a lo que la función asignará en el caso de que la condición se cumpla: lo reemplazará por ‘explosivo’. El tercer argumento es el valor asignado en el caso negativo. En este caso mantendrás el valor original:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_4" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_4.txt" rend="block"/>
                    </ab>
                    <p>Si te llegases a arrepentir de los cambios, puedes hacer la misma operación pero a la inversa:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_5" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_5.txt" rend="block"/>
                    </ab>
                    <p>A continuación, sería conveniente transformar los <emph>tipos</emph> de variables. En este caso, los cambios te permitirán aprovechar mejor las funciones de visualización. Primero, como no interesa que las fechas tengan además la hora, puedes adecuar esa variable utilizando la función <code rend="inline">as.Date()</code> sobre la columna <emph>fecha</emph>. Segundo, puedes transformar el resto de las variables de análisis a <emph>factores</emph>, que es el tipo de dato que brinda <emph>R</emph> para trabajar con <emph>variables categóricas</emph>, es decir, aquellas que representan un conjunto fijo y conocido de valores posibles. A continuación deberías hacer algo idéntico con cada una las cuatro columnas restantes (<emph>ciudad</emph>, <emph>objeto</emph>, <emph>sitio</emph> y <emph>objetivo</emph>) y aplicarles la función <code rend="inline">factor()</code>. En principio, esto implicaría escribir cinco sentencias (una por cada variable): <code rend="inline">variable &lt;- factor(variable)</code>. Si te interesa practicar escritura de código prolijo, uno de sus preceptos apunta a evitar la repetición de sentencias si no son necesarias y aprovechar el potencial que brinda el lenguaje que estemos utilizando para resolverlo. En el caso de R puedes hacerlo utilizando funciones que permiten aplicar de manera generalizada otras funciones a una estructura de datos.</p>
                    <p>Entre diversas opciones, te invitamos a usar a <code rend="inline">map_df()</code> del paquete <emph>purrr</emph>
                        <ref type="footnotemark" target="#es_note_6"/>, que es también parte del Tidyverse. <code rend="inline">map_df()</code> te permite asignar una función -que en este caso será para cambiar el tipo de datos- a diversos elementos de un <emph>data frame</emph> y almacenar el resultado en un objeto de esta misma clase. Como argumentos de la función, se indica en primer término el nombre de las columnas -en un formato vectorizado con <code rend="inline">c()</code>- y luego la función que quieres aplicar a dichas columnas.
Para unir el código de ambas transformaciones en una solo una sentencia, puedes utlizar la función <code rend="inline">tibble()</code>. Esto te dará como resultado un <emph>tibble</emph> con las columnas convertidas y organizadas tal como estaban originalmente:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_6" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_6.txt" rend="block"/>
                    </ab>
                    <p>Para finalizar esta etapa de limpieza y transformación de los datos, es necesario ordenarlos cronológicamente. Para ello dispones de la función <code rend="inline">arrange()</code>, del paquete <emph>dplyr</emph>
                        <ref type="footnotemark" target="#es_note_7"/>, tambien parte del Tidyverse, que te permitirá reordenar las filas del <emph>data frame</emph>. Por defecto lo hace de forma ascendente, aunque, al igual que la mayoría de las funciones en R, es parametrizable y nos permite variaciones. En este caso, el orden ascendente es pertinente, así que no podrás utilizar la función directamente. El primer argumento es tu objeto de datos y el segundo la variable que se utilizará como criterio ordenador. Si lo haces por fecha deberás ingresar:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_7" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_7.txt" rend="block"/>
                    </ab>
                    <p>Con <code rend="inline">head()</code> podrás apreciar cómo quedó reorganizado y listo tu conjunto de datos para que comiences, ahora, sí a analizarlo.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_8" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_8.txt" rend="block"/>
                    </ab>
                </div>
                <div type="1">
                    <head>Explorando los datos</head>
                    <p>A continuación realizaremos un análisis exploratorio básico de nuestros datos históricos, con el fin de encontrar relaciones entre los casos de atentados incluidos en el dataset. La idea de este tipo de metodología es identificar las principales características de un conjunto de datos (patrones, diferencias, tendencias, anomalías, discontinuidades y distribuciones) con el objetivo de conocer su variabilidad. Al representar dicha variabilidad de manera numérica, y sobre todo en forma de gráficos y visualizaciones, el análisis exploratorio de datos se transforma en un medio para desarrollar nuevas perspectivas analíticas, preguntas o hipótesis: con una breve mirada podemos estar al tanto de concentraciones de datos, valores atípicos, saltos, etcétera.</p>
                    <p>Con nuestra base de datos vamos a trabajar con una de las formas primarias en que se manifiesta la variabilidad en la información: la distribución de frecuencias. Lo haremos en modo bivariado, es decir, veremos cómo se pueden construir tablas de contingencia que contabilicen los casos resultantes del cruce de dos variables dentro del conjunto de los atentados efectuados durante 1959.</p>
                    <p>Para tal efecto, cuentas con una sencilla función denominada <code rend="inline">table()</code>, que toma variables tipo factor como parámetros y regresa la frecuencia de aparición de las categorías de la variable. Un aspecto interesante de esta función es que también te permite pasarle una sola columna como argumento. Por ejemplo, si quieres saber cuántos atentados hay por ciudad puedes conocer la cifra con la sentencia:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_9" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_9.txt" rend="block"/>
                    </ab>
                    <p>Si quieres empezar a probar las capacidades gráficas que te da R base, puedes transformar esa tabla de una dimensión en un gráfico de barras, con una función llamada <code rend="inline">barplot()</code>:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_10" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_10.txt" rend="block"/>
                    </ab>
                    <p>El gráfico resultante (Figura 2) aparecerá en la pestaña <emph>Plots</emph> de la ventana de utilidades.</p>
                    <figure>
                        <desc>Figura 2. Gráfico de barras que muestra la frecuencia de atentados por ciudad. En este caso, Avellaneda y La Plata concentran la mayor cantidad de atentados.</desc>
                        <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R2.png"/>
                    </figure>
                    <p>Para analizar posibles relaciones entre variables y categorías, puedes confeccionar una tabla de contingencia. Para ello, a la función <code rend="inline">table()</code> debes aplicas como argumento las dos columnas que te interesa cruzar. Por ejemplo, si quieres saber con qué tipo de elementos u objetos se efectuaron los atentados, según la ciudad de ocurrencia del hecho, deberías ingresar a la consola:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_11" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_11.txt" rend="block"/>
                    </ab>
                    <p>Obtendrás como resultado la siguiente tabla:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_12" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_12.txt" rend="block"/>
                    </ab>
                    <p>Existen muchas formas de hacer más amigable la visualización de tablas de contingencia utilizando paquetes disponibles en CRAN. Una que, sin ser complicada, te dará unos cuadros mejorados estéticamente es <ref target="https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html">kableExtra</ref>
                        <ref type="footnotemark" target="#es_note_8"/>. El procedimiento tiene dos partes. Primero, debes darle formato html a la tabla con la función <code rend="inline">kable()</code> y almacenarla en una variable (por ejemplo <code rend="inline">at59k</code>). Luego,  debes usar ese objeto como argumento de la función <code rend="inline">kable_styling()</code>, lo que te permitirá visualizar la tabla y manejar varios atributos de estilo, tales como el tamaño y color de la fuente tipográfica. Dicho esto, prueba instalar, cargar y probar ese paquete, y aprovechar de agregar un título a tu tabla con el argumento <code rend="inline">caption</code>:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_13" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_13.txt" rend="block"/>
                    </ab>
                    <p>El resultado aparecerá en <emph>Viewer</emph> y tendrás la posibilidad de guardarlo como imagen o como código html, por medio de la pestaña <emph>Export</emph>.</p>
                    <figure>
                        <desc>Figura 3. La misma tabla de contingencia creada anteriormente, pero con el formato dado por el paquete kableExtra.</desc>
                        <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R3.png"/>
                    </figure>
                </div>
                <div type="1">
                    <head>Visualizando tablas con ggplot2</head>
                    <p>Como te hemos mostrado con las tablas generadas en esta lección, R se destaca por su capacidad para ilustrar conjuntos de datos. El paquete <ref target="https://ggplot2.tidyverse.org/">ggplot2</ref>
                        <ref type="footnotemark" target="#es_note_9"/> es uno de los más usados para hacer gráficas por quienes utilizan este lenguaje de programación. Tiene una lógica inspirada en la denominada gramática de los gráficos (<emph>grammar of graphics</emph>)<ref type="footnotemark" target="#es_note_10"/>, la que consiste en el uso de capas o <emph>layers</emph>, que se ajustan según determinados parámetros. Un gráfico es la combinación de las capas, donde cada una cumple una función determinada sobre los datos, sus aspectos estéticos (tamaño, forma, color, etc.), los objetos geométricos que van a representar los datos (puntos, líneas, polígonos, áreas, etc.). Estas tres capas (datos, parámetros estéticos y representación geométrica) son esenciales, es decir, no pueden faltar. Opcionalmente, es posible modificar los valores por defecto de otras capas, que te permitirán facetar los datos en subgrupos, modificar el tipo de coordenadas, usar funciones estadísticas y modificar la apariencia general del gráfico. El paquete <emph>ggplot2</emph> está incluido en el Tidyverse y se carga cuando ejecutas <code rend="inline">library(tidyverse)</code>, por lo tanto, no necesitas realizar ninguna instalación adicional.</p>
                    <p>En términos abstractos, una sentencia básica de esta gramática de gráficos tiene la siguiente estructura: <code rend="inline">ggplot(datos, variables) + función geométrica</code>. Los datos corresponden al objeto de datos que contiene las variables que queremos visualizar y que para <emph>ggplot2</emph> debe estar en formato <emph>data frame</emph>. Las variables se interpretan aquí como los parámetros estéticos (<code rend="inline">aes</code>) en que serán representadas las columnas elegidas (por ejemplo, posición en los ejes x e y, tamaño, color). La función geométrica (<code rend="inline">geom</code>) nos permite elegir el objeto visual con el que se representarán los datos. Como es una lógica de capas, el signo <code rend="inline">+</code> permite ir agregando todas las que consideres necesarias para que tu gráfico incluya los elementos que consideres relevante.</p>
                    <p>Si deseas ver gráficamente la tabla de contingencia que construiste anteriormente, puedes empezar haciendo la equivalencia de un atentado = un punto en el plano, a lo que correspondería la sentencia mínima:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_14" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_14.txt" rend="block"/>
                    </ab>
                    <p>Con el código anterior obtendrás un resultado similar al de la Figura 4.</p>
                    <figure>
                        <desc>Figura 4. Gráfico de puntos que muestra el cruce de las variables objeto y ciudad.</desc>
                        <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R4.png"/>
                    </figure>
                    <p>Sin embargo, debe reconocerse que la acumulación de puntos, uno sobre otro, en una misma coordenada (fenómeno conocido como <emph>overplotting</emph>), da como resultado una visualización muy poco aprovechable, ya que, a diferencia de la tabla, no logra representar las frecuencias. Solo muestra la existencia de cruces de variables, no cuántas veces ocurren. En casos como este, es recomendable reemplazar la función <code rend="inline">geom_point()</code> por otra que contabilice el número de ocurrencias de cada combinación, para obtener una imagen que te dé una pista rápida sobre las variaciones en la frecuencia de los atentados. Para ello está disponible <code rend="inline">geom_count()</code>, que además del efecto visual, añade al gráfico una escala de frecuencias.</p>
                    <p>Si te interesa, además, enriquecer la visualización mediante la adición de etiquetas al gráfico (ponerle un título, cambiar los nombres de las variables en los ejes, etcétera), puedes agregar una capa adicional con la función <code rend="inline">labs()</code>. Incluso, puedes cambiar la apariencia general si agregas una capa con alguna de las variantes que te proveen las funciones <code rend="inline">theme_()</code>, que permiten controlar los elementos del gráfico que no son datos. Obtendrás un resultado similar al de la Figura 5.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_15" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_15.txt" rend="block"/>
                    </ab>
                    <figure>
                        <desc>Figura 5. Gráfico de puntos que representa la frecuencia de atentados, según objeto y ciudad. El tamaño de los puntos depende del recuento de combinaciones entre objeto del atentado y ciudad. Se advierte que las ciudades de Avellaneda y La Plata concentran la mayor cantidad de atentados, y que en la mayoría de estos se utilizaron explosivos.</desc>
                        <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R5.png"/>
                    </figure>
                    <p>Para almacenar el gráfico en un archivo, cuentas con la función <code rend="inline">ggsave()</code>, que guardará tu imagen en tu directorio de trabajo:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_16" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_16.txt" rend="block"/>
                    </ab>
                    <p>Otra forma de aprovechar las ventajas de visualización que te da R y evitar la superposición de puntos, es utilizando la propiedad <emph>jitter</emph>, que afecta la posición de los mismos. La función gráfica <code rend="inline">geom_jitter()</code> te permite agregar una pequeña variación aleatoria a la ubicación de cada punto; esto es muy útil si trabajas posiciones discretas y conjuntos de datos pequeños. Para explorar otras capacidades estéticas, prueba, por ejemplo, aplicar como parámetro que el color de los puntos sea diferente según la ciudad, mediante el argumento <code rend="inline">colour</code>. Como el argumento debe estar en formato numérico, debes convertirlo con <code rend="inline">as.numeric()</code>. Además de establecer la coloración, tienes la posibilidad de manipular el tamaño de los puntos mediante el argumento <code rend="inline">size</code>, su transparencia con <code rend="inline">alpha</code> y la distancia interpuntos vertical u horizontal con <code rend="inline">width</code> o <code rend="inline">height</code>. Obtendrás un gráfico similar al de la Figura 6.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_17" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_17.txt" rend="block"/>
                    </ab>
                    <figure>
                        <desc>Figura 6. Gráfico que resulta de aplicar la función geom_jitter(). Permite visualizar la misma tendencia que el gráfico anterior (mayor cantidad de explosivos en Avellaneda y La Plata), pero asignando un punto por cada combinación objeto/ciudad evitando su superposición.</desc>
                        <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R6.png"/>
                    </figure>
                </div>
                <div type="1">
                    <head>Animando la visualización de los datos con gganimate</head>
                    <p>Si bien existen distintos paquetes para animar visualizaciones en R, te invitamos a hacerlo con <ref target="https://gganimate.com/">gganimate</ref>
                        <ref type="footnotemark" target="#es_note_11"/>, que es una extensión del paquete <emph>ggplot2</emph> que te permitirá crear una animación a partir de un gráfico <emph>ggplot</emph> y ver de forma dinámica cómo tus datos evolucionan según estados o en el tiempo. Las funciones centrales de <emph>gganimate</emph> son las para transiciones (<code rend="inline">transition_*()</code>), que permiten especificar cómo los datos deben interpretarse en términos de la su animación, es decir, según qué criterio se crearán los cuadros (<emph>frames</emph>) que se animarán.</p>
                    <p>Para instalar y activar el paquete puedes utilizar el código que se presenta a continuación. Si estás trabajando en Mac, te sugerimos instalar también la última versión del paquete <emph>gifski</emph>. Algunas personas han reportado problemas al generar las animaciones cuando utilizan una versión anterior a la 0.8.6.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_18" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_18.txt" rend="block"/>
                    </ab>
                    <p>Si deseas generar una animación que represente la ocurrencia de atentados según una progresión temporal, la función indicada es <code rend="inline">transiton_time()</code>. El procedimiento es muy sencillo; al código que escribiste para hacer el gráfico le sumas esta función, poniendo como argumento la variable temporal, en este caso, <emph>fecha</emph>. Sin embargo, con el fin de realizar una visualización más clara de tus datos, es conveniente que al código le agregues un par de elementos.</p>
                    <p>Por un lado, como en <emph>gganimate</emph> la animación resultante es un conjunto de imágenes (instantáneas) desplegadas en serie consecutiva, cada nuevo <emph>frame</emph> -si no le indicas lo contrario- al mostrarse oculta el anterior y sólo lograrás ver puntos parpadeando. Para manejar esto, cuentas con el grupo de funciones <emph>shadow</emph>, que te deja elegir cómo se muestran los datos que ya no se corresponden con los del <emph>frame</emph> actual. En el caso de este gráfico, para que permanezcan todos los datos anteriores de fondo, es necesario utilizar <code rend="inline">shadow_mark(past = TRUE)</code>, que te permite dejar visibles los cuadros ya mostrados.
Por otra parte, como puede ser bastante difícil entender una animación sin ninguna indicación sobre el significado de cada punto temporal, <emph>gganimate</emph> te proporciona un conjunto de variables para cada fotograma (<emph>frame variables</emph>), los cuales puedes insertar en las etiquetas de los gráficos utilizando la sintaxis propia del paquete <emph>glue</emph>, que utiliza los símbolos <code rend="inline">{}</code>. Con ello dispondrás de una serie de metadatos, según la variante de transición que ensayes. Para <code rend="inline">transition_time()</code> cuentas con <code rend="inline">{frame_time}</code>, que te retornará el valor del argumento que procesa la función durante el fotograma en curso, es decir, te permitirá ir viendo la fecha correspondiente. El código quedaría de esta manera:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_19" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_19.txt" rend="block"/>
                    </ab>
                    <p>Al ingresar el código directamente en la consola, comienza el proceso de generación de la animación, denominado <emph>rendering</emph>. Este proceso tiene una duración relativa, dependiendo del volumen de los datos y de tu procesado. En este caso sólo debería tomar unos segundos, durante los cuales podrás ver una barra de progreso que te indicará cuánto falta. Cuando concluya, en la pestaña <emph>Viewer</emph> de la ventana de utilidades podrás observar la animación. Si presionas el ícono <emph>Show in new window</emph>, se abrirá un <emph>gif</emph> en tu navegador asociado por defecto, desde donde podrás almacenarlo. En caso de que te interese continuar practicando con la consola, también puedes almacenarlo con la función <code rend="inline">anim_save()</code>, que guarda la última animación realizada en tu directorio de trabajo:</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_20" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_20.txt" rend="block"/>
                    </ab>
                    <p>Para poder explorar más posibilidades del paquete <emph>gganimate</emph>, la sugerencia es que asignes el bloque de código para generar el gráfico a un objeto. Esto te dará la posibilidad de manejar parámetros como la velocidad y las pausas en la animación por medio de la función <code rend="inline">animate()</code>. Con ella podrás ajustar también la cantidad total de <emph>frames</emph>, la duración total y los <emph>frames</emph> por segundo. Para ensayarlo, dale a <code rend="inline">fps</code> un parámetro de 5 cuadros por segundo y añade una pausa final de 15 segundos con <code rend="inline">end_pause</code>. Con ello obtendrás una animación similar a la Figura 7.</p>
                    <ab>
                        <code lang="language-R" xml:id="code_visualizacion-y-animacion-de-tablas-historicas-con-R_21" corresp="code_visualizacion-y-animacion-de-tablas-historicas-con-R_21.txt" rend="block"/>
                    </ab>
                    <figure>
                        <desc>Figura 7. Versión animada del gráfico creado con la función geom_jitter.</desc>
                        <graphic url="visualizacion-y-animacion-de-tablas-historicas-con-R7.gif"/>
                    </figure>
                    <p>A esta altura y con estos resultados, puedes considerar que has realizado un análisis exploratorio de tus datos y estás en condiciones de plantear hipótesis al respecto. En el caso trabajado, y si te dedicas a la historia de las luchas sociales y políticas en Argentina contemporánea, las tablas de contingencia y los gráficos estáticos trabajadas en esta lección, por ejemplo, te permiten encontrar similitudes entre Avellaneda y La Plata, tanto entre las frecuencias de los atentados, como en su tipo (en términos del objeto utilizado). Además, disponemos del ritmo temporal (intensidad) de los mismos, lo que te invita a enfocar sobre posibles patrones o relaciones de corte más histórico, entre casos que no suelen estar conectados en las investigaciones, por su diferente estructura socio-económica para la época.</p>
                </div>
                <div type="1">
                    <head>Conclusión</head>
                    <p>Esta lección buscó darte una idea general de las diversas tareas que deberías seguir para preparar y llevar adelante un primer análisis exploratorio de datos sobre alguna serie de documentos históricos. Este procedimiento te permite realizar cálculos básicos con esos datos y analizarlos visualmente para pensar, generar preguntas e hipotetizar a partir de ellos.</p>
                    <p>En esta lección te hemos ofrecido solo un punto de partida para el análisis de tus tablas históricas. Como desafío, y a partir de lo que aprendiste en este tutorial, te proponemos que continúes probando otros cruces de variables. Finalmente, te invitamos a que te animes a descubrir por ti mismo la potencia de <emph>ggplot</emph> y <emph>gganimate</emph>, explorando <ref target="https://gganimate.com/index.html">la documentación</ref> de este último paquete para conocer otras opciones disponibles.</p>
                </div>
                <div type="1">
                    <head>Notas</head>
                    <p>
                        <ref type="footnotemark" target="#es_note_1"/> : Roderick Floud, <emph>Métodos cuantitativos para historiadores</emph> (Madrid: Alianza, 1983).</p>
                    <p>
                        <ref type="footnotemark" target="#es_note_2"/> : Puedes encontrar una detallada referencia del archivo en el sitio de la Comisión Provincial por la Memoria de la provincia de Buenos Aires: <ref target="https://www.comisionporlamemoria.org/extra/archivo/cuadroclasificacion/">https://www.comisionporlamemoria.org/extra/archivo/cuadroclasificacion/</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_3"/> :Los fundamentos y significado de la noción de "datos ordenados" puedes encontrarlos en: Hadley Wickham, "Tidy Data", <emph>Journal of Statistical Software</emph>, Volume 59, Issue 10, 2019,https://www.jstatsoft.org/index.php/jss/article/view/v059i10/v59i10.pdf)</p>
                    <p>
                        <ref type="footnotemark" target="#es_note_4"/> : Hadley Wickham and Jennifer Bryan, "readxl: Read Excel Files. R package version 1.3.1", 2019, <ref target="https://CRAN.R-project.org/package=readxl">https://CRAN.R-project.org/package=readxl</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_5"/> : Hadley Wickham et al.,"Welcome to the tidyverse", <emph>Journal of Open Source Software</emph>, 4(43), 1686 (2019): 1-5, <ref target="https://doi.org/10.21105/joss.01686">https://doi.org/10.21105/joss.01686</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_6"/> : Lionel Henry and Hadley Wickham, "purrr: Functional Programming Tools. R package version 0.3.4", 2020, <ref target="https://CRAN.R-project.org/package=purrr">https://CRAN.R-project.org/package=purrr</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_7"/> : Hadley Wickham, Romain François, Lionel Henry and Kirill Müller, "dplyr: A Grammar of Data Manipulation. R package version 1.0.6", CRAN R Project, 2021, <ref target="https://CRAN.R-project.org/package=dplyr">https://CRAN.R-project.org/package=dplyr</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_8"/> : Hao Zhu, "kableExtra: Construct Complex Table with 'kable' and Pipe Syntax. R package version 1.3.2", 2021, <ref target="https://CRAN.R-project.org/package=kableExtra">https://CRAN.R-project.org/package=kableExtra</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_9"/> : Hadley Wickham, "ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics", Springer-Verlag New York, 2016, <ref target="https://ggplot2.tidyverse.org">https://ggplot2.tidyverse.org</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_10"/> : El referente del concepto es Leland Wilkinson, con su obra <emph>The Grammar of Graphics</emph>, de la que puedes consultar algunas páginas en: <ref target="https://www.springer.com/gp/book/9780387245447">https://www.springer.com/gp/book/9780387245447</ref>
                    </p>
                    <p>
                        <ref type="footnotemark" target="#es_note_11"/> : Thomas Lin Pedersen and David Robinson, "gganimate: A Grammar of Animated Graphics. R package version 1.0.7", 2020, <ref target="https://CRAN.R-project.org/package=gganimate">https://CRAN.R-project.org/package=gganimate</ref>
                    </p>
                </div>
            </div>
        </body>
    </text>
</TEI>
