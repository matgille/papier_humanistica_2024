<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="contar-frequencias-palavras-python">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Contagem de Frequ&#234;ncias de Palavras com Python</title>
  <author role="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor role="reviewers"><persName>Jim Clifford</persName><persName>Frederik Elwert</persName></editor><author role="translators">Felipe Lamarca</author><editor role="translation-reviewers"><persName>Ana Carolina Erthal</persName><persName>Joana Vieira Paulino</persName></editor><editor role="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phpt0023</idno><date type="published">07/17/2012</date><date type="translated">01/13/2022</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#counting-frequencies"/>.</p><p>There are other translations: <ref target="#decomptes-de-frequences-de-mots-en-python #contar-frecuencias"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Contar a frequ&#234;ncia de palavras espec&#237;ficas de uma lista pode fornecer dados esclarecedores. Esta li&#231;&#227;o ensinar&#225; uma maneira f&#225;cil de contar essas frequ&#234;ncias com Python.</p></abstract><textClass><keywords><term xml:lang="en">python</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="pt">
    <body>
      <div type="2"><head>Objetivos da Li&#231;&#227;o</head>
<p>Sua lista agora est&#225; limpa o suficiente para que possa come&#231;ar a analisar seu conte&#250;do de maneiras significativas. Contar a frequ&#234;ncia de palavras espec&#237;ficas de uma lista pode fornecer dados esclarecedores. Python possui uma maneira f&#225;cil de contar frequ&#234;ncias, mas requer o uso de um novo tipo de vari&#225;vel: o <emph>dicion&#225;rio</emph>. Antes de come&#231;ar a trabalhar com um dicion&#225;rio, considere os processos utilizados para calcular frequ&#234;ncias em uma lista.</p>
<div type="3"><head>Ficheiros Necess&#225;rios para esta Li&#231;&#227;o</head>
<list type="unordered">
<item><code rend="inline">obo.py</code></item>
</list>
<p>Caso n&#227;o possua esse ficheiro, pode fazer o <emph>download</emph> do ficheiro (<ref target="https://programminghistorian.org/assets/python-lessons4.zip">zip</ref>) que cont&#233;m todo o c&#243;digo das li&#231;&#245;es anteriores desta s&#233;rie.</p>
</div></div>
      <div type="2"><head>Frequ&#234;ncias</head>
<p>Agora desejamos contar a frequ&#234;ncia de cada palavra em nossa lista. J&#225; viu que &#233; f&#225;cil de processar uma lista utilizando um <code rend="inline">for</code> <emph>loop</emph>. Tente salvar e executar o exemplo a seguir. Lembre-se de que <code rend="inline">+=</code> informa ao programa para acrescentar algo ao final de uma vari&#225;vel existente.</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_0" corresp="code_contar-frequencias-palavras-python_0.txt" lang="language-python" rend="block"/></ab>
<p>Aqui, come&#231;amos com uma string e separamo-la em uma lista, como fizemos anteriormente. Depois disso criamos uma lista (inicialmente vazia) chamada <code rend="inline">wordfreq</code>, percorremos cada palavra na <code rend="inline">wordlist</code> e contamos o n&#250;mero de vezes que aquela palavra aparece em toda a lista. Ent&#227;o, adicionamos a contagem de cada palavra &#224; nossa lista <code rend="inline">wordfreq</code>. Utilizando a opera&#231;&#227;o <code rend="inline">zip</code>, somos capazes de combinar a primeira palavra da lista de palavras com o primeiro n&#250;mero na lista de frequ&#234;ncias, a segunda palavra e a segunda frequ&#234;ncia e assim por diante. Terminamos com uma lista de pares de palavras e frequ&#234;ncias. A fun&#231;&#227;o <code rend="inline">str</code> converte qualquer objeto numa string para que ele possa ser exibido.</p>
<p>Deve obter algo assim:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_1" corresp="code_contar-frequencias-palavras-python_1.txt" lang="language-python" rend="block"/></ab>
<p>Valer&#225; a pena estudar o c&#243;digo acima at&#233; entend&#234;-lo antes de continuar.</p>
<p>O Python tamb&#233;m inclui uma ferramenta muito conveniente chamada <emph><ref target="http://docs.python.org/tutorial/datastructures.html#list-comprehensions">list comprehension</ref></emph> (ver uma explica&#231;&#227;o do m&#233;todo de <ref target="https://pt.wikipedia.org/wiki/Compreens%C3%A3o_de_lista">compreens&#227;o de lista</ref> em portugu&#234;s), que pode ser utilizada para fazer o mesmo que um <code rend="inline">for</code> <emph>loop</emph> de maneira mais econ&#243;mica.</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_2" corresp="code_contar-frequencias-palavras-python_2.txt" lang="language-python" rend="block"/></ab>
<p>Se estudar esse m&#233;todo de compreens&#227;o de lista cuidadosamente, descobrir&#225; que ele faz exatamente o mesmo que o <code rend="inline">for</code> <emph>loop</emph> no exemplo anterior, mas de maneira condensada. Qualquer um dos m&#233;todos funcionar&#225; bem, ent&#227;o use a vers&#227;o com a qual se sente mais confort&#225;vel.</p>
<p>Em geral &#233; prudente utilizar um c&#243;digo que entenda ao inv&#233;s de um c&#243;digo que seja executado mais rapidamente.</p>
<p>Neste ponto, temos uma lista de pares, onde cada par cont&#233;m uma palavra e sua frequ&#234;ncia. Essa lista &#233; um pouco redundante. Se 'the' ocorre 500 vezes, ent&#227;o essa lista cont&#233;m quinhentas c&#243;pias do par ('the', 500). Essa lista tamb&#233;m est&#225; ordenada pelas palavras no texto original, ao inv&#233;s de listar as palavras na ordem da mais frequente para a menos frequente. Podemos resolver esses problemas convertendo-a em um dicion&#225;rio, e depois exibindo o dicion&#225;rio na ordem do item mais comum para o menos comum.</p>
</div>
      <div type="2"><head>Dicion&#225;rios de Python</head>
<p>Tanto strings quanto listas s&#227;o ordenadas sequencialmente, o que significa que pode acessar seus conte&#250;dos utilizando um &#237;ndice (<emph>index</emph>), um n&#250;mero que come&#231;a no 0. Caso tenha uma lista contendo strings, pode utilizar um par de &#237;ndices para acessar uma string particular na lista, e depois um caractere particular naquela string. Estude os exemplos abaixo:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_3" corresp="code_contar-frequencias-palavras-python_3.txt" lang="language-python" rend="block"/></ab>
<p>Para manter controle sobre as frequ&#234;ncias, utilizaremos outro tipo de objeto Python: um dicion&#225;rio. O dicion&#225;rio &#233; uma cole&#231;&#227;o n&#227;o ordenada de objetos. Isso significa que n&#227;o pode utilizar &#237;ndices para recuperar seus elementos. Pode, por outro lado, busc&#225;-los utilizando uma chave, ou <emph>key</emph> no ingl&#234;s (da&#237; o nome "dicion&#225;rio"). Estude o exemplo a seguir:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_4" corresp="code_contar-frequencias-palavras-python_4.txt" lang="language-python" rend="block"/></ab>
<p>Dicion&#225;rios podem ser um pouco confusos para um novo programador. Tente pensar neles como um dicion&#225;rio de idiomas. Caso n&#227;o saiba (ou n&#227;o se lembre) como exatamente "<emph>bijection</emph>" difere de "<emph>surjection</emph>", pode buscar pelos dois termos no <emph>Oxford English Dictionary</emph>. O mesmo princ&#237;pio se aplica quando realiza um <code rend="inline">print(d['ol&#225;'])</code> exceto pelo fato de que, ao inv&#233;s de exibir uma defini&#231;&#227;o liter&#225;ria, ele exibe o valor associado &#224; palavra-chave 'ol&#225;', conforme definido por voc&#234; quando criou o dicion&#225;rio chamado <code rend="inline">d</code>. Nesse caso, esse valor &#233; "0".</p>
<p>Observe que usa chaves para definir um dicion&#225;rio, mas colchetes para acessar coisas dentro dele. A opera&#231;&#227;o <code rend="inline">keys</code> retorna uma lista de chaves que est&#227;o definidas no dicion&#225;rio.</p>
</div>
      <div type="2"><head>Pares Palavra-Frequ&#234;ncia</head>
<p>Com base no que temos at&#233; agora, queremos uma fun&#231;&#227;o que seja capaz de converter uma lista de palavras em um dicion&#225;rio de pares palavra-frequ&#234;ncia. O &#250;nico comando novo que vamos precisar &#233; <code rend="inline">dict</code>, que faz um dicion&#225;rio a partir de uma lista de pares. Copie o c&#243;digo a seguir e adicione-o ao m&#243;dulo <code rend="inline">obo.py</code>:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_5" corresp="code_contar-frequencias-palavras-python_5.txt" lang="language-python" rend="block"/></ab>
<p>Tamb&#233;m vamos querer uma fun&#231;&#227;o que seja capaz de ordenar o dicion&#225;rio de pares palavra-frequ&#234;ncia por frequ&#234;ncia decrescente. Copie o c&#243;digo a seguir e adicione-o tamb&#233;m ao m&#243;dulo <code rend="inline">obo.py</code>:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_6" corresp="code_contar-frequencias-palavras-python_6.txt" lang="language-python" rend="block"/></ab>
<p>Agora podemos escrever um programa que recebe uma URL e retorna pares palavra-frequ&#234;ncia para a p&#225;gina web, de acordo com a ordem decrescente de frequ&#234;ncia. Copie o programa a seguir no Komodo Edit, armazene-o como <code rend="inline">html-to-freq.py</code> e execute-o. Estude o programa e seu resultado cuidadosamente antes de continuar.</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_7" corresp="code_contar-frequencias-palavras-python_7.txt" lang="language-python" rend="block"/></ab>
</div>
      <div type="2"><head>Removendo <emph>Stop Words</emph></head>
<p>Quando vemos o resultado do nosso programa <code rend="inline">html-to-freq.py</code>, verificamos que muitas das palavras mais frequentes no texto s&#227;o palavras funcionais como <emph>the</emph>, <emph>of</emph>, <emph>to</emph> e <emph>and</emph>.</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_8" corresp="code_contar-frequencias-palavras-python_8.txt" lang="language-python" rend="block"/></ab>
<p>Essas palavras s&#227;o geralmente as mais comuns em qualquer texto de l&#237;ngua inglesa, ent&#227;o elas n&#227;o nos dizem muito a respeito do julgamento de Bowsey. Em geral, estamos mais interessados em encontrar as palavras que nos auxiliar&#227;o a diferenciar esse texto de outros textos sobre assuntos distintos. Desse modo, vamos remover as palavras funcionais comuns. Palavras que s&#227;o ignoradas dessa forma s&#227;o conhecidas como <emph>stopwords</emph><ref type="footnotemark" target="#note_1"/>. Utilizaremos a lista a seguir, adaptada de uma publica&#231;&#227;o <emph>online</emph> por <ref target="http://ir.dcs.gla.ac.uk/resources/linguistic_utils/stop_words">cientistas da computa&#231;&#227;o em Glasgow</ref>. Copie-a e adicione-a no in&#237;cio da biblioteca <code rend="inline">obo.py</code> que est&#225; construindo.</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_9" corresp="code_contar-frequencias-palavras-python_9.txt" lang="language-python" rend="block"/></ab>
<p>Agora, livrar-se das <emph>stop words</emph> em uma lista &#233; f&#225;cil: basta usar outra <emph>list comprehension</emph>. Adicione tamb&#233;m essa fun&#231;&#227;o ao m&#243;dulo <code rend="inline">obo.py</code>:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_10" corresp="code_contar-frequencias-palavras-python_10.txt" lang="language-python" rend="block"/></ab>
</div>
      <div type="2"><head>Juntando Tudo</head>
<p>Agora temos tudo o que precisamos para determinar frequ&#234;ncias de palavras para p&#225;ginas web. Copie o c&#243;digo a seguir no Komodo Edit, armazene-o como <code rend="inline">html-to-freq-2.py</code> e execute-o:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_11" corresp="code_contar-frequencias-palavras-python_11.txt" lang="language-python" rend="block"/></ab>
<p>Se tudo correu bem, sua sa&#237;da deve-se parecer com isto:</p>
<ab><code xml:id="code_contar-frequencias-palavras-python_12" corresp="code_contar-frequencias-palavras-python_12.txt" lang="language-python" rend="block"/></ab>
</div>
      <div type="2"><head>Leituras Sugeridas</head>
<p>Lutz, Learning Python</p>
<list type="unordered">
<item>Ch. 9: Tuples, Files, and Everything Else</item>
<item>Ch. 11: Assignment, Expressions, and print</item>
<item>Ch. 12: if Tests</item>
<item>Ch. 13: while and for Loops</item>
</list>
<p>Pilgrim, Diving into Python</p>
<list type="unordered">
<item>Ch. 7: <ref target="https://web.archive.org/web/20180416143856/http://www.diveintopython.net/regular_expressions/index.html">Regular Expressions</ref></item>
</list>
</div>
      <div type="2"><head>Sincroniza&#231;&#227;o de C&#243;digo</head>
<p>Para acompanhar li&#231;&#245;es futuras, &#233; importante ter os ficheiros e programas corretos no seu diret&#243;rio &#8220;programming-historian&#8221;. No final de cada li&#231;&#227;o, &#233; poss&#237;vel fazer o <emph>download</emph> do ficheiro zip &#8220;programming-historian&#8221; para garantir que possui o c&#243;digo correto.</p>
<list type="unordered">
<item>programming-historian-5 (<ref target="https://programminghistorian.org/assets/python-lessons5.zip">zip sync</ref>)</item>
</list>
<p><ref type="footnotemark" target="#note_1"/> : Na l&#237;ngua portuguesa, palavras similares seriam "e", "de", "da", "do", "um", "uma", dentre outras, a depender de cada caso.</p>
</div>
    </body>
  </text>
</TEI>
