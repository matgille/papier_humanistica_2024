<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Trabalhando com ficheiros de texto em Python</title>
  <slug>trabalhando-ficheiros-texto-python</slug>
  <layout>lesson</layout>
  <date>2012-07-17</date>
  <translation_date>2021-05-13</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Aracele Torres</translator>
  <translation-editor>Danielle Sanches</translation-editor>
  <translation-reviewer>Bruno Martins,Renato Rocha Souza</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/317</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Nesta li&#231;&#227;o, voc&#234; aprender&#225; a manipular ficheiros de texto usando Python.</abstract>
  <next>code-reuse-and-modularity</next>
  <previous>nocoes-basicas-paginas-web-html</previous>
  <python_warning>False</python_warning>
  <original>working-with-text-files</original>
  <avatar_alt>Homem de &#243;culos lendo um livro de alfabeto</avatar_alt>
  <doi>10.46430/phpt0003</doi>
</metadata>
  <text>
    <body>
      <div n="1"><head>Objetivos da li&#231;&#227;o</head>
<p>Nesta li&#231;&#227;o, voc&#234; aprender&#225; a manipular ficheiros de texto usando Python.
Isto inclui abrir, fechar, ler e gravar ficheiros no formato <code type="inline">.txt</code> usando instru&#231;&#245;es nesta linguagem de programa&#231;&#227;o.</p>
<p>As pr&#243;ximas li&#231;&#245;es desta s&#233;rie envolver&#227;o o download de uma p&#225;gina da web e a reorganiza&#231;&#227;o do seu conte&#250;do em blocos de informa&#231;&#227;o &#250;teis. Voc&#234; far&#225; a maior parte do trabalho usando c&#243;digo Python escrito e executado no ambiente Komodo Edit.</p>
</div>
      <div n="1"><head>Trabalhando com ficheiros de texto</head>
<p>A linguagem Python facilita o trabalho com ficheiros e texto. Vamos come&#231;ar com ficheiros.</p>
</div>
      <div n="1"><head>Criando e gravando um ficheiro de texto</head>
<p>Vamos come&#231;ar com uma breve discuss&#227;o da terminologia. Numa li&#231;&#227;o anterior (dependendo do seu sistema operativo: <link target="https://programminghistorian.org/lessons/mac-installation">Instala&#231;&#227;o em Mac</link>, <link target="https://programminghistorian.org/lessons/windows-installation">Instala&#231;&#227;o em Windows</link>, ou <link target="https://programminghistorian.org/lessons/linux-installation">Instala&#231;&#227;o em Linux</link>), voc&#234; viu como enviar informa&#231;&#227;o para a janela de "Sa&#237;da de Comando" do seu editor de texto, usando o comando <link target="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement">print</link> do Python.</p>
<pre><code class="language-python[&#180;p" xml:id="code_trabalhando-ficheiros-texto-python_0" type="block" corresp="code_trabalhando-ficheiros-texto-python_0.txt"></code></pre>
<p>A linguagem de programa&#231;&#227;o Python &#233; <emph>orientada a objetos</emph>. Isso quer dizer que a mesma &#233; constru&#237;da em torno de um tipo especial de entidade, um <emph>objeto</emph>, que
cont&#233;m <emph>dados</emph> e v&#225;rios <emph>m&#233;todos</emph> para aceder e alterar esses dados. Depois de um objeto ser criado, ele pode interagir com outros objetos.</p>
<p>No exemplo acima, vemos um tipo de objeto, a <emph>string</emph> "ol&#225; mundo". A <emph>string</emph> &#233; a sequ&#234;ncia de caracteres entre aspas. Voc&#234; pode escrever uma <emph>string</emph> de tr&#234;s maneiras:</p>
<pre><code xml:id="code_trabalhando-ficheiros-texto-python_1" type="block" corresp="code_trabalhando-ficheiros-texto-python_1.txt"></code></pre>
<p>O importante a notar &#233; que nos primeiros dois exemplos voc&#234; pode usar aspas simples ou duplas / v&#237;rgulas invertidas, mas n&#227;o pode misturar as duas dentro de uma <emph>string</emph>.
No terceiro exemplo, as aspas triplas significam uma <emph>string</emph> que abrange mais de uma linha.</p>
<p>Por exemplo, as seguintes declara&#231;&#245;es est&#227;o todas erradas:</p>
<pre><code xml:id="code_trabalhando-ficheiros-texto-python_2" type="block" corresp="code_trabalhando-ficheiros-texto-python_2.txt"></code></pre>
<p>Conte o n&#250;mero de aspas simples na <emph>message3</emph>. Para funcionar voc&#234;
teria que <emph>libertar</emph> o ap&#243;strofo:</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_3" type="block" corresp="code_trabalhando-ficheiros-texto-python_3.txt"></code></pre>
<p>Alternativamente, poderia reescrever a declara&#231;&#227;o como:</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_4" type="block" corresp="code_trabalhando-ficheiros-texto-python_4.txt"></code></pre>
<p><code type="inline">Print</code> &#233; um comando que imprime objetos na forma textual. O comando <emph>print</emph>, quando combinado com a <emph>string</emph>, produz uma <emph>instru&#231;&#227;o</emph>.</p>
<p>Voc&#234; usar&#225; <code type="inline">print</code> como indicado anteriormente nos casos em que deseja apresentar a informa&#231;&#227;o imediatamente. &#192;s vezes, no entanto, voc&#234; criar&#225; informa&#231;&#227;o que deseja guardar, enviar a outra pessoa, ou usar como entrada para processamento posterior por um outro programa ou conjunto de programas. Nestes casos, voc&#234; desejar&#225; enviar a informa&#231;&#227;o para ficheiros no seu disco r&#237;gido, em vez de para a janela de "sa&#237;da de comando". Insira o seguinte programa no seu editor de texto e salve-o como <code type="inline">ficheiro-saida.py</code>.</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_5" type="block" corresp="code_trabalhando-ficheiros-texto-python_5.txt"></code></pre>
<p>Em Python, qualquer linha que comece com uma marca de hash (#) &#233; conhecida como um <emph>coment&#225;rio</emph> e &#233; ignorada pelo interpretador Python. Os coment&#225;rios t&#234;m como objetivo permitir que os programadores comuniquem uns com os outros (ou para se lembrarem do que seu c&#243;digo faz quando o voltam a analisar alguns meses depois). Num sentido mais amplo, os pr&#243;prios programas s&#227;o tipicamente escritos e formatados de modo que seja mais f&#225;cil para os programadores comunicarem uns com os outros. Quando o c&#243;digo &#233; mais pr&#243;ximo dos requisitos da m&#225;quina &#233; conhecido como <emph>baixo n&#237;vel</emph>, enquanto o que est&#225; mais pr&#243;ximo da linguagem natural &#233; de <emph>alto n&#237;vel</emph>. Um dos benef&#237;cios de usar uma linguagem como Python &#233; que ela &#233; de n&#237;vel muito alto, tornando mais f&#225;cil a comunica&#231;&#227;o (com algum custo em termos de efici&#234;ncia computacional).</p>
<p>No programa anterior, <emph>f</emph> &#233; um <emph>objeto ficheiro</emph> (<emph>file object</emph>), e <code type="inline">open</code> (abrir), <code type="inline">write</code> (gravar) e <code type="inline">close</code> (fechar) s&#227;o <emph>m&#233;todos de ficheiro</emph> (<emph>file
methods</emph>). Em outras palavras, abrir, gravar, e fechar fazem algo com o objeto <emph>f</emph> que, neste caso, &#233; definido como um ficheiro <code type="inline">.txt</code>. Este &#233; provavelmente um uso diferente do termo "m&#233;todo" do que aquele que voc&#234; poderia esperar e, de vez em quando, voc&#234; descobrir&#225; que as palavras usadas no contexto de programa&#231;&#227;o t&#234;m significados ligeiramente (ou completamente) diferentes do que na fala do dia a dia. Neste caso, lembre-se de que os m&#233;todos s&#227;o c&#243;digo que executa a&#231;&#245;es. Eles fazem algo a outra coisa e retornam um resultado. Voc&#234; pode tentar pensar nisto usando um exemplo do mundo real, como dar comandos ao c&#227;o da fam&#237;lia. O c&#227;o (o objeto) entende comandos (ou seja, tem "m&#233;todos") como "latir", "sentar", "fingir de morto" e assim por diante. Discutiremos e aprenderemos como usar muitos outros m&#233;todos &#224; medida que avan&#231;armos.</p>
<p><emph>f</emph> &#233; um nome de vari&#225;vel escolhido por n&#243;s; voc&#234; poderia cham&#225;-lo de qualquer coisa que quisesse. No Python, os nomes das vari&#225;veis podem ser constitu&#237;dos por letras mai&#250;sculas e min&#250;sculas, n&#250;meros, e o s&#237;mbolo <emph>underline</emph>... mas voc&#234; n&#227;o pode usar os nomes dos comandos Python como vari&#225;veis. Se voc&#234; tentasse nomear a sua vari&#225;vel de ficheiro como, por exemplo, "print", o seu programa n&#227;o funcionaria porque esta &#233; uma <link target="http://docs.python.org/release/2.5.4/ref/keywords.html">palavra reservada</link> que faz parte da linguagem de programa&#231;&#227;o.</p>
<p>Os nomes das vari&#225;veis Python tamb&#233;m s&#227;o <emph>case-sensitive</emph>, ou seja, diferenciam letras mai&#250;sculas de min&#250;sculas, o que significa que <emph>foobar</emph>, <emph>Foobar</emph> e <emph>FOOBAR</emph> seriam todas vari&#225;veis diferentes.</p>
<p>Quando voc&#234; executa o programa, o m&#233;todo <code type="inline">open</code> (abrir) vai dizer ao seu computador para criar um novo ficheiro de texto <code type="inline">olamundo.txt</code> na mesma pasta que voc&#234; salvou o programa <code type="inline">ficheiro-saida.py</code>. O par&#226;metro <emph>w</emph> diz que voc&#234; pretende gravar conte&#250;do neste novo ficheiro usando Python.</p>
<p>Observe que, como o nome do ficheiro e o par&#226;metro est&#227;o entre aspas simples, voc&#234; sabe que ambos est&#227;o armazenados como <emph>strings</emph>; esquecer de incluir as aspas far&#225; com que o seu programa falhe.</p>
<p>Na pr&#243;xima linha, o seu programa grava a mensagem "ol&#225; mundo" (outra string) no ficheiro e o fecha. (Para obter mais informa&#231;&#245;es sobre estas instru&#231;&#245;es, consulte a se&#231;&#227;o <link target="https://docs.python.org/2/library/stdtypes.html#bltin-file-objects">File Objects</link> na Refer&#234;ncia da biblioteca Python.)</p>
<p>Clique duas vezes no bot&#227;o "Executar Python" no Komodo Edit para executar o programa (ou o equivalente em qualquer outro editor de texto que voc&#234; tenha decidido usar: por exemplo, clique em "#!" E "Executar" no TextWrangler). Embora nada seja impresso no painel "Sa&#237;da de Comando", voc&#234; ver&#225; uma mensagem de status que diz algo como </p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_6" type="block" corresp="code_trabalhando-ficheiros-texto-python_6.txt"></code></pre>
<p>em Mac ou Linux, ou</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_7" type="block" corresp="code_trabalhando-ficheiros-texto-python_7.txt"></code></pre>
<p>no Windows.</p>
<p>Isso significa que o seu programa foi executado com sucesso. Se voc&#234; usar <emph>Arquivo -&gt; Abrir -&gt; Arquivo</emph> no Komodo Edit, voc&#234; pode abrir o ficheiro <code type="inline">olamundo.txt</code>. Ele deve conter a sua mensagem numa linha:</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_8" type="block" corresp="code_trabalhando-ficheiros-texto-python_8.txt"></code></pre>
<p>Como os ficheiros de texto incluem uma quantidade m&#237;nima de informa&#231;&#227;o de formata&#231;&#227;o, eles tendem a ser pequenos, f&#225;ceis de trocar entre plataformas diferentes
(ou seja, do Windows para Linux ou Mac, ou vice-versa) e f&#225;ceis de enviar de um programa de computador para outro. Eles geralmente tamb&#233;m podem ser lidos por pessoas que usam um editor de texto como o Komodo Edit.</p>
<div n="2"><head>Lendo de um ficheiro de texto</head>
<p>A linguagem Python tamb&#233;m possui m&#233;todos que permitem obter informa&#231;&#227;o desde ficheiros. Digite o seguinte programa no seu editor de texto e salve-o como
<code type="inline">ficheiro-entrada.py</code>. Ao clicar em "Executar" para execut&#225;-lo, ser&#225; aberto o ficheiro de texto que voc&#234; acabou de criar, lida a mensagem numa linha do ficheiro, e
impressa a mensagem no painel "Sa&#237;da de Comando".</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_9" type="block" corresp="code_trabalhando-ficheiros-texto-python_9.txt"></code></pre>
<p>Nesse caso, o par&#226;metro <emph>r</emph> &#233; usado para indicar que voc&#234; est&#225; abrindo um ficheiro para ler (<code type="inline">read</code>) a partir dele. Os par&#226;metros permitem que voc&#234; escolha entre as diferentes op&#231;&#245;es que um m&#233;todo espec&#237;fico permite. Voltando ao exemplo do c&#227;o da fam&#237;lia, o c&#227;o pode ser treinado a latir uma vez quando faz um lanche com sabor de carne e duas vezes quando recebe um com sabor de frango. O sabor do lanche &#233; um par&#226;metro. Cada m&#233;todo &#233; diferente em termos de quais par&#226;metros aceitar&#225;. Voc&#234; n&#227;o pode, por exemplo, pedir a um c&#227;o que cante uma &#243;pera italiana - a menos que o seu c&#227;o seja particularmente talentoso. Voc&#234; pode pesquisar os par&#226;metros poss&#237;veis para um m&#233;todo espec&#237;fico no site do Python ou, frequentemente, pode encontr&#225;-los digitando o nome do m&#233;todo num motor de busca, junto com o termo "Python".</p>
<p><code type="inline">Read</code> &#233; um outro m&#233;todo de ficheiro. Os conte&#250;dos do ficheiro (a mensagem de uma linha) s&#227;o copiados para a vari&#225;vel <emph>message</emph>, que &#233; como decidimos chamar esta <emph>string</emph>, e ent&#227;o o comando <code type="inline">print</code> &#233; usado para enviar os conte&#250;dos de <emph>message</emph> para o painel "Sa&#237;da do Comando".</p>
</div><div n="2"><head>Anexando conte&#250;do a um ficheiro de texto pr&#233;-existente</head>
<p>Uma terceira op&#231;&#227;o &#233; abrir um ficheiro pr&#233;-existente e adicionar mais conte&#250;do a ele. Note que se voc&#234; abrir (<code type="inline">open</code>) um ficheiro e usar o m&#233;todo <code type="inline">write</code> (gravar), <emph>o programa sobrescrever&#225; tudo o que possa estar contido no ficheiro</emph>. Isso n&#227;o &#233; um problema quando voc&#234; est&#225; criando um novo ficheiro, ou quando deseja sobrescrever os conte&#250;dos de um ficheiro existente, mas pode ser indesej&#225;vel quando voc&#234; est&#225; criando um registro de eventos ou compilando um grande conjunto de dados em um ficheiro. Neste caso, ao inv&#233;s de <code type="inline">write</code>, voc&#234; vai querer usar o m&#233;todo acrescentar (<code type="inline">append</code>), designado por <code type="inline">a</code>.</p>
<p>Digite o seguinte programa no seu editor de texto e salve-o como<code type="inline">ficheiro-acrescentar.py</code>. Quando voc&#234; executar este programa, ele abrir&#225; o mesmo ficheiro <code type="inline">olamundo.txt</code> criado anteriormente e anexar&#225; uma segunda mensagem &#8220;ol&#225; mundo&#8221; ao ficheiro. A sequ&#234;ncia '\n' significa o in&#237;cio de uma nova linha.</p>
<pre><code class="language-python" xml:id="code_trabalhando-ficheiros-texto-python_10" type="block" corresp="code_trabalhando-ficheiros-texto-python_10.txt"></code></pre>
<p>Depois de executar o programa, abra o ficheiro <code type="inline">olamundo.txt</code> e veja o que aconteceu. Feche o ficheiro de texto e execute mais algumas vezes o programa <code type="inline">ficheiro-acrescentar.py</code>. Quando voc&#234; abrir <code type="inline">olamundo.txt</code> novamente, notar&#225; algumas mensagens 'ol&#225; mundo' extra esperando por voc&#234;.</p>
<p>Na pr&#243;xima se&#231;&#227;o, discutiremos a modularidade e a reutiliza&#231;&#227;o de c&#243;digo.</p>
</div></div>
      <div n="1"><head>Leituras sugeridas</head>
<ul>
<li><link target="https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3/Hello,_World">Non-Programmer's Tutorial for Python 3/Hello, World</link></li>
</ul>
</div>
    </body>
  </text>
</TEI>
