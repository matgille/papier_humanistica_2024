<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="de-html-a-lista-de-palabras-1">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>De HTML a lista de palabras (parte 1)</title>
  <author type="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor type="reviewers"><persName>Jim Clifford</persName><persName>Frederik Elwert</persName></editor><author type="translators">V&#237;ctor Gayol</author><editor type="translation-reviewers"><persName>Jairo A. Melo</persName><persName>Maria Jos&#233; Afanador-Llach</persName><persName>Antonio Rojas Castro</persName></editor><editor type="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phes0005</idno><date type="published">07/17/2012</date><date type="translated">03/15/2017</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#from-html-to-list-of-words-1"/>.</p><p>There are other translations: <ref target="#HTML-lista-palavras-1 #du-html-a-une-liste-de-mots-1"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>En esta lecci&#243;n en dos partes partiremos de lo que has aprendido sobre Descargar p&#225;ginas web con Python, para aprender c&#243;mo remover las etiquetas HTML de la p&#225;gina web de la transcripci&#243;n del juicio criminal contra Benjamin Bowsey de 1780. Lograremos esto utilizando una variedad de operadores de cadenas, m&#233;todos de cadenas y habilidades de lectura cercana. Vamos a presentar bucles (looping) y condicionales (branching), de manera que los programas puedan repetir tareas y pruebas para ciertas condiciones, haciendo posible separar el contenido de las etiquetas HTML. Por &#250;ltimo, convertimos el contenido de una cadena larga a una lista de palabras que posteriormente podr&#225;n ser ordenadas, indexadas y contadas.</p></abstract><textClass><keyword xml:lang="en">python</keyword></textClass></profileDesc>
</teiHeader>
  <text xml:lang="es">
    <body>
      <div type="2"><head>Objetivos de la lecci&#243;n</head>
<p>En esta lecci&#243;n en dos partes partiremos de lo que has aprendido en <link target="/es/lecciones/trabajar-con-paginas-web">Descargar p&#225;ginas web con Python</link>, para aprender c&#243;mo remover las <emph>etiquetas HTML</emph> de la p&#225;gina web de la <link target="http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33">transcripci&#243;n del juicio criminal contra Benjamin Bowsey de 1780</link>. Lograremos esto utilizando una variedad de <emph>operadores de cadenas</emph>, <emph>m&#233;todos de cadenas</emph> y habilidades de lectura cercana. Vamos a presentar <emph>bucles</emph> (<emph>looping</emph>) y <emph>condicionales</emph> (<emph>branching</emph>), de manera que los programas puedan repetir tareas y pruebas para ciertas condiciones, haciendo posible separar el contenido de las etiquetas HTML. Por &#250;ltimo, convertimos el contenido de una cadena larga a una <emph>lista de palabras</emph> que posteriormente podr&#225;n ser ordenadas, indexadas y contadas.</p>
</div>
      <div type="2"><head>El reto</head>
<p>Para tener una idea m&#225;s clara de la tarea que tenemos por delante, abre el archivo <emph>obo-t17800628-33.html</emph> que creaste en la lecci&#243;n <link target="/es/lecciones/trabajar-con-paginas-web">Descargar p&#225;ginas web con Python</link> (o <link target="/assets/obo-t17800628-33.html">descarga y guarda el juicio</link>, si a&#250;n no tienes una copia). Entonces observa el c&#243;digo HTML en tu navegador de Fierfox usando <code type="inline">Herramientas -&gt; Desarrollador web -&gt; C&#243;digo fuente de esta p&#225;gina</code>. A medida que te desplazas a trav&#233;s del c&#243;digo fuente te dar&#225;s cuenta que hay etiquetas HTML mezcladas con el texto. Si eres nuevo en HTML te recomendamos tomar el tutorial de W3Schools <link target="http://www.w3schools.com/html/">HTML</link> para familiarizarte con el marcado. Si tu trabajo requiere a menudo que tengas que retirar etiquetas sin duda te va a servir para entenderlo en cuanto lo veas.</p>
</div>
      <div type="2"><head>Archivos necesarios para esta lecci&#243;n</head>
<ul>
<li><emph><link target="/assets/obo-t17800628-33.html">obo-t17800628-33.html</link></emph></li>
</ul>
</div>
      <div type="2"><head>Idear un algoritmo</head>
<p>Dado que el objetivo es deshacerse del HTML, el primer paso es crear un algoritmo que devuelva solamente el texto (menos las etiquetas HTML) del art&#237;culo. Un algoritmo es un procedimiento que se ha especificado con suficiente detalle de tal forma que puede ser implementado en una computadora. Es muy &#250;til escribir primero tus algoritmos en espa&#241;ol llano; es una idea excelente delinear exactamente qu&#233; es lo que quieres que haga antes de sumergirte en el c&#243;digo. Para construir este algoritmo te vas a servir de tus habilidades de lectura cercana para encontrar la manera de capturar solamente el contenido textual de la biograf&#237;a.</p>
<p>Al examinar el c&#243;digo fuente de <emph>obo-t17800628-33.html</emph> notar&#225;s que la transcripci&#243;n real no se inicia de forma inmediata. Por el contrario, hay un n&#250;mero de etiquetas HTML y algo de informaci&#243;n para citar. En este caso el contenido no comienza &#161;sino hasta la l&#237;nea 81!</p>
<pre><code class="language-xml" xml:id="code_de-html-a-lista-de-palabras-1_0" type="block" corresp="code_de-html-a-lista-de-palabras-1_0.txt"/></pre>
<p>Solamente nos interesa la transcripci&#243;n del juicio, no los metadatos extra contenidos en las etiquetas. No obstante, te dar&#225;s cuenta que el final de los metadatos coincide con el principio de la transcripci&#243;n. Esto hace que la ubicaci&#243;n de los metadatos sea un marcador potencialmente &#250;til para aislar texto transcrito.</p>
<p>A primera vista, podemos ver que la transcripci&#243;n del juicio inicia con una etiqueta HTML: <code type="inline">&lt;p&gt;</code> que significa "p&#225;rrafo". &#201;sta es la primera etiqueta de p&#225;rrafo en el documento. Debemos ser capaces de usar esto para encontrar el punto de inicio de nuestro documento transcrito. Tenemos suerte en este caso porque resulta que esta etiqueta es una manera confiable para determinar el principio de la transcripci&#243;n del texto del juicio (si quieres, &#233;chale un vistazo a otros juicios para comprobarlo).</p>
<p>El texto del juicio termina en la l&#237;nea 82 con otra etiqueta HTML: <code type="inline">&lt;br/&gt;</code>, que significa un salto de l&#237;nea. Resulta que es el &#250;ltimo salto de l&#237;nea del documento. Estas dos etiquetas (la del primer p&#225;rrafo y la del &#250;ltimo salto de l&#237;nea) nos proveen el recurso para aislar el texto transcrito. Los sitios web bien estructurados siempre tienen una &#250;nica manera de se&#241;alar el final del contenido. Solmamente necesitas observar con atenci&#243;n.</p>
<p>Lo siguiente que querr&#225;s hacer es retirar todas las marcas de HTML que permanecen mezcladas con el contenido. Como sabes, las etiquetas HTML se encuentras siempre entre un par de corchetes angulares que se corresponden, por lo que probablemente una apuesta segura es que al quitar todo lo que est&#233; dentro de dos corchetes angulares quitar&#225;s el c&#243;digo HTML y dejar&#225;s solamente la transcripci&#243;n. Ten en cuenta que estamos asumiendo que la transcricpi&#243;n no contiene s&#237;mbolos matem&#225;ticos como "menor que" y "mayor que". Si Bowsey hubiese sido un matem&#225;tico, nuestro supuesto no ser&#237;a tan seguro.</p>
<p>Lo que sigue describe nuestro algoritmo en palabras.</p>
<p>Para aislar el contenido:</p>
<ul>
<li>Descarga el texto transcrito</li>
<li>Busca el HTML y guarda la localizaci&#243;n de la primera etiqueta <code type="inline">&lt;p&gt;</code></li>
<li>Busca el HTML y guarda la localizaci&#243;n de la &#250;tlima etiqueta <code type="inline">&lt;p&gt;</code></li>
<li>Guarda todo lo que aparezca despu&#233;s de la primera etiqueta <code type="inline">&lt;p&gt;</code> y antes de la etiqueta <code type="inline">&lt;br/&gt;</code> en una cadena de texto: <emph>contenidoPagina</emph></li>
</ul>
<p>En este punto tenemos la trascripci&#243;n del texto del juicio m&#225;s el marcado de HTML. Despu&#233;s:</p>
<ul>
<li>Mira con atenci&#243;n cada car&#225;cter en la cadena de texto <emph>contenido-de-pagina</emph>, car&#225;cter por car&#225;cter</li>
<li>Si el car&#225;cter es un corchete angular izquierdo (&lt;) nos encontramos dentro de una etiqueta as&#237; que ignora cada uno de los caracteres siguientes</li>
<li>Si el car&#225;cter es un corchete angular derecho (&gt;) estamos saliendo de una etiqueta; ignora el car&#225;cter actual, pero mira cada uno de los caracteres siguientes</li>
<li>Si no estamos dentro de una etiqueta, adjunta el car&#225;cter actual a una nueva variable: <emph>texto</emph></li>
</ul>
<p>Finalmente:</p>
<ul>
<li>Divide la cadena de texto en una lista de palabras individuales que despu&#233;s puedan manipularse m&#225;s</li>
</ul>
</div>
      <div type="2"><head>Aislar el contenido deseado</head>
<p>El siguiente paso utiliza los comandos de Python aprendidos en la lecci&#243;n <link target="/es/lecciones/manipular-cadenas-de-caracteres-en-python">Manipular cadenas de caracteres en Python</link> para implementar la primera mitad del algoritmo: retirar todo el contenido antes de la etiqueta <code type="inline">&lt;p&gt;</code> y despu&#233;s de la etiqueta <code type="inline">&lt;br/&gt;</code>. En resumen, el algoritmo fue el siguiente:</p>
<ul>
<li>Descarga el texto transcrito</li>
<li>Busca el HTML y guarda la localizaci&#243;n de la primera etiqueta <code type="inline">&lt;p&gt;</code></li>
<li>Busca el HTML y guarda la localizaci&#243;n de la &#250;tlima etiqueta <code type="inline">&lt;p&gt;</code></li>
<li>Guarda todo lo que aparezca despu&#233;s de la primera etiqueta <code type="inline">&lt;p&gt;</code> y antes de la etiqueta <code type="inline">&lt;br/&gt;</code> a una cadena de texto: <emph>contenidoPagina</emph></li>
</ul>
<p>Para lograr esto, utilizar&#225;s el m&#233;todo de cadena de caracteres "find" y el m&#233;todo .rfind() (que permite encontrar la &#250;ltima coincidencia de algo) y crear&#225;s una nueva subcadena conteniendo solamente el contenido deseado entre esas posiciones indexadas.</p>
<p>A medida que trabajas, vas a construir archivos separados para contener tu c&#243;digo. Uno de estos archivos se llamar&#225; <emph>obo.py</emph> (a partir de "Old Bailey Online"). Este archivo va a contener todo el c&#243;digo que t&#250; quieres reutilizar; en otras palabras, <emph>obo.py</emph> es un m&#243;dulo. Discutimos la idea de m&#243;dulos en la lecci&#243;n <link target="/es/lecciones/reutilizacion-de-codigo-y-modularidad">Reutilizacion de c&#243;digo y modularidad</link> cuando guardamos nuestras funciones en <emph>saludo.py</emph>.</p>
<p>Crea un nuevo archivo llamado <emph>obo.py</emph> y gu&#225;rdalo en tu carpeta <emph>programming-historian</emph>. Vamos a utilizar este archivo para mantener copias de las funciones necesarias para procesar The Old Bailey Online. Teclea o copia el siguiente c&#243;digo en tu archivo.</p>
<pre><code class="language-python" xml:id="code_de-html-a-lista-de-palabras-1_1" type="block" corresp="code_de-html-a-lista-de-palabras-1_1.txt"/></pre>
<p>Ahora crea un segundo archivo llamado <emph>contenido-juicio.py</emph> y guarda el programa que se muestra a continuaci&#243;n:</p>
<pre><code class="language-python" xml:id="code_de-html-a-lista-de-palabras-1_2" type="block" corresp="code_de-html-a-lista-de-palabras-1_2.txt"/></pre>
<p>Cuando ejecutes <emph>contenido-juicio.py</emph> &#233;ste obtendr&#225; la p&#225;gina Web de la transcripci&#243;n del juicio de Bowsey, entonces mira en el m&#243;dulo <emph>obo.py</emph> la funci&#243;n <emph>quitarEtiquetas</emph>. El programa utilizar&#225; esa funci&#243;n para extraer todo lo que est&#233; despu&#233;s de la primera etiqueta <code type="inline">&lt;p&gt;</code> y antes de la &#250;ltima <code type="inline">&lt;br/&gt;</code>. Con algo de suerte esto debe ser el contenido textual de la transcripci&#243;n de Bowsey acompa&#241;ada con algo de marcado en HTML. No te preocupes si tu pantalla de salida de comandos termina en una l&#237;nea gruesa negra. La pantalla de salida de Komodo Edit tiene un n&#250;mero m&#225;ximo de caracteres a desplegar, despu&#233;s de lo cual los caracteres empiezan a escribirse unos sobre otros en la pantalla, literalmente, dando la apriencia de una mancha negra. No te preocupes: el texto est&#225; ah&#237; a&#250;n cuando t&#250; no puedas leerlo; as&#237; que puedes copiar y pegarlo en un archivo de texto para confirmarlo.</p>
<p>Tomemos un momento para estar seguros de que entendemos de qu&#233; manera <emph>contenido-juico.py</emph> es capaz de utilizar las funciones almacenadas en <emph>obo.py</emph>. La funci&#243;n <emph>quitarEtiquetas</emph> que guardamos en <emph>obo.py</emph> requiere un argumento. En otras palabras, para ejecutarse con propiedad requiere que se le suministre una unidad de informaci&#243;n. Recordemos el ejemplo del perro entrenado de lecciones previas. Para que ladre, el perro necesita dos cosas: aire y una deliciosa recompensa. La funci&#243;n <emph>quitarEtiquetas</emph> en <emph>obo.py</emph> requiere una cosa: una cadena de texto llamada <emph>contenidoPagina</emph>. Pero te dar&#225;s cuenta que cuando llamamos a <emph>quitarEtiquetas</emph> en el &#250;ltimo programa (<emph>contenido-juicio.py</emph>), no hay ninguna menci&#243;n a "<emph>contenidoPagina</emph>". En cambio, se le ha dado a la funci&#243;n HTML como argumento. Esto puede ser confuso para las personas que est&#225;n empezando a programar. Una vez que una funci&#243;n ha sido declarada, no necesitamos utilizar el mismo nombre de la variable cuando llamamos a la funci&#243;n. Mientras que proporcionemos el tipo de argumento adecuado, todo debe funcionar correctamente sin importar c&#243;mo lo llamamos. En este caso, queremos que <emph>contenidoPagina</emph> utilice el contenido de nuestra variable HTML. Podr&#237;a pasar por cualquier cadena de texto, incluida alguna que se ingrese directamente en el par&#233;ntesis. Intenta volver a ejecutar <emph>contenido-juicio.py</emph> cambiando el argumento <emph>quitarEtiquetas</emph> a "Soy aficionado a los perros", y mira lo que sucede. Toma en cuenta que dependiendo de c&#243;mo definas tu funci&#243;n (y lo que hace), tu argumento necesitar&#225; posiblemente ser algo distinto que una cadena: un <emph>entero</emph> por ejemplo.</p>
</div>
      <div type="2"><head>Lecturas sugeridas</head>
<ul>
<li>
Lutz, <emph>Learning Python</emph><ul>
<li>Ch. 7: Strings</li>
<li>Ch. 8: Lists and Dictionaries</li>
<li>Ch. 10: Introducing Python Statements</li>
<li>Ch. 15: Function Basics</li>
</ul>
</li>
</ul>
</div>
      <div type="2"><head>Sincronizaci&#243;n de c&#243;digo</head>
<p>Para seguir a lo largo de las lecciones futuras es importante que tengas los archivos correctos y programas en el directorio "programming-historian" de tu disco duro. Al final de cada lecci&#243;n puedes descargar el archivo zip "python-es-lecciones" para asegurarte que tienes el c&#243;digo correcto.</p>
<ul>
<li>python-es-lecciones2.zip (<link target="/assets/python-es-lecciones2.zip">zip</link>)</li>
</ul>
</div>
    </body>
  </text>
</TEI>
