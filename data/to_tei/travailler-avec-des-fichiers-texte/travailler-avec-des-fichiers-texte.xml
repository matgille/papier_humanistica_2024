<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="travailler-avec-des-fichiers-texte">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Travailler avec des fichiers texte en Python</title>
  <author type="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor type="reviewers">Jim Clifford</editor><author type="translators">Sylvain Machefert</author><editor type="translation-reviewers"><persName>Alix Chagu&#233;</persName><persName>Fran&#231;ois Dominic Laram&#233;e</persName></editor><editor type="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phfr0005</idno><date type="published">07/17/2012</date><date type="translated">07/01/2019</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#working-with-text-files"/>.</p><p>There are other translations: <ref target="#trabajar-con-archivos-de-texto #trabalhando-ficheiros-texto-python"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Cette le&#231;on vous explique comment manipuler des fichiers texte en Python.</p></abstract><textClass><keyword xml:lang="en">python</keyword></textClass></profileDesc>
</teiHeader>
  <text xml:lang="fr">
    <body>
      <div type="2"><head>Objectifs de la le&#231;on</head>
<p>Au cours de cette le&#231;on, vous apprendrez &#224; manipuler des fichiers texte
en Python : ouvrir, fermer, lire et &#233;crire des fichiers <code type="inline">.txt</code> &#224; l'aide de
programmes informatiques.</p>
<p>Les prochaines le&#231;ons de cette s&#233;rie auront pour objectif de t&#233;l&#233;charger une
page web avant de r&#233;organiser le contenu sous forme d'information exploitable
de mani&#232;re automatique. La plupart des op&#233;rations se feront &#224; l'aide de scripts
Python ex&#233;cut&#233;s depuis l'Environnement de d&#233;veloppement int&#233;gr&#233; (EDI) Komodo Edit.
Les solutions pr&#233;sent&#233;es pourront bien entendu &#234;tre utilis&#233;es dans n'importe quel
autre EDI ou avec un simple &#233;diteur de texte combin&#233; &#224; l'interpr&#233;teur Python.</p>
</div>
      <div type="2"><head>Travailler avec des fichiers texte</head>
<p>Python propose des solutions simples pour travailler avec les fichiers et le texte.
Commen&#231;ons par les fichiers.</p>
</div>
      <div type="2"><head>Cr&#233;er et &#233;crire dans un fichier texte</head>
<p>Commen&#231;ons par une petite explication de terminologie. Lors d'une le&#231;on pr&#233;c&#233;dente consacr&#233;e &#224; l'installation
(voir la le&#231;on <link target="/en/lessons/mac-installation">pour Mac</link>, <link target="/fr/lecons/installation-windows-py">pour Windows</link> ou <link target="/en/lessons/linux-installation">pour Linux</link>), vous avez appris comment envoyer des
informations dans la fen&#234;tre "Command Output" de votre &#233;diteur de texte en
utilisation la commande Python <link target="https://docs.python.org/fr/2.7/library/functions.html#prin">print</link>.</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_0" type="block" corresp="code_travailler-avec-des-fichiers-texte_0.txt"/></pre>
<p>Le langage de programmation Python est un langage <emph>orient&#233; objet</emph>. Cela signifie
qu'il est construit autour d'un concept particulier : l'<emph>objet</emph>, qui contient &#224;
la fois les <emph>donn&#233;es</emph> et les <emph>m&#233;thodes</emph> permettant d'acc&#233;der &#224; ces donn&#233;es et
de les modifier. D&#232;s lors qu'un objet est cr&#233;&#233;, il peut interagir avec d'autres
objets.</p>
<p>Dans l'exemple ci-dessus, nous voyons un type d'objet, la cha&#238;ne de caract&#232;res
(<emph>string</emph>) "hello world". Cette cha&#238;ne est une suite de caract&#232;res d&#233;limit&#233;e par
des guillemets. Vous pouvez d&#233;finir une cha&#238;ne de caract&#232;res de trois mani&#232;res :</p>
<pre><code xml:id="code_travailler-avec-des-fichiers-texte_1" type="block" corresp="code_travailler-avec-des-fichiers-texte_1.txt"/></pre>
<p>On retiendra qu'il est possible d'utiliser des apostrophes ou des guillemets
pour d&#233;finir la cha&#238;ne. Il n'est par contre pas possible de m&#233;langer les deux dans
la d&#233;claration d'une cha&#238;ne de caract&#232;res.</p>
<p>Les d&#233;clarations suivantes ne fonctionneront pas :</p>
<pre><code xml:id="code_travailler-avec-des-fichiers-texte_2" type="block" corresp="code_travailler-avec-des-fichiers-texte_2.txt"/></pre>
<p>Comptez le nombre d'apostrophes dans le message6. Pour que cet exemple fonctionne,
il est n&#233;cessaire d'<emph>&#233;chapper</emph> (escape) l'apostrophe :</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_3" type="block" corresp="code_travailler-avec-des-fichiers-texte_3.txt"/></pre>
<p>Ou r&#233;&#233;crire la ligne sous la forme suivante :</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_4" type="block" corresp="code_travailler-avec-des-fichiers-texte_4.txt"/></pre>
<p>Dans le message3 plus haut, les triples guillemets signifient que la cha&#238;ne
se poursuit sur plusieurs lignes.</p>
<p><code type="inline">print</code> est une commande qui affiche l'objet sous forme textuel. La commande
print, combin&#233;e &#224; la cha&#238;ne de caract&#232;res correspond &#224; une <emph>instruction</emph>.</p>
<p>On utilise cette commande <code type="inline">print</code> lorsque l'on a besoin
d'avoir un retour visuel en temps r&#233;el de la part de notre programme.
Parfois, on souhaite pouvoir enregistrer les informations cr&#233;&#233;es,
les envoyer &#224; quelqu'un ou encore les traiter &#224; l'aide d'un autre programme.
Pour cela, il sera pr&#233;f&#233;rable
d'envoyer l'information vers un fichier du disque dur plut&#244;t que dans la
fen&#234;tre "Command output". Afin de comprendre comment cela fonctionne, entrez
le code suivant dans votre &#233;diteur de texte et sauvegardez le fichier sous le
nom <code type="inline">file-output.py</code>.</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_5" type="block" corresp="code_travailler-avec-des-fichiers-texte_5.txt"/></pre>
<p>En python, une ligne qui commence par le signe di&#232;se (#) est consid&#233;r&#233;e
comme un <emph>commentaire</emph> et est ignor&#233;e par l'interpr&#233;teur de code. Les
commentaires sont pr&#233;vus pour que le d&#233;veloppeur ou la d&#233;veloppeuse puisse laisser des messages
&#224; destination d'autres personnes travaillant sur son code (ou pour se
souvenir de ce que fait le code lorsqu'on le reprendra quelques mois ou
ann&#233;es plus tard). De mani&#232;re g&#233;n&#233;rale, les programmes sont &#233;crits d'une
mani&#232;re qui permette leur compr&#233;hension le plus facilement
possible lors de la reprise de code ou de travail &#224; plusieurs sur le m&#234;me
outil.</p>
<p>Quand du code est tr&#232;s proche des instructions que comprend le
processeur de la machine, on parle de langage de <emph>bas niveau</emph>, alors que du
code proche du langage naturel est consid&#233;r&#233; comme de <emph>haut niveau</emph>. Un des
avantages de Python est que c'est un langage de tr&#232;s haut niveau, et qu'il
est ainsi plus facile de comprendre le but des programmes d&#233;crits dans ces
le&#231;ons (avec un co&#251;t en terme d'efficacit&#233;, puisque l'ordinateur aura besoin
d'un travail d'analyse plus complexe qu'avec des langages de bas niveau).</p>
<p>Dans le programme ci-dessus, <emph>f</emph> est un <emph>objet de type fichier</emph> (file object)
et <code type="inline">open</code>, <code type="inline">write</code> et <code type="inline">close</code> sont des <emph>m&#233;thodes sur fichier</emph> (file methods).
En d'autres termes, "open", "write" et "close" agissent sur l'objet <emph>f</emph> qui dans le
cas pr&#233;sent est d&#233;fini comme un fichier '.txt'. Ce n'est pas forc&#233;ment
l'usage habituel du terme "m&#233;thode", et de temps en temps vous noterez que des
termes ont, dans le contexte de la programmation, un sens diff&#233;rent du sens
commun&#233;ment admis. Dans ce cas, retenez simplement que les m&#233;thodes
sont des morceaux de code qui vont r&#233;aliser des actions d&#233;finies avant de
retourner un r&#233;sultat. Vous pouvez imaginer cela en transposant le principe
&#224; un exemple concret : le chien. Le chien (objet) comprend des commandes (
dispose de "m&#233;thodes") telles que "aboyer", "s'assoir", "faire le mort", etc.
D'autres m&#233;thodes pr&#233;d&#233;finies seront pr&#233;sent&#233;es par la suite.</p>
<p><emph>f</emph> est un nom de variable que nous avons choisi mais nous aurions pu choisir
(quasiment) n'importe quelle cha&#238;ne de caract&#232;res. En Python, les noms de
variables sont constitu&#233;s de lettres majuscules, minuscules, chiffres et
underscores. Une des seules limites est qu'il est interdit d'utiliser les
noms des commandes de base de Python comme nom de variables : si vous
essayez par exemple de nommer une variable "print", votre programme ne
s'ex&#233;cutera pas car c'est un <link target="https://docs.python.org/fr/2.7/reference/lexical_analysis.html#keywords">mot r&#233;serv&#233;</link> par le langage.</p>
<p>Les noms de variables en python sont <emph>sensibles &#224; la casse</emph>, c'est &#224; dire que
toto, Toto et TOTO seront trois variables diff&#233;rentes.</p>
<p>Lorsque vous lancez le programme ci-dessus, la m&#233;thode <code type="inline">open</code> indique
&#224; votre ordinateur de cr&#233;er un nouveau fichier <code type="inline">helloworld.txt</code> dans le
r&#233;pertoire o&#249; se trouve <code type="inline">file-output.py</code>. Le <emph>param&#232;tre <hi rend="bold">'<hi rend="bold">w</hi>'</hi></emph> sp&#233;cifie que le
fichier ouvert est destin&#233; &#224; l'&#233;criture (<emph><hi rend="bold">w</hi></emph>rite) de contenus par Python.</p>
<p>On notera que le nom de fichier et le param&#232;tre sont entour&#233;s de guillemets,
et qu'ils sont donc stock&#233;s tous les deux sous la forme de cha&#238;ne de caract&#232;res.
Si l'on oublie ces guillemets le programme ne fonctionnera pas.</p>
<p>&#192; la ligne suivante, votre programme &#233;crit le message "hello world" (une autre
cha&#238;ne de caract&#232;res) dans le fichier puis ferme ce dernier. (Pour plus
d'informations sur ces op&#233;rations, consultez la section <link target="https://docs.python.org/fr/2.7/glossary.html#term-file-object">File Objects</link> de
la documentation de la biblioth&#232;que standard Python).</p>
<p>Double-cliquez sur le bouton "Run Python" dans Komodo Edit pour ex&#233;cuter
le programme (ou la fonctionnalit&#233; &#233;quivalente disponible dans votre &#233;diteur,
par exemple "#!" et "Run" dans TextWrangler). Bien que rien ne s'affiche dans
la fen&#234;tre "Command Output", vous verrez un message de statut qui indique
quelque chose du type :</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_6" type="block" corresp="code_travailler-avec-des-fichiers-texte_6.txt"/></pre>
<p>sur Mac et Linux, ou</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_7" type="block" corresp="code_travailler-avec-des-fichiers-texte_7.txt"/></pre>
<p>sous Windows.</p>
<p>Cela signifie que le d&#233;roulement du programme s'est effectu&#233; avec
succ&#232;s. Si vous allez dans le menu <emph>File -&gt; Open -&gt; File</emph>, vous pourrez
ouvrir le fichier <code type="inline">helloworld.txt</code>. Il devrait contenir la ligne
suivante :</p>
<pre><code xml:id="code_travailler-avec-des-fichiers-texte_8" type="block" corresp="code_travailler-avec-des-fichiers-texte_8.txt"/></pre>
<p>&#201;tant donn&#233; que les fichiers texte n'incluent que peu (voire pas)
d'indications de formatage, ils ont tendance &#224; rester l&#233;gers et faciles
&#224; &#233;changer entre diff&#233;rentes plateformes (par exemple de Windows &#224; Linux
ou Mac, et vice versa), et ainsi faciles &#224; transf&#233;rer entre ordinateurs. Ils
ont aussi l'avantage de pouvoir &#234;tre cr&#233;&#233;es et ouverts par n'importe qui
puisque le plus simple des &#233;diteurs de texte, de type bloc notes par exemple, suffit.</p>
<div type="3"><head>Lire depuis un fichier texte</head>
<p>Python permet aussi de r&#233;cup&#233;rer l'information
contenue dans des fichiers. Copiez le programme suivant dans votre &#233;diteur
et enregistrez le sous <code type="inline">file-input.py</code>. Lorsque vous cliquez sur "Run" pour
l'ex&#233;cuter, il va lire le fichier que l'on a cr&#233;&#233; &#224; l'&#233;tape pr&#233;c&#233;dente, lire
la ligne qu'il contient et l'afficher dans la fen&#234;tre "Command Output".</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_9" type="block" corresp="code_travailler-avec-des-fichiers-texte_9.txt"/></pre>
<p>Cette fois, le <emph>param&#232;tre <hi rend="bold">'<hi rend="bold">r</hi>'</hi></emph> est utilis&#233; pour indiquer que le fichier
est ouvert en mode lecture (<emph><hi rend="bold">r</hi></emph>ead). Les param&#232;tres vous permettent de
sp&#233;cifier diff&#233;rentes options comprises par la m&#233;thode. Si l'on revient
&#224; l'exemple du chien cit&#233; pr&#233;c&#233;demment, celui-ci pourrait &#234;tre dress&#233; &#224;
aboyer une fois lorsqu'on lui donne un snack au boeuf, et deux fois pour un
snack au poulet. Le go&#251;t du snack est un param&#232;tre. Chaque m&#233;thode diff&#232;re
sur le plan des param&#232;tres possibles. Il ne sera ainsi pas possible de
demander au chien d'aboyer un op&#233;ra italien (&#224; moins que votre chien soit
tr&#232;s talentueux). Le site web de Python vous permet de prendre connaissance
des param&#232;tres disponibles pour les principales commandes, et une recherche
dans un moteur de recherche de la commande accompagn&#233;e du terme Python vous
permettra souvent de retrouver ces informations.</p>
<p><code type="inline">Read</code> est une autre m&#233;thode des objets de type fichier. Le contenu du fichier (le message Hello world)
est copi&#233; dans la variable <emph>message</emph>, puis la commande <code type="inline">print</code> va afficher
le contenu de <emph>message</emph> dans la fen&#234;tre "Command Output".</p>
</div><div type="3"><head>Ajouter du contenu &#224; un fichier texte existant</head>
<p>Une troisi&#232;me option est d'ouvrir un fichier pr&#233;-existant pour y ajouter
du contenu. Attention, si vous ouvrez un fichier en &#233;criture (w) et que ce
fichier existe, si vous utilisez la m&#233;thode <code type="inline">write</code>, le contenu pr&#233;c&#233;dent
sera &#233;cras&#233;. Si vous souhaitez ajouter de nouveaux contenus &#224; un fichier,
on ouvrira plut&#244;t le fichier en ajout avec le <emph>param&#232;tre <hi rend="bold">'<hi rend="bold">a</hi>'</hi></emph> (<emph><hi rend="bold">a</hi></emph>ppend).</p>
<p>Copiez le programme suivant dans votre &#233;diteur
et enregistrez le sous <code type="inline">file-append.py</code>. Lorsque vous cliquez sur "Run" pour
l'ex&#233;cuter, ce programme ouvrira le fichier pr&#233;c&#233;demment cr&#233;&#233; et y ajoutera
une seconde ligne "hello world". Le code '\n' correspond &#224; un retour &#224; la
ligne.</p>
<pre><code class="language-python" xml:id="code_travailler-avec-des-fichiers-texte_10" type="block" corresp="code_travailler-avec-des-fichiers-texte_10.txt"/></pre>
<p>Apr&#232;s avoir ex&#233;cut&#233; le programme, ouvrez le fichier <code type="inline">helloworld.txt</code> et
regardez ce qui s'est pass&#233;. Fermez alors le fichier puis ex&#233;cutez &#224; nouveau
<code type="inline">file-append.py</code> quelques fois. Si vous ouvrez le fichier <code type="inline">helloworld.txt</code>
vous verrez que plusieurs lignes contenant le message 'hello world' sont
apparues.</p>
<p>Dans la prochaine section, nous aborderons la modularit&#233; et la r&#233;utilisation
du code. Celle-ci est d&#233;j&#224; disponible en anglais
(<link target="/en/lessons/code-reuse-and-modularity">Code Reuse and Modularity in Python</link>).</p>
</div></div>
      <div type="2"><head>Lectures recommand&#233;es</head>
<ul>
<li><link target="https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3/Hello,_World">Non-Programmer&#8217;s Tutorial for Python 3/Hello, World</link></li>
</ul>
</div>
    </body>
  </text>
</TEI>
