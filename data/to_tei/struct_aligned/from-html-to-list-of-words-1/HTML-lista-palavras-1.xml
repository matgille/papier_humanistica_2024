<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>De HTML para Lista de Palavras (parte 1)</title>
  <layout>lesson</layout>
  <collection>lessons</collection>
  <slug>HTML-lista-palavras-1</slug>
  <date>2012-07-17</date>
  <translation_date>2022-10-27</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford,Frederik Elwert</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Felipe Lamarca</translator>
  <translation-editor>Jimmy Medeiros</translation-editor>
  <translation-reviewer>Daniel Bonatto Seco,Diana Rebelo Rodriguez</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/442</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Nesta lição de duas partes, aprofundaremos o que aprendeu sobre o Download de Páginas Web com Python, aprendendo como remover a marcação HTML de uma página web da transcrição do julgamento criminal de Benjamin Bowsey em 1780. Faremos isso usando uma variedade de operadores de string, métodos de string e habilidades de leitura atenta. Introduziremos looping e branching de modo que os programas possam repetir tarefas e testar certas condições, tornando possível a separação do conteúdo das tags HTML. Finalmente, faremos a conversão do conteúdo de uma string longa para uma lista de palavras, que podem ser ordenadas, indexadas e contabilizadas posteriormente.</abstract>
  <original>from-html-to-list-of-words-1</original>
  <avatar_alt>Uma girafa a ser imitada por um humano</avatar_alt>
  <doi>10.46430/phpt0027</doi>
</metadata>
  <text xml:lang="pt">
    <body>
      <div type="2" n="1"><head>Objetivos da lição</head>
<p>Nesta lição de duas partes, aprofundaremos o que aprendeu sobre o <link target="/pt/licoes/download-paginas-web-python">Download de Páginas Web com Python</link>, aprendendo como remover a <emph>marcação HTML</emph> de uma página web da <link target="https://perma.cc/8LM6-W39K">transcrição do julgamento criminal de Benjamin Bowsey em 1780</link>. Faremos isso usando uma variedade de <emph>operadores de string</emph>, <emph>métodos de string</emph> e habilidades de leitura atenta. Introduziremos <emph>looping</emph> e <emph>branching</emph> de modo que os programas possam repetir tarefas e testar certas condições, tornando possível a separação do conteúdo das tags HTML. Finalmente, faremos a conversão do conteúdo de uma string longa para uma <emph>lista de palavras</emph>, que podem ser ordenadas, indexadas e contabilizadas posteriormente.</p>
</div>
      <div type="2" n="2"><head>O Desafio</head>
<p>Para ter uma ideia mais clara da tarefa que temos pela frente, abra o ficheiro <emph>obo-t17800628-33.html</emph> que criou em <link target="/pt/licoes/download-paginas-web-python">Download de Páginas Web com Python</link> (ou faça o <link target="/assets/obo-t17800628-33.html">download e guarde a transcrição do julgamento</link> caso ainda não tenha uma cópia) e depois verifique o código-fonte do HTML clicando em <emph>Ferramentas -&gt; Ferramentas do Navegador -&gt; Fonte da página</emph> (para usuários do navegador Firefox). À medida que for olhando o código-fonte, notará que há tags HTML misturadas com texto. Caso não tenha experiência com HTML, recomendamos que faça o tutorial do W3 Schools <link target="http://www.w3schools.com/html/">HTML</link> para se familiarizar com a marcação HTML. Se o seu trabalho frequentemente requer que remova a marcação HTML, certamente será útil entendê-la ao visualizá-la.</p>
<div type="3" n="2.1"><head>Ficheiros Necessários para esta Lição</head>
<ul>
<li><emph><link target="/assets/obo-t17800628-33.html">obo-t17800628-33.html</link></emph></li>
</ul>
</div></div>
      <div type="2" n="3"><head>Idealizando um Algoritmo</head>
<p>Uma vez que o objetivo é nos livrarmos do HTML, o primeiro passo é criar um algoritmo que retorna apenas o texto (removendo as tags HTML) do artigo. Um algoritmo é um procedimento suficientemente detalhado a ponto de poder ser implementado em um computador. Facilita escrever o seu algoritmo no português direto; é uma ótima maneira de delinear exatamente o que deseja fazer antes de mergulhar no código. Para construir esse algoritmo, utilizaremos as nossas habilidades de leitura atenta para descobrir um modo de capturar apenas o conteúdo textual da biografia.</p>
<p>Ao verificar o código-fonte do <emph>obo-t17800628-33.html</emph>, notará que a transcrição real não começa imediatamente. Na verdade, há um número de tags HTML e algumas informações de citação. Nesse caso, o conteúdo não começa antes da linha 81!</p>
<pre><code class="language-xml" xml:id="code_HTML-lista-palavras-1_0" type="block" corresp="code_HTML-lista-palavras-1_0.txt"/></pre>
<p>Estamos interessados apenas na transcrição em si e não nos metadados extras contidos nas tags. No entanto, irá notar que o final dos metadados corresponde ao início da transcrição. Isso torna a localização dos metadados uma marcação potencialmente útil para isolar o texto transcrito.</p>
<p>À primeira vista, percebemos que a transcrição do julgamento em si começa com uma tag HTML: <code type="inline">&lt;p&gt;</code>, que significa 'parágrafo'. Essa é coincidentemente a primeira tag de parágrafo no documento. Podemos usar isso para encontrar o ponto de partida do nosso texto transcrito. Temos sorte nesse caso porque essa tag é uma maneira confiável de encontrar o início do texto transcrito no julgamento (caso deseje, dê uma olhada em alguns outros julgamentos para verificar).</p>
<p>O texto do julgamento termina na linha 82 com outra tag HTML: <code type="inline">&lt;br/&gt;</code>, que significa uma quebra de linha. Essa é a última quebra de linha no documento. Essas duas tags (tag de primeiro parágrafo e última quebra de linha), portanto, nos oferecem uma forma de isolar o texto desejado. Sites bem formatados quase sempre terão uma forma única de sinalizar o fim de um conteúdo. Você frequentemente só precisa verificar de forma atenta.</p>
<p>A próxima tarefa é remover toda a marcação HTML que permanece mesclada ao conteúdo. Como sabe que tags HTML são sempre encontradas em pares correspondentes de parênteses angulares, é provavelmente uma aposta segura o fato de que, se remover tudo o que estiver entre parênteses angulares, todo o HTML será removido e restará somente a transcrição. Note que estamos assumindo que a transcrição não possuirá os símbolos matemáticos de "menor que" ou "maior que". Se Bowsey fosse um matemático, essa suposição não seria tão segura.</p>
<p>A seguir, descreve-se o algoritmo em palavras.</p>
<p>Para isolar o conteúdo:</p>
<ul>
<li>Fazer o download do texto transcrito</li>
<li>Buscar no HTML e guardar a localização da primeira tag <code type="inline">&lt;p&gt;</code></li>
<li>Buscar no HTML e guardar a localização da última tag <code type="inline">&lt;br/&gt;</code></li>
<li>Armazenar tudo que vier após a tag <code type="inline">&lt;p&gt;</code> e antes da tag <code type="inline">&lt;br/&gt;</code> numa string: <emph>pageContents</emph></li>
</ul>
<p>Neste ponto, temos o texto da transcrição do julgamento, além da marcação HTML. Em seguida:</p>
<ul>
<li>Verificar cada caractere na string <emph>pageContents</emph>, um por um</li>
<li>Se o caractere for um colchete angular esquerdo (&lt;), estamos dentro de uma tag e deve-se ignorar os caracteres subsequentes</li>
<li>Se o caractere for um colchete angular direito (&gt;), estamos deixando a tag; deve-se ignorar este caractere, mas verificar cada um dos caracteres subsequentes</li>
<li>Se não estivermos dentro de uma tag, adiciona-se cada caractere a uma nova variável: <emph>text</emph></li>
</ul>
<p>Finalmente:</p>
<ul>
<li>Separar a string de texto em uma lista de palavras individuais, que podem ser manipuladas posteriormente.</li>
</ul>
</div>
      <div type="2" n="4"><head>Isolar o Conteúdo Desejado</head>
<p>Os próximos passos utilizam os comandos de Python introduzidos na lição <link target="/pt/licoes/manipular-strings-python">Manipular strings com Python</link> para implementar a primeira metade do algoritmo: remover todo o conteúdo antes da tag <code type="inline">&lt;p&gt;</code> e depois da tag <code type="inline">&lt;br/&gt;</code>. Para recapitular, o algoritmo era o seguinte:</p>
<ul>
<li>Fazer o download do texto transcrito</li>
<li>Buscar no HTML e guardar a localização da primeira tag <code type="inline">&lt;p&gt;</code></li>
<li>Buscar no HTML e guardar a localização da última tag <code type="inline">&lt;br/&gt;</code></li>
<li>Armazenar tudo que vier após a tag <code type="inline">&lt;p&gt;</code> e antes da tag <code type="inline">&lt;br/&gt;</code> numa string: <emph>pageContents</emph></li>
</ul>
<p>Para fazer isso, você utilizará o método de string 'find', o método .rfind() (que encontra a última correspondência de algo) e criará uma nova substring contendo apenas o conteúdo desejado entre essas posições de índice.</p>
<p>Enquanto trabalha, desenvolverá ficheiros separados para armazenar o seu código. Um deles será chamado <code type="inline">obo.py</code> (para "Old Bailey Online"). Esse ficheiro conterá todo o código que deseja reutilizar; em outras palavras, <code type="inline">obo.py</code> é um módulo. Discutimos a ideia de módulo em <link target="/pt/licoes/reutilizacao-codigo-modularidade-python">Reutilização de código e modularidade em Python</link>, quando salvamos nossas funções em <code type="inline">cumprimento.py</code>.</p>
<p>Crie um novo ficheiro chamado <code type="inline">obo.py</code> e armazene-o no seu diretório <emph>programming-historian</emph>. Utilizaremos esse ficheiro para manter cópias das funções necessárias para processar o The Old Bailey Online. Digite ou copie o código a seguir no seu ficheiro:</p>
<pre><code class="language-python" xml:id="code_HTML-lista-palavras-1_1" type="block" corresp="code_HTML-lista-palavras-1_1.txt"/></pre>
<p>Crie um segundo ficheiro, <code type="inline">trial-content.py</code>, e salve o programa mostrado abaixo:</p>
<pre><code class="language-python" xml:id="code_HTML-lista-palavras-1_2" type="block" corresp="code_HTML-lista-palavras-1_2.txt"/></pre>
<p>Quando executar o <code type="inline">trial-content.py</code>, ele acessará a página web da transcrição do julgamento de Bowsey e depois verificará o módulo <code type="inline">obo.py</code> para buscar a função <emph>stripTags</emph>. Ele utilizará essa função para extrair tudo após a primeira tag <code type="inline">&lt;p&gt;</code> e antes da última tag <code type="inline">&lt;br/&gt;</code>. Com alguma sorte, esse deve ser o conteúdo textual da transcrição de Bowsey, além de alguma marcação HTML. Não se preocupe se a sua tela de Saída de Comando terminar em uma linha preta grossa. A tela de saída do Komodo Edit possui um número máximo de caracteres para exibição, após o qual os caracteres começarão a literalmente escrever uns sobre os outros na tela, dando a aparência de uma linha preta. Não se preocupe: o texto está lá, ainda que não consiga vê-lo; pode cortá-lo e colá-lo em um ficheiro de texto para verificar.</p>
<p>Vamos reservar um momento para ter certeza de que entendemos como <code type="inline">trial-contents.py</code> é capaz de usar as funções armazenadas em <code type="inline">obo.py</code>. A função <emph>stripTags</emph> que salvamos em <code type="inline">obo.py</code> requer um argumento. Em outras palavras, para que seja executada apropriadamente ela precisa que uma informação seja oferecida. Lembre-se do exemplo do cão treinado na lição anterior. Para latir, o cachorro precisa de duas coisas: ar e uma guloseima deliciosa. A função <emph>stripTags</emph> em <code type="inline">obo.py</code> precisa de uma coisa: a string chamada <emph>pageContents</emph>. Mas você perceberá que, quando chamamos <emph>stripTags</emph> no programa final (<code type="inline">trial-contents.py</code>), não há menção ao "<emph>pageContents</emph>". Em vez disso, a função recebe HTML como um argumento. Isso pode ser confuso para muitas pessoas quando começam a programar. Uma vez que uma função foi declarada, não precisamos usar o mesmo nome de variável quando chamamos a função. Desde que forneçamos o mesmo tipo de argumento, tudo deve funcionar bem, independente de como o chamarmos. Nesse caso, queríamos que <emph>pageContents</emph> usasse o conteúdo da nossa variável HTML. Você poderia ter passado qualquer string, inclusive uma que você insira diretamente entre aspas. Tente executar novamente <code type="inline">trial-content.py</code>, alterando o argumento de <emph>stripTags</emph> para "Eu gosto muito de cachorros" e veja o que acontece. Note que, dependendo de como defina a sua função (e o que ela faz), o seu argumento pode precisar ser algo que não seja uma string: um número inteiro (<emph>integer</emph>), por exemplo.</p>
</div>
      <div type="2" n="5"><head>Leituras sugeridas</head>
<ul>
<li>
Lutz, <emph>Learning Python</emph><ul>
<li>Ch. 7: Strings</li>
<li>Ch. 8: Lists and Dictionaries</li>
<li>Ch. 10: Introducing Python Statements</li>
<li>Ch. 15: Function Basics</li>
</ul>
</li>
</ul>
</div>
      <div type="2" n="6"><head>Sincronização de Código</head>
<p>Para acompanhar lições futuras, é importante ter os ficheiros e programas corretos no seu diretório “programming-historian”. No final de cada lição, é possível fazer o download do ficheiro zip “programming-historian” para ter a certeza de que o ficheiro correto está a ser utilizado. Observe que removemos os ficheiros desnecessários das lições anteriores. Seu diretório pode conter mais ficheiros e não há problema!</p>
<ul>
<li>programming-historian-2 (<link target="/assets/python-lessons2.zip">zip</link>)</li>
</ul>
</div>
    </body>
  </text>
</TEI>
