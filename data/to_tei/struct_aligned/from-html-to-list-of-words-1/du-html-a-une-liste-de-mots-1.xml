<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Du HTML à une liste de mots (partie 1)</title>
  <slug>du-html-a-une-liste-de-mots-1</slug>
  <original>from-html-to-list-of-words-1</original>
  <layout>lesson</layout>
  <collection>lessons</collection>
  <date>2012-07-17</date>
  <translation_date>2023-09-13</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford,Frederik Elwert</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Célian Ringwald</translator>
  <translation-editor>Alexandre Wauthier</translation-editor>
  <translation-reviewer>Marina Giardinetti,Marie Flesch</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/560</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Dans cette leçon en deux parties, nous allons utiliser les compétences acquises dans la leçon &amp;laquo;&amp;nbsp;Télécharger des pages web avec Python&amp;nbsp;&amp;raquo;, et voir comment supprimer les *balises HTML* de la page de la transcription du procès-verbal de Benjamin Bowsey en 1780 dans le but de créer un texte propre et réutilisable. Nous réaliserons cette tâche en utilisant les *opérateurs et méthodes de chaines de caractères* propres à Python, ainsi que nos compétences relatives à la *lecture attentive*. Nous introduirons ensuite les concepts de *boucles* et *d’instructions conditionnelles* afin de répéter notre processus de traitement et de tester certaines conditions nous permettant de séparer le contenu des balises HTML. Pour finir, nous convertirons les données obtenues et enregistrées sous la forme d’un texte sans balises HTML en une *liste de mots* qui pourra par la suite être triée, indexée et investie lors d’analyses statistiques.</abstract>
  <avatar_alt>Un homme qui imite une girafe</avatar_alt>
  <doi>10.46430/phfr0026</doi>
</metadata>
  <text xml:lang="fr">
    <body>
      <div type="2" n="1"><head>Objectifs de la leçon</head>
<p>Dans cette leçon en deux parties, nous allons utiliser les compétences acquises dans la leçon <link target="/fr/lecons/telecharger-des-pages-web-avec-python">Télécharger des pages web avec Python</link>, et voir comment supprimer les <emph>balises HTML</emph> de la page de la <link target="https://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33">transcription du procès-verbal de Benjamin Bowsey en 1780</link> dans le but de créer un texte propre et réutilisable. Nous réaliserons cette tâche en utilisant les <emph>opérateurs et méthodes de chaines de caractères</emph> propres à Python, ainsi que nos compétences relatives à la <link target="https://perma.cc/V4GX-9N5R"><emph>lecture attentive</emph></link>. Nous introduirons ensuite les concepts de <emph>boucles</emph> et <emph>d’instructions conditionnelles</emph> afin de répéter notre processus de traitement et de tester certaines conditions nous permettant de séparer le contenu des balises HTML. Pour finir, nous convertirons les données obtenues et enregistrées sous la forme d’un texte sans balises HTML en une <emph>liste de mots</emph> qui pourra par la suite être triée, indexée et investie lors d’analyses statistiques.</p>
</div>
      <div type="2" n="2"><head>Enjeux de la leçon</head>
<p>Pour rendre plus clair l’objectif de la séance, ouvrez le fichier <code type="inline">obo-t17800628-33.html</code> que vous avez créé lors de la leçon <link target="/fr/lecons/telecharger-des-pages-web-avec-python">Télécharger des pages web avec Python</link>.  <link target="/assets/obo-t17800628-33.html">Ouvrez cette page web et téléchargez son code source</link> si ce n’est pas le cas (via la commande Ctrl+S sur Windows ou ⌘-S sur Mac). Inspectez ensuite le code HTML de ce document. En fonction du navigateur web que vous avez, il est possible d’accéder au code source d’une page en cliquant sur l’onglet <code type="inline">Tools -&gt; Web Developer -&gt; Page Source</code>. Il est aussi généralement possible d’y accéder via les commandes Ctrl+U (Windows) ou ⌘-Option-U (Mac).</p>
<p>En parcourant le fichier, vous remarquerez que celui-ci est composé de balises HTML mélangées avec du texte. Si vous êtes néophyte en matière de développement web, nous vous recommandons de consulter les tutoriels de la W3 School et de la Mozilla Foundation :</p>
<ul>
<li>HTML : <link target="https://www.w3schools.com/html/">W3 School</link> / <link target="https://perma.cc/9NFS-5Z3G">Mozilla Fondation</link></li>
<li>CSS : <link target="https://perma.cc/6HLV-LBKQ">W3 School</link> / <link target="https://perma.cc/BR5N-BDEH">Mozilla Fondation</link></li>
</ul>
<p>Ces tutoriels vous permettront de vous familiariser avec la syntaxe de ces formats et de mieux comprendre le contexte d’utilisation des balises HTML lorsque vous les rencontrerez.</p>
<div type="3" n="2.1"><head>Matériel nécessaire au suivi de la leçon</head>
<ul>
<li>le fichier de la transcription du procès : <link target="/assets/obo-t17800628-33.html"><code type="inline">obo-t17800628-33.html</code></link></li>
<li>un éditeur de texte permettant de compiler du code Python. Dans la série de leçons d’introduction à Python du <emph>Programming Historian en français</emph>, nous utilisons Komodo Edit (cf. <link target="/fr/lecons/introduction-et-installation">la leçon d’introduction de la série</link>), mais <link target="https://perma.cc/X98A-KME8">il en existe beaucoup d’autres</link>.</li>
</ul>
</div></div>
      <div type="2" n="3"><head>Conception de l’algorithme</head>
<p>Puisque le but est de se défaire du balisage HTML, la première étape de ce tutoriel consiste donc à créer un algorithme nous permettant d’extraire seulement le texte de la transcription (sans balises HTML).</p>
<p>Un algorithme est un ensemble de procédures suffisamment détaillées pour être implémentées sur un ordinateur. Lors de la conception d’un algorithme, il est conseillé dans un premier temps, de poser sur le papier son fonctionnement. C’est une manière d’expliciter ce que l’on souhaite faire avant de traduire cela en un code informatique. Pour construire cet algorithme, une lecture vigilante de la page et de sa structure sera notamment nécessaire afin de pouvoir envisager par la suite un moyen de capturer le contenu du compte rendu du procès.</p>
<p>À la lecture du code source de <code type="inline">obo-t17800628-33.html</code>, vous remarquerez que le contenu de la transcription n’est pas visible dès le début du fichier. Au lieu de cela, vous trouverez de nombreuses balises HTML relatives aux métadonnées. Le contenu qui nous intéresse n’est alors visible qu’à partir de la ligne 81 !</p>
<pre><code class="language-html" xml:id="code_du-html-a-une-liste-de-mots-1_0" type="block" corresp="code_du-html-a-une-liste-de-mots-1_0.txt"/></pre>
<p>Nous nous intéressons uniquement à la transcription du procès, et non pas aux métadonnées contenues dans les balises. Toutefois, vous remarquerez que les différentes parties de la transcription débutent après ces métadonnées. L’emplacement de ces balises est donc potentiellement un indice utile nous permettant d’isoler le texte de la transcription.</p>
<p>En un coup d’œil, vous remarquerez que la transcription du procès commence avec une balise HTML : <code type="inline">&lt;p&gt;</code>, qui marque ici le début d’un paragraphe. Il s’agit là du premier paragraphe de notre document. Nous allons donc utiliser cette information pour identifier le début du texte de la transcription. Dans le cas présent, nous avons de la chance, car il s’avère que cette balise est un moyen fiable nous permettant de repérer le début d’une partie de la transcription (vous pouvez vérifier les autres parties du procès et vous verrez que c’est la même chose).</p>
<p>Le texte du procès se termine à la ligne 82 avec une autre balise HTML : <code type="inline">&lt;br/&gt;</code>, qui indique un passage à la ligne. Il s’agit ici du dernier passage à la ligne du document. Ces deux balises (la balise de début de paragraphe et le dernier saut de ligne) nous offrent un moyen d’isoler le texte que nous ciblons. Les sites web bien conçus ont la plupart du temps une syntaxe unique permettant de signaler la fin d’un contenu. En général, il suffit de bien inspecter les pages / le code HTML pour repérer ces indices.</p>
<p>La prochaine étape est donc de supprimer les balises HTML contenues au sein du contenu textuel. Maintenant, vous savez que les balises HTML se trouvent toujours entre deux chevrons. Il y a fort à parier que si vous supprimez tout ce qui est contenu entre chevrons, vous supprimerez alors par la même occasion tout ce qui est attribué à la syntaxe HTML. Réaliser cette opération permettrait alors d'extraire seulement le contenu des transcriptions. Notez que nous faisons ici l’hypothèse que celles-ci ne contiennent pas de symboles mathématiques, tels que « inférieur à » ou
« supérieur à ». Si Bowsey était un mathématicien, cette hypothèse serait alors plus fragile.</p>
<p>Nous allons maintenant décrire la procédure de notre algorithme explicitement en français :</p>
<p>Pour isoler le contenu de la transcription :</p>
<ul>
<li>Charger le document HTML contenant la transcription.</li>
<li>Chercher dans le code HTML et mémoriser l’emplacement de la première balise <code type="inline">&lt;p&gt;</code>.</li>
<li>Chercher dans le code HTML et mémoriser l’emplacement de la dernière balise <code type="inline">&lt;/br&gt;</code>.</li>
<li>Sauvegarder dans une variable de type <emph>chaine de caractères</emph> nommée <code type="inline">pageContents</code> tout ce qui se situe entre la balise <code type="inline">&lt;p&gt;</code> et <code type="inline">&lt;/br&gt;</code>.</li>
</ul>
<p>Nous disposons maintenant de la transcription du texte, qui contient pour le moment encore quelques balises HTML. Pour nettoyer celui-ci, nous allons donc :</p>
<ul>
<li>Inspecter un à un chaque caractère de la chaine <code type="inline">pageContents</code>.</li>
<li>Si le caractère passé en revue est un chevron ouvrant (<code type="inline">&lt;</code>), nous sommes donc à partir de celui au sein d’une balise HTML et nous allons ignorer les prochains caractères.</li>
<li>Si le caractère passé en revue est un chevron fermant (<code type="inline">&gt;</code>), nous ressortons d’une balise HTML. Nous ignorerons ce caractère, mais serons à partir de celui-ci attentifs aux prochains.</li>
<li>Si nous ne sommes pas à l’intérieur d’une balise HTML, nous ajouterons alors le caractère courant dans une nouvelle variable : <code type="inline">text</code>.</li>
</ul>
<p>Enfin :</p>
<ul>
<li>Nous découperons notre chaine de caractères (<code type="inline">pageContents</code>) en une liste de mots que nous utiliserons ensuite.</li>
</ul>
</div>
      <div type="2" n="4"><head>Isoler le contenu de la transcription</head>
<p>La suite de ce tutoriel tirera parti des commandes Python introduites dans la leçon <link target="/fr/lecons/manipuler-chaines-caracteres-python">Manipuler des chaines de caractères en Python</link>, notamment dans la première partie de notre algorithme, afin de supprimer tous les caractères avant la balise <code type="inline">&lt;p&gt;</code> et après la balise <code type="inline">&lt;/br&gt;</code>.</p>
<p>Récapitulons, notre algorithme :</p>
<ul>
<li>Chargera le texte de la transcription.</li>
<li>Cherchera dans le code HTML la location de la première balise <code type="inline">&lt;p&gt;</code> et enregistrera sa position.</li>
<li>Cherchera dans le code HTML la location de la dernière balise <code type="inline">&lt;/br&gt;</code> et enregistrera sa position.</li>
<li>Sauvegardera tout ce qui se situe après la balise <code type="inline">&lt;p&gt;</code> et avant la balise <code type="inline">&lt;/br&gt;</code> dans une <emph>chaine de caractères</emph> : <code type="inline">pageContents</code>.</li>
</ul>
<p>Pour réaliser cela, nous utiliserons les <emph>méthodes de chaine de caractères</emph> <code type="inline">find</code> (qui renvoie la première position dans une chaine d’un caractère donné) et <code type="inline">.rfind()</code> (qui renvoie la dernière position dans une chaine d’un caractère donné). Cela nous permettra de récupérer la sous-chaine de caractères contenant le contenu textuel compris entre les deux indices renvoyés par ces méthodes.</p>
<p>Pour illustrer et comprendre comment ces méthodes fonctionnent, vous pouvez tester cet exemple, qui renvoie la position du premier paragraphe et celle du dernier, à travers la recherche des balises <code type="inline">&lt;p&gt;</code> et<code type="inline">&lt;/br&gt;</code> :</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-1_1" type="block" corresp="code_du-html-a-une-liste-de-mots-1_1.txt"/></pre>
<p>Au fur et à mesure de l’implémentation, nous prendrons soin de bien séparer nos fichiers de travail. Nous appelons <code type="inline">obo.py</code> (pour « Old Bailey Online ») le fichier dans lequel nous inscrivons le code que nous souhaiterons réutiliser ; <code type="inline">obo.py</code> sera alors un module. Nous avons abordé la notion de module dans le tutoriel <link target="/fr/lecons/reutilisation-de-code-et-modularite">Réutilisation de code et modularité</link> dans lequel nous avions enregistré nos fonctions dans un fichier nommé <code type="inline">greet.py</code>.</p>
<p>Créez donc un nouveau fichier nommé <code type="inline">obo.py</code> et sauvegardez-le dans votre répertoire <code type="inline">programming-historian</code>. Nous utiliserons ce fichier pour faire appel aux fonctions dont nous aurons besoin durant le traitement de The Old Bailey Online. Entrez ou copiez le code suivant de votre fichier.</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-1_2" type="block" corresp="code_du-html-a-une-liste-de-mots-1_2.txt"/></pre>
<p>Créez ensuite un nouveau fichier, <code type="inline">trial-content.py</code>, dans lequel vous copierez par la suite le code suivant :</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-1_3" type="block" corresp="code_du-html-a-une-liste-de-mots-1_3.txt"/></pre>
<p>Lorsque vous exécutez <code type="inline">trial-content.py</code>, le programme ira dans un premier temps chercher le contenu de la page web de la transcription du procès de Bowsey, puis ira rechercher dans le module <code type="inline">obo.py</code> la fonction <code type="inline">stripTags</code> . Le programme utilisera cette fonction pour extraire le contenu compris entre la première balise <code type="inline">&lt;p&gt;</code> et la dernière balise <code type="inline">&lt;/br&gt;</code>. Si tout est correct, cela nous renverra bien le contenu de la transcription de Bowsey, avec, comme nous le prévoyons, quelques balises HTML. </p>
<p>Il se peut que vous obteniez en réponse une épaisse ligne noire dans votre sortie de commande, mais ne vous inquiétiez pas. La sortie de l’éditeur de texte Komodo Edit est limitée à un nombre maximum de caractères qu’il est possible d’afficher, après lequel les caractères s’écriront littéralement les uns sur les autres à l’écran, donnant l’apparence d’une tache noire. Pas de panique, le texte est dans ce cas bien ici, mais vous ne pouvez pas le lire ; afin de résoudre ce problème d’affichage, vous pouvez copier/coller ce texte dans un nouveau fichier, à titre de vérification.</p>
<p>Prenons maintenant un moment pour nous assurer que vous avez bien compris comment fonctionne <code type="inline">trial-contents.py</code>, qui est capable d’utiliser les fonctions présentes dans <code type="inline">obo.py</code>. La fonction <code type="inline">stripTags</code> du module <code type="inline">obo.py</code> a besoin d’être lancée avec un argument. En d’autres termes, pour lancer cette fonction correctement, nous avons donc besoin de lui fournir cette information. La fonction <code type="inline">stripTags</code> de <code type="inline">obo.py</code> a besoin d’une seule chose : une chaine de caractères nommée <code type="inline">pageContents</code>. Mais vous remarquerez que lorsque l’on appelle la fonction <code type="inline">stripTags</code> à la fin de notre programme (<code type="inline">trialcontents.py</code>) nous ne mentionnons pas de variable nommée <code type="inline">pageContents</code>. Au lieu de cela, la fonction reçoit une variable nommée HTML comme argument. Cela peut être déroutant pour de nombreuses personnes lorsqu’elles commencent à programmer. Quand l’on déclare une fonction et ses arguments, nous ne sommes pas obligé⸱e⸱s de nommer les variables d’entrée de la même manière. Tant que le type de l’argument est le correct, tout devrait fonctionner comme prévu, peu importe le nom que nous lui donnons. </p>
<p>Dans notre cas, nous souhaitons faire passer à l’argument <code type="inline">pageContents</code> le contenu de notre variable <emph>HTML</emph>. Vous auriez pu lui passer n’importe quelle chaine de caractères, y compris celle que vous aviez saisie directement entre les parenthèses. Essayez de relancer <code type="inline">trial-content.py</code>, en remplaçant l’argument fourni à <code type="inline">stripTags</code> par « J’aime beaucoup les chiens » et observez ce qui se passe. Notez qu’en fonction de la manière dont vous définissez votre fonction (et ce qu’elle est censée faire), votre argument peut être autre chose qu’une chaine de caractères : un <emph>entier</emph>, par exemple. Pour mieux appréhender les différents types de données disponibles à travers Python, nous vous invitons à consulter <link target="https://perma.cc/QH3X-BS79">les cours de Zeste de Savoir</link> sur le sujet.</p>
</div>
      <div type="2" n="5"><head>Lectures suggérées</head>
<ul>
<li>
Lutz, Mark. <emph>Learning Python</emph> (5th edition). O’Reilly Media, Inc., 2013.<ul>
<li>Ch. 7: Strings</li>
<li>Ch. 8: Lists and Dictionaries</li>
<li>Ch. 10: Introducing Python Statements</li>
<li>Ch. 15: Function Basics</li>
</ul>
</li>
</ul>
</div>
      <div type="2" n="6"><head>Synchronisation du code</head>
<p>Pour suivre les leçons à venir, il est important que vous ayez les bons fichiers et programmes dans votre répertoire <code type="inline">programming-historian</code>. À la fin de chaque chapitre, vous pouvez télécharger le fichier zip contenant le matériel de cours du the programming-historian afin de vous assurer d’avoir le bon code. Notez que nous avons supprimé les fichiers inutiles des leçons précédentes. Votre répertoire peut contenir plus de fichiers ; ce n’est pas grave, l’important est de s’assurer que les codes que nous utiliserons par la suite fonctionneront.</p>
<ul>
<li><link target="/assets/python-lessons2.zip"><code type="inline">programming-historian-2.zip</code></link></li>
</ul>
</div>
    </body>
  </text>
</TEI>
