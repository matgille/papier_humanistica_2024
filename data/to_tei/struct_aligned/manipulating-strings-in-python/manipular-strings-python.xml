<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Manipular strings com Python</title>
  <layout>lesson</layout>
  <slug>manipular-strings-python</slug>
  <date>2012-07-17</date>
  <translation_date>2021-09-10</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Mariana Affonso Penna</translator>
  <translation-editor>Jimmy Medeiros</translation-editor>
  <translation-reviewer>Joana Vieira Paulino,Felipe Lamarca</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/403</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Esta lição é uma breve introdução às técnicas de manipulação de strings com Python</abstract>
  <original>manipulating-strings-in-python</original>
  <avatar_alt>Um homem a tocar guitarra</avatar_alt>
  <doi>10.46430/phpt0016</doi>
</metadata>
  <text xml:lang="pt">
    <body>
      <div type="2" n="1"><head>Objetivos da lição</head>
<p>Esta lição é uma breve introdução às técnicas de manipulação de <link target="https://pt.wikipedia.org/wiki/Cadeia_de_caracteres">strings</link> (cadeia de caracteres) com
Python. É essencial saber manipular strings para desenvolver a maioria das tarefas de processamento de textos. Se quiser experimentar as lições a seguir, você pode escrever e executar programas curtos, como fizemos nas lições anteriores da série, ou pode abrir um shell (terminal) Python para testá-los na linha de comandos.</p>
</div>
      <div type="2" n="2"><head>Manipulação de Strings com Python</head>
<p>Se já foi exposto a outra linguagem de programação antes, pode ter aprendido que precisa <emph>declarar</emph> ou <emph>especificar os tipos das variáveis</emph> antes de armazenar qualquer coisa nelas. Isso não é necessário ao trabalhar com strings no Python. Podemos criar uma string simplesmente colocando o conteúdo entre aspas com um sinal de igual (=):</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_0" type="block" corresp="code_manipular-strings-python_0.txt"/></pre>
</div>
      <div type="2" n="3"><head>Operadores de string: somar e multiplicar</head>
<p>String é um tipo de objeto que consiste numa série de caracteres. O Python já sabe como lidar com várias representações de uso geral e poderosas, incluindo strings. Uma maneira de manipular strings é usar <emph>operadores de string</emph>.
Esses operadores são representados por símbolos que você, provavelmente, associa à matemática, como +, -, *, / e =. Quando usados com strings, eles executam ações semelhantes, mas não iguais, às suas contrapartes matemáticas. </p>
<div type="3" n="3.1"><head>Concatenar</head>
<p>Este termo significa unir strings. O processo é conhecido como <emph>concatenação</emph> de strings e isso é feito usando o operador mais (+).
Observe que você deve explicitar onde deseja que os espaços em branco ocorram, colocando-os também entre aspas simples.</p>
<p>Nesse exemplo, a variável "message1" recebe o conteúdo "olá mundo".</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_1" type="block" corresp="code_manipular-strings-python_1.txt"/></pre>
</div><div type="3" n="3.2"><head>Multiplicar</head>
<p>Se quiser uma concatenação repetida de uma mesma string, use o operador de multiplicação (*). Nesse exemplo, a string <emph>message2a</emph> receberá o conteúdo "olá" três vezes; a string <emph>message2b</emph> receberá o conteúdo "mundo"; a seguir imprimimos ambas as strings.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_2" type="block" corresp="code_manipular-strings-python_2.txt"/></pre>
</div><div type="3" n="3.3"><head>Apêndice</head>
<p>E se quiser adicionar material no final de uma string sucessivamente?
Existe um operador especial para isso (+=).</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_3" type="block" corresp="code_manipular-strings-python_3.txt"/></pre>
</div></div>
      <div type="2" n="4"><head>Métodos de String: Encontrar, Modificar</head>
<p>Além dos operadores, dezenas de métodos de string permitem manipular as strings no Python. Usados sozinhos ou em combinação, esses métodos podem fazer praticamente qualquer coisa que possa imaginar com elas.
A boa notícia é que pode consultar uma lista de Métodos de String no site do Python, <link target="https://docs.python.org/2/library/stdtypes.html#string-methods">Python website</link>, incluindo informações sobre como usar cada um de maneira adequada. Para garantir que tenha uma compreensão básica dos métodos de string, segue um panorama acerca de alguns dos mais comumente usados: </p>
<div type="3" n="4.1"><head>Comprimento (Length)</head>
<p>Pode determinar o número de caracteres numa string usando <code type="inline">len</code>. Observe que o espaço em branco conta como um caractere separado.
Nota da tradutora: 'len' não é um método de string, como indicado na lição original, mas uma função built-in do Python que se aplica a qualquer tipo de objeto que possua comprimento.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_4" type="block" corresp="code_manipular-strings-python_4.txt"/></pre>
</div><div type="3" n="4.2"><head>Encontrar</head>
<p>Pode procurar uma string para uma <emph>substring</emph> e o seu programa retornará a posição de índice inicial dessa substring. Isso é útil para o processamento posterior. Observe que os índices são numerados da esquerda para a direita e que a contagem começa com a posição 0, não 1.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_5" type="block" corresp="code_manipular-strings-python_5.txt"/></pre>
<p>Se a substring não estiver presente, o programa retornará o valor -1.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_6" type="block" corresp="code_manipular-strings-python_6.txt"/></pre>
</div><div type="3" n="4.3"><head>Minúscula</head>
<p>Às vezes, é útil converter uma string em minúsculas. Por exemplo, se padronizarmos a caixa, será mais fácil para o computador reconhecer que "Ocasionalmente" e "ocasionalmente" são a mesma palavra. </p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_7" type="block" corresp="code_manipular-strings-python_7.txt"/></pre>
<p>O efeito oposto, elevando os caracteres para maiúsculas, pode ser obtido alterando <code type="inline">.lower()</code> para <code type="inline">.upper()</code>.</p>
</div><div type="3" n="4.4"><head>Substituir</head>
<p>Se precisar substituir uma substring em toda a string, pode fazê-lo com o método <code type="inline">replace</code>.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_8" type="block" corresp="code_manipular-strings-python_8.txt"/></pre>
</div><div type="3" n="4.5"><head>Recortar</head>
<p>Se deseja recortar (<code type="inline">slice</code>) partes indesejadas do início ou do fim de uma string, pode fazê-lo criando uma substring. O mesmo tipo de técnica também permite dividir uma string longa em componentes mais gerenciáveis.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_9" type="block" corresp="code_manipular-strings-python_9.txt"/></pre>
<p>Pode substituir as variáveis pelos números inteiros usados neste exemplo.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_10" type="block" corresp="code_manipular-strings-python_10.txt"/></pre>
<p>Isto torna muito mais fácil usar este método em conjunto com o método <code type="inline">find</code> (encontrar) como no próximo exemplo, que verifica a letra "d" nos primeiros seis caracteres de "Olá Mundo" e nos diz corretamente que não está lá (-1). Essa técnica é muito mais útil em strings mais longas - documentos completos, por exemplo. Observe que a ausência de um número inteiro antes dos dois pontos significa que queremos começar no início da string. Poderíamos usar a mesma técnica para dizer ao programa para ir até ao fim, não colocando nenhum número inteiro após os dois pontos. E lembre-se, as posições do índice começam a contar a partir de 0 em vez de 1.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_11" type="block" corresp="code_manipular-strings-python_11.txt"/></pre>
<p>Existem muitos mais métodos de string, mas os supracitados são um bom começo. Observe que, neste último exemplo, usamos aspas em vez de parênteses. Essa diferença na <emph>sintaxe</emph> sinaliza uma distinção importante.
No Python, os parênteses são geralmente usados para <emph>passar um argumento</emph> para uma função. Então, quando vemos algo como</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_12" type="block" corresp="code_manipular-strings-python_12.txt"/></pre>
<p>significa passar a string <emph>message7</emph>  para a função <code type="inline">len</code> e, então, enviar o valor retornado dessa função para a instrução <code type="inline">print</code> a ser impressa. Se uma função pode ser chamada sem um argumento, geralmente precisa de incluir um par de parênteses vazios após o nome da função de qualquer maneira. Vimos, também, um exemplo disso:</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_13" type="block" corresp="code_manipular-strings-python_13.txt"/></pre>
<p>Esta instrução diz ao Python para aplicar a função caixa baixa, <code type="inline">lower</code>, à string <emph>message7</emph> e armazenar o valor retornado na string <emph>message7a</emph>.</p>
<p>As aspas têm um propósito diferente. Se pensa numa string como uma sequência de caracteres e deseja acessar o conteúdo da string por sua localização dentro da sequência, então precisa de alguma forma de dar ao Python uma localização dentro de uma sequência. Isso é o que as aspas fazem: indicam uma localização inicial e final dentro de uma sequência, como vimos ao usar o método <code type="inline">slice</code>.</p>
</div></div>
      <div type="2" n="5"><head>Sequências de Escape</head>
<p>O que faz quando precisa de incluir aspas dentro de uma string?
Não quer que o interpretador Python entenda errado e termine a string quando encontrar um desses caracteres. Para evitar o problema, pode colocar uma barra invertida (\) antes das aspas para que ela não termine a string. Estas são conhecidas como sequências de escape.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_14" type="block" corresp="code_manipular-strings-python_14.txt"/></pre>
<pre><code class="language-python" xml:id="code_manipular-strings-python_15" type="block" corresp="code_manipular-strings-python_15.txt"/></pre>
<p>Duas outras sequências de escape permitem imprimir tabulações e novas linhas:</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_16" type="block" corresp="code_manipular-strings-python_16.txt"/></pre>
</div>
      <div type="2" n="6"><head>Leitura Sugerida</head>
<ul>
<li>
Lutz, <emph>Learning Python</emph><ul>
<li>Ch. 7: Strings</li>
<li>Ch. 8: Lists and Dictionaries</li>
<li>Ch. 10: Introducing Python Statements</li>
<li>Ch. 15: Function Basics</li>
</ul>
</li>
</ul>
</div>
      <div type="2" n="7"><head>Sincronização do Código</head>
<p>Para acompanhar lições futuras, é importante ter os ficheiros e programas corretos no seu diretório “programming-historian”. No final de cada lição, é possível fazer o download do ficheiro zip “programming-historian” para ter a certeza de que o ficheiro correto está a ser utilizado. Observe que removemos os ficheiros desnecessários das lições anteriores. Seu diretório pode conter mais ficheiros e não há problema!</p>
<ul>
<li>programming-historian-1 (<link target="/assets/python-lessons1.zip">zip</link>)</li>
</ul>
</div>
    </body>
  </text>
</TEI>
