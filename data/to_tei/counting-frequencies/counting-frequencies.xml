<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="counting-frequencies" type="original">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Counting Word Frequencies with Python</title>
                <author role="original_author">
                    <persName>William J. Turkel</persName>
                    <persName>Adam Crymble</persName>
                </author>
                <editor role="reviewers">
                    <persName>Jim Clifford</persName>
                    <persName>Frederik Elwert</persName>
                </editor>
                <editor role="editors">Miriam Posner</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <idno type="doi">10.46430/phen0003</idno>
                <date type="published">07/17/2012</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. This lesson is original. Available translations are the following:<ref type="translations" target="#decomptes-de-frequences-de-mots-en-python #contar-frecuencias #contar-frequencias-palavras-python"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>Counting the frequency of specific words in a list can provide illustrative data. This lesson will teach you Python's easy way to count such frequencies.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">python</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="en">
        <body>
            <div type="2">
                <head>Lesson Goals</head>
                <p>Your list is now clean enough that you can begin analyzing its contents
in meaningful ways. Counting the frequency of specific words in the list
can provide illustrative data. Python has an easy way to count
frequencies, but it requires the use of a new type of variable: the
<emph>dictionary</emph>. Before you begin working with a dictionary, consider the
processes used to calculate frequencies in a list.</p>
                <div type="3">
                    <head>Files Needed For This Lesson</head>
                    <list type="unordered">
                        <item>
                            <code rend="inline">obo.py</code>
                        </item>
                    </list>
                    <p>If you do not have these files, you can
download a (<ref target="/assets/python-lessons4.zip">zip</ref>) file containing all of the code from the previous lessons in this series.</p>
                </div>
            </div>
            <div type="2">
                <head>Frequencies</head>
                <p>Now we want to count the frequency of each word in our list. You’ve
already seen that it is easy to process a list by using a <code rend="inline">for</code> loop. Try
saving and executing the following example. Recall that <code rend="inline">+=</code> tells the
program to append something to the end of an existing variable.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_0" corresp="code_counting-frequencies_0.txt" rend="block"/>
                </ab>
                <p>Here, we start with a string and split it into a list, as we’ve done
before. We then create an (initially empty) list called <emph>wordfreq</emph>, go
through each word in the <emph>wordlist</emph>, and count the number of times that
word appears in the whole list. We then add each word's count to our
<emph>wordfreq</emph> list. Using the <code rend="inline">zip</code> operation, we are able to match the first
word of the word list with the first number in the frequency list, the
second word and second frequency, and so on. We end up with a list of
word and frequency pairs. The <code rend="inline">str</code> function converts any object to a
string so that it can be printed.</p>
                <p>You should get something like this:</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_1" corresp="code_counting-frequencies_1.txt" rend="block"/>
                </ab>
                <p>It will pay to study the above code until you understand it before
moving on.</p>
                <p>Python also includes a very convenient tool called a <ref target="http://docs.python.org/tutorial/datastructures.html#list-comprehensions">list
comprehension</ref>, which can be used to do the same thing as the <code rend="inline">for</code> loop
more economically.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_2" corresp="code_counting-frequencies_2.txt" rend="block"/>
                </ab>
                <p>If you study this list comprehension carefully, you will discover that
it does exactly the same thing as the <code rend="inline">for</code> loop in the previous example,
but in a condensed manner. Either method will work fine, so use the
version that you are most comfortable with.</p>
                <p>Generally it is wise to use code you understand rather than code that runs quickest.</p>
                <p>At this point we have a list of pairs, where each pair contains a word
and its frequency. This list is a bit redundant. If 'the' occurs 500
times, then this list contains five hundred copies of the pair ('the',
500). The list is also ordered by the words in the original text, rather
than listing the words in order from most to least frequent. We can
solve both problems by converting it into a dictionary, then printing
out the dictionary in order from the most to the least commonly
occurring item.</p>
            </div>
            <div type="2">
                <head>Python Dictionaries</head>
                <p>Both strings and lists are sequentially ordered, which means that you
can access their contents by using an index, a number that starts at 0.
If you have a list containing strings, you can use a pair of indexes to
access first a particular string in the list, and then a particular
character within that string. Study the examples below.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_3" corresp="code_counting-frequencies_3.txt" rend="block"/>
                </ab>
                <p>To keep track of frequencies, we’re going to use another type of Python
object, a dictionary. The dictionary is an <emph>unordered</emph> collection of
objects. That means that you can't use an index to retrieve elements
from it. You can, however, look them up by using a key (hence the name
"dictionary"). Study the following example.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_4" corresp="code_counting-frequencies_4.txt" rend="block"/>
                </ab>
                <p>Dictionaries might be a bit confusing to a new programmer. Try to think
of it like a language dictionary. If you don’t know (or remember)
exactly how "bijection" differs from "surjection" you can look the two
terms up in the <emph>Oxford English Dictionary</emph>. The same principle applies
when you <code rend="inline">print(d['hello']);</code> except, rather than print a literary
definition it prints the value associated with the keyword 'hello', as
defined by you when you created the dictionary named <emph>d</emph>. In this case,
that value is "0".</p>
                <p>Note that you use curly braces to define a dictionary, but square
brackets to access things within it. The <code rend="inline">keys</code> operation returns a list
of keys that are defined in the dictionary.</p>
            </div>
            <div type="2">
                <head>Word-Frequency Pairs</head>
                <p>Building on what we have so far, we want a function that can convert a
list of words into a dictionary of word-frequency pairs. The only new
command that we will need is <code rend="inline">dict</code>, which makes a dictionary from a list
of pairs. Copy the following and add it to the <code rend="inline">obo.py</code> module.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_5" corresp="code_counting-frequencies_5.txt" rend="block"/>
                </ab>
                <p>We are also going to want a function that can sort a dictionary of
word-frequency pairs by descending frequency. Copy this and add it to
the <code rend="inline">obo.py</code> module, too.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_6" corresp="code_counting-frequencies_6.txt" rend="block"/>
                </ab>
                <p>We can now write a program which takes a URL and returns word-frequency
pairs for the web page, sorted in order of descending frequency. Copy
the following program into Komodo Edit, save it as <code rend="inline">html-to-freq.py</code> and
execute it. Study the program and its output carefully before
continuing.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_7" corresp="code_counting-frequencies_7.txt" rend="block"/>
                </ab>
            </div>
            <div type="2">
                <head>Removing Stop Words</head>
                <p>When we look at the output of our <code rend="inline">html-to-freq.py</code> program, we see that
a lot of the most frequent words in the text are function words like
"the", "of", "to" and "and".</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_8" corresp="code_counting-frequencies_8.txt" rend="block"/>
                </ab>
                <p>These words are usually the most common in any English language text, so
they don't tell us much that is distinctive about Bowsey's trial. In
general, we are more interested in finding the words that will help us
differentiate this text from texts that are about different subjects. So
we're going to filter out the common function words. Words that are
ignored like this are known as stop words. We’re going to use the
following list, adapted from one posted online by <ref target="http://ir.dcs.gla.ac.uk/resources/linguistic_utils/stop_words">computer scientists
at Glasgow</ref>. Copy it and put it at the beginning of the <code rend="inline">obo.py</code>
library that you are building.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_9" corresp="code_counting-frequencies_9.txt" rend="block"/>
                </ab>
                <p>Now getting rid of the stop words in a list is as easy as using another
list comprehension. Add this function to the <code rend="inline">obo.py</code> module, too.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_10" corresp="code_counting-frequencies_10.txt" rend="block"/>
                </ab>
            </div>
            <div type="2">
                <head>Putting it All Together</head>
                <p>Now we have everything we need to determine word frequencies for web
pages. Copy the following to Komodo Edit, save it as <code rend="inline">html-to-freq-2.py</code>
and execute it.</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_11" corresp="code_counting-frequencies_11.txt" rend="block"/>
                </ab>
                <p>If all went well, your output should look like this:</p>
                <ab>
                    <code lang="language-python" xml:id="code_counting-frequencies_12" corresp="code_counting-frequencies_12.txt" rend="block"/>
                </ab>
            </div>
            <div type="2">
                <head>Suggested Readings</head>
                <p>Lutz, Learning Python</p>
                <list type="unordered">
                    <item>Ch. 9: Tuples, Files, and Everything Else</item>
                    <item>Ch. 11: Assignment, Expressions, and print</item>
                    <item>Ch. 12: if Tests</item>
                    <item>Ch. 13: while and for Loops</item>
                </list>
                <p>Pilgrim, Diving into Python</p>
                <list type="unordered">
                    <item>Ch. 7: <ref target="https://web.archive.org/web/20180416143856/http://www.diveintopython.net/regular_expressions/index.html">Regular Expressions</ref>
                    </item>
                </list>
                <div type="3">
                    <head>Code Syncing</head>
                    <p>To follow along with future lessons it is important that you have the
right files and programs in your "programming-historian" directory. At
the end of each lesson in this series you can download the "programming-historian" zip
file to make sure you have the correct code.</p>
                    <list type="unordered">
                        <item>programming-historian-5 (<ref target="/assets/python-lessons5.zip">zip sync</ref>)</item>
                    </list>
                </div>
            </div>
        </body>
    </text>
</TEI>
