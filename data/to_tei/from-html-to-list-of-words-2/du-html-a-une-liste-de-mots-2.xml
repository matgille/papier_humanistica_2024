<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Du HTML &#224; une liste de mots (partie 2)</title>
  <slug>du-html-a-une-liste-de-mots-2</slug>
  <original>from-html-to-list-of-words-2</original>
  <layout>lesson</layout>
  <collection>lessons</collection>
  <date>2012-07-17</date>
  <translation_date>2023-11-09</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford,Frederik Elwert</reviewers>
  <editors>Miriam Posner</editors>
  <translator>C&#233;lian Ringwald</translator>
  <translation-editor>&#201;milien Schultz</translation-editor>
  <translation-reviewer>B&#233;atrice Mazoyer,Florian Barras</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/584</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Dans cette le&#231;on, nous allons impl&#233;menter l'algorithme d&#233;couvert dans la le&#231;on &amp;laquo;&amp;nbsp;Du HTML &#224; une liste de mots, partie 1&amp;nbsp;&amp;raquo;, afin d'apprendre &#224; d&#233;couper une chaine de caract&#232;res en une liste de mots.</abstract>
  <avatar_alt>Un soldat au garde-&#224;-vous et un homme moqueur</avatar_alt>
  <doi>10.46430/phfr0028</doi>
</metadata>
  <text>
    <body>
      <div n="1"><head>Objectifs de la le&#231;on</head>
<p>Dans cette le&#231;on, nous allons impl&#233;menter l&#8217;algorithme dont nous avons parl&#233; dans <link target="/fr/lecons/du-html-a-une-liste-de-mots-1">la premi&#232;re partie</link> de cette le&#231;on. Nous avons jusque-l&#224; pu &#233;crire une proc&#233;dure chargeant le contenu d&#8217;une page HTML et retournant le contenu pr&#233;sent entre la premi&#232;re balise <code type="inline">&lt;p&gt;</code> et la derni&#232;re balise <code type="inline">&lt;br/&gt;</code>. </p>
<p>La seconde partie de notre algorithme devra inspecter un &#224; un chaque caract&#232;re de la chaine <code type="inline">pageContents</code>&#160;:   </p>
<ul>
<li>Si le caract&#232;re est un crochet ouvrant (<code type="inline">&lt;</code>), nous sommes alors &#224; l&#8217;int&#233;rieur d&#8217;une balise&#160;: nous ignorons donc ce caract&#232;re et nous ignorerons aussi les suivants jusqu&#8217;&#224; ce que nous soyons &#224; la fin de la balise&#160;;   </li>
<li>Si le caract&#232;re est un crochet fermant (<code type="inline">&gt;</code>) cela signifie que nous sommes toujours dans une balise mais que nous allons ressortir de celle-ci&#160;: nous ignorons ce caract&#232;re et inspecterons alors avec attention les suivants&#160;;   </li>
<li>Si nous ne sommes pas dans une balise, nous ajoutons alors le caract&#232;re courant &#224; une variable appel&#233;e <code type="inline">text</code>;</li>
</ul>
<p>Nous d&#233;couperons ensuite la chaine de caract&#232;res <code type="inline">text</code> en une liste de mots que nous manipulerons par la suite.</p>
<div n="2"><head>Fichiers n&#233;cessaires au suivi de la le&#231;on</head>
<ul>
<li><code type="inline">obo.py</code></li>
<li><code type="inline">trial-content.py</code></li>
</ul>
<p>Si vous n&#8217;avez pas d&#233;j&#224; ces fichiers, vous pouvez t&#233;l&#233;charger le fichier <link target="/assets/python-lessons2.zip"><code type="inline">python-lessons2.zip</code></link> issu de la le&#231;on pr&#233;c&#233;dente.</p>
</div></div>
      <div n="1"><head>Boucles et instructions conditionnelles en Python</head>
<p>La prochaine &#233;tape dans l&#8217;impl&#233;mentation de l&#8217;algorithme consiste &#224; inspecter chaque caract&#232;re de la chaine <code type="inline">pageContents</code> un &#224; un et &#224; tester si le caract&#232;re courant est un &#233;l&#233;ment d&#8217;une balise HTML ou bien le contenu de la transcription du proc&#232;s. </p>
<p>Pour ce faire, nous allons d&#233;couvrir quelques techniques permettant de r&#233;p&#233;ter une t&#226;che et d&#8217;&#233;valuer si une condition est remplie.</p>
<div n="2"><head>Les boucles</head>
<p>Comme de nombreux langages de programmation, Python propose plusieurs moyens de r&#233;p&#233;ter l&#8217;ex&#233;cution d&#8217;une s&#233;quence d&#8217;instructions. Le plus adapt&#233; &#224; notre probl&#233;matique est ici la boucle <code type="inline">for</code>, qui nous permettra de r&#233;aliser une t&#226;che sur chaque caract&#232;re de la chaine <code type="inline">pageContents</code>. La variable <code type="inline">char</code> contiendra alors successivement chaque caract&#232;re de la chaine <code type="inline">pageContents</code> parcourue. </p>
<p>Nous avons ici nomm&#233; cette variable <code type="inline">char</code>. Toutefois, cela n&#8217;a pas d&#8217;importance particuli&#232;re dans le fonctionnement du programme, car nous aurions pu la nommer <code type="inline">trucbidule</code> ou bien encore <code type="inline">k</code> si nous en avions envie. Cependant certains termes ne peuvent pas &#234;tre utilis&#233;s car ils sont d&#233;j&#224; attribu&#233;s &#224; une notion sp&#233;cifique du langage Python (comme par exemple <code type="inline">for</code>). Pour v&#233;rifier si cela est le cas, vous pouvez vous reposer sur la fonction de coloration syntaxique de votre &#233;diteur de texte afin de savoir si le nom d&#8217;une variable est possible (comme ici <code type="inline">char</code>). Par ailleurs, il est pr&#233;f&#233;rable de donner aux variables des noms qui nous informent sur leurs contenus. Il sera ainsi plus simple de revenir sur un programme plus tard. C&#8217;est pourquoi <code type="inline">trucbidule</code> n&#8217;est pas forc&#233;ment le meilleur choix de nom de variable.</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_0" type="block" corresp="code_du-html-a-une-liste-de-mots-2_0.txt"></code></pre>
</div><div n="2"><head>Les instructions conditionnelles</head>
<p>Nous avons besoin de v&#233;rifier la valeur du caract&#232;re courant pour d&#233;cider quoi en faire. Pour cela, Python propose diff&#233;rents moyens de r&#233;aliser des &#171;&#160;tests conditionnels&#160;&#187;. </p>
<p>Celui dont nous avons besoin est l&#8217;instruction conditionnelle <code type="inline">if</code>. Le code ci-dessous utilise l&#8217;instruction <code type="inline">if</code> pour v&#233;rifier si la chaine de caract&#232;res nomm&#233;e <code type="inline">char</code> est &#233;gale &#224; un crochet ouvrant. Comme nous l&#8217;avons d&#233;j&#224; mentionn&#233;, l&#8217;indentation est tr&#232;s importante en Python. Si le code est bien indent&#233;, Python n&#8217;ex&#233;cutera le code indent&#233; que si la condition d&#233;finie est v&#233;rifi&#233;e.</p>
<p>Notez que la syntaxe Python privil&#233;gie l&#8217;utilisation du signe &#233;gal (&#160;=&#160;) pour r&#233;aliser des &#171;&#160;affectations&#160;&#187;, c&#8217;est-&#224;-dire attribuer une valeur &#224; une variable. Pour tester une &#171;&#160;&#233;galit&#233;&#160;&#187;, il faut utiliser le double signe &#233;gal (&#160;==&#160;) (les programmeuses et programmeurs d&#233;butants ont souvent tendance &#224; confondre ces deux utilisations)&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_1" type="block" corresp="code_du-html-a-une-liste-de-mots-2_1.txt"></code></pre>
<p>Une forme plus g&#233;n&#233;rale de l&#8217;instruction <code type="inline">if</code> permet d&#8217;indiquer ce que nous souhaitons faire dans le cas o&#249; la condition sp&#233;cifi&#233;e n&#8217;est pas r&#233;alis&#233;e&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_2" type="block" corresp="code_du-html-a-une-liste-de-mots-2_2.txt"></code></pre>
<p>Python laisse aussi la possibilit&#233; de v&#233;rifier d&#8217;autres conditions apr&#232;s la premi&#232;re instruction, et ceci en utilisant l&#8217;instruction <code type="inline">elif</code> (qui est une contraction de <code type="inline">else if</code>)&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_3" type="block" corresp="code_du-html-a-une-liste-de-mots-2_3.txt"></code></pre>
</div></div>
      <div n="1"><head>Utiliser l&#8217;algorithme pour supprimer le balisage HTML</head>
<p>Vous en savez maintenant suffisamment pour impl&#233;menter la seconde partie de l&#8217;algorithme qui consiste &#224; supprimer toutes les balises HTML. Dans cette partie, nous souhaitons inspecter chaque caract&#232;re de la chaine <code type="inline">pageContents</code> un &#224; un&#160;:   </p>
<ul>
<li>Si le caract&#232;re courant est un chevron ouvrant (<code type="inline">&lt;</code>) cela signifie que nous entrons dans une balise, dans ce cas nous ignorons ce caract&#232;re et ignorerons les suivants&#160;;   </li>
<li>Si le caract&#232;re courant est un chevron fermant (<code type="inline">&gt;</code>), cela signifie que nous ressortons de la balise, nous ignorons alors seulement ce caract&#232;re et pr&#234;terons attention aux suivants&#160;;   </li>
<li>Si nous ne sommes pas au sein d&#8217;une balise, nous ajoutons le caract&#232;re courant dans une variable nomm&#233;e <code type="inline">text</code>.  </li>
</ul>
<p>Pour r&#233;aliser cela, nous allons utiliser une boucle <code type="inline">for</code> qui nous permettra d&#8217;inspecter de mani&#232;re it&#233;rative chaque caract&#232;re de la chaine. Nous utiliserons une suite d&#8217;instructions conditionnelles (<code type="inline">if</code> / <code type="inline">elif</code>) pour d&#233;terminer si le caract&#232;re courant est inclus dans une balise. Si, &#224; l&#8217;inverse, il fait partie du contenu &#224; extraire, nous ajouterons alors le caract&#232;re courant &#224; la variable <code type="inline">text</code>. </p>
<p>Comment garder en m&#233;moire le fait d&#8217;&#234;tre ou non &#224; l&#8217;int&#233;rieur d&#8217;une balise&#160;? Nous utiliserons pour cela une variable de type &#171;&#160;entier&#160;&#187;, qui vaudra 1 (vrai) si nous sommes dans une balise et qui vaudra 0 (faux) si ce n&#8217;est pas le cas (dans l&#8217;exemple plus bas nous avons appel&#233; cette variable <code type="inline">inside</code>).</p>
<div n="2"><head>La fonction de suppression des balises</head>
<p>Mettons en pratique ce que nous venons d&#8217;apprendre. La version finale de la fonction <code type="inline">stripTags()</code>, qui nous permet de r&#233;aliser notre objectif, est d&#233;crite ci-dessous. Lorsque vous remplacerez l&#8217;ancienne fonction <code type="inline">stripTags()</code> par la nouvelle dans le fichier <code type="inline">obo.py</code>, faites &#224; nouveau bien attention &#224; l&#8217;indentation, de mani&#232;re &#224; ce qu&#8217;elle soit identique &#224; ce qui est indiqu&#233; ci-dessous.</p>
<p>Si vous avez tent&#233; de construire la fonction vous-m&#234;me, il est tout &#224; fait normal qu&#8217;elle puisse &#234;tre diff&#233;rente de celle que nous vous pr&#233;sentons ici. Il existe souvent plusieurs moyens d&#8217;arriver &#224; la m&#234;me fin, l&#8217;essentiel est pour le moment que cela r&#233;alise bien l&#8217;objectif que nous nous &#233;tions fix&#233;.</p>
<p>Cependant, nous vous conseillons de v&#233;rifier que votre fonction renvoie bien le m&#234;me r&#233;sultat que la n&#244;tre&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_4" type="block" corresp="code_du-html-a-une-liste-de-mots-2_4.txt"></code></pre>
<p>Ce code nous fait d&#233;couvrir deux nouvelles instructions&#160;: <code type="inline">continue</code> et <code type="inline">return</code>.</p>
<p>L&#8217;instruction Python <code type="inline">continue</code> est utilis&#233;e dans les boucles pour passer directement &#224; l&#8217;it&#233;ration suivante. Quand nous arrivons &#224; un caract&#232;re inclus au sein d&#8217;une balise HTML, nous pouvons par ce moyen passer au prochain caract&#232;re sans avoir &#224; ajouter celui-ci &#224; la variable <code type="inline">text</code>.</p>
<p>Dans la <link target="/fr/lecons/du-html-a-une-liste-de-mots-1">premi&#232;re partie</link> de cette le&#231;on, nous avons amplement us&#233; de la fonction <code type="inline">print()</code>. Elle permet d&#8217;afficher &#224; l&#8217;&#233;cran le r&#233;sultat d&#8217;un programme pour qu&#8217;il puisse &#234;tre lu par l&#8217;utilisateur. Cependant, dans la majorit&#233; des cas, nous souhaitons simplement faire parvenir une information d&#8217;une partie d&#8217;un programme &#224; une autre. &#192; ce titre, quand l&#8217;ex&#233;cution d&#8217;une fonction se termine, elle peut renvoyer une valeur au code qui l&#8217;a appel&#233;e via l&#8217;instruction <code type="inline">return</code>. </p>
<p>Si nous souhaitons appeler la fonction <code type="inline">stripTags()</code> dans un autre programme, voici comment nous y prendre&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_5" type="block" corresp="code_du-html-a-une-liste-de-mots-2_5.txt"></code></pre>
<p>L&#8217;instruction <code type="inline">return</code> nous permet de transf&#233;rer directement la valeur de sortie de la fonction <code type="inline">stripTags()</code> dans une variable appel&#233;e <code type="inline">theResult</code>, que nous pourrons r&#233;utiliser par la suite.</p>
<p>Dans l&#8217;exemple ci-dessus, vous remarquerez que le contenu renvoy&#233; par la fonction <code type="inline">stripTags()</code> n&#8217;est plus &#233;gal au contenu de <code type="inline">myText</code> mais bien au contenu sans balises HTML.</p>
<p>Pour tester notre nouvelle fonction <code type="inline">stripTags()</code>, vous pouvez relancer <code type="inline">trial-content.py</code>. Maintenant que nous avons red&#233;fini <code type="inline">stripTags()</code>, le programme <code type="inline">trial-content.py</code> fournit un r&#233;sultat diff&#233;rent, plus proche de notre objectif. Avant de continuer, v&#233;rifiez que vous avez bien compris pourquoi le comportement de <code type="inline">trial-content.py</code> change lorsque l&#8217;on &#233;dite <code type="inline">obo.py</code>.</p>
</div></div>
      <div n="1"><head>Les listes Python</head>
<p>Maintenant que nous avons la possibilit&#233; d&#8217;extraire le texte d&#8217;une page web, nous souhaitons transformer ce texte de mani&#232;re &#224; ce qu&#8217;il soit plus facile &#224; traiter. </p>
<p>Jusqu&#8217;&#224; pr&#233;sent, pour stocker de l&#8217;information dans un programme Python, nous avons choisi de le faire avec le format &#171;&#160;chaine de caract&#232;res&#160;&#187; (<link target="https://perma.cc/D4RC-6TT4">string</link>), que nous avons d&#233;j&#224; manipul&#233; dans une le&#231;on pr&#233;c&#233;dente (<link target="/fr/lecons/manipuler-chaines-caracteres-python">Manipuler des chaines de caract&#232;res en Python</link>).</p>
<p>Cependant, il existe d&#8217;autres formats comme les &#171;&#160;entiers&#160;&#187; (<link target="https://perma.cc/Y7DW-L6YA">integers</link>), que nous avons utilis&#233;s dans la fonction <code type="inline">stripTags()</code> pour stocker la valeur 1 quand nous &#233;tions au sein d&#8217;une balise et 0 lorsque ce n&#8217;&#233;tait pas le cas. Les entiers permettent de r&#233;aliser des op&#233;rations math&#233;matiques, mais il n&#8217;est pas possible d&#8217;y stocker des fractions ou des nombres d&#233;cimaux.</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_6" type="block" corresp="code_du-html-a-une-liste-de-mots-2_6.txt"></code></pre>
<p>De plus, sans le savoir, &#224; chaque fois que vous avez eu besoin de lire ou d&#8217;&#233;crire dans un fichier, vous avez utilis&#233; un objet sp&#233;cifique permettant de manipuler des fichiers, comme <code type="inline">f</code> dans l&#8217;exemple ci-dessous&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_7" type="block" corresp="code_du-html-a-une-liste-de-mots-2_7.txt"></code></pre>
<p>Un autre <link target="https://perma.cc/X2M2-EWVC">type d&#8217;objets</link> propos&#233; par Python est la &#171;&#160;[liste]&#160;&#187; (<link target="https://perma.cc/FC9Y-JSSV">list</link>, correspondant &#224; une collection ordonn&#233;e d&#8217;objets (pouvant inclure potentiellement d&#8217;autres listes).</p>
<p>Convertir une chaine de caract&#232;res en liste de caract&#232;res ou de mots est assez simple. Copiez ou &#233;crivez le programme suivant dans votre &#233;diteur de texte pour comprendre les deux moyens de r&#233;aliser cette op&#233;ration. Sauvegardez le fichier en le nommant <code type="inline">string-to-list.py</code> et ex&#233;cutez-le. Comparez ensuite les deux listes obtenues dans la sortie de la commande et &#224; la vue de ces r&#233;sultats, essayez de comprendre comment fonctionne ce bout de code&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_8" type="block" corresp="code_du-html-a-une-liste-de-mots-2_8.txt"></code></pre>
<p>Le premier bloc de ce code d&#233;finit deux variables. La seconde partie fait intervenir une boucle <code type="inline">for</code> pour parcourir chaque caract&#232;re de la chaine <code type="inline">s1</code> puis ajoute chaque caract&#232;re &#224; la fin de <code type="inline">charlist</code>. Le dernier bloc de code utilise l&#8217;op&#233;ration <code type="inline">split</code> qui permet de d&#233;couper la chaine <code type="inline">s2</code> l&#224; o&#249; se trouve un caract&#232;re invisible (espace, tabulation, retour charriot et autres caract&#232;res similaires). </p>
<p>Pour le moment, nous avons simplifi&#233; un peu les choses concernant la proc&#233;dure utilis&#233;e pour le d&#233;coupage de la chaine en liste de mots. Modifiez la chaine <code type="inline">s2</code> utilis&#233;e dans le programme et donnez-lui la valeur &#171;&#160;salut le monde!&#160;&#187; puis relancez le programme. </p>
<p>Qu&#8217;est-il arriv&#233; au point d&#8217;exclamation&#160;? </p>
<p>Si vous avez &#233;crit &#171;&#160;salut le monde!&#160;&#187; sans espace avant le point d&#8217;exclamation, celui-ci se retrouvera dans le m&#234;me &#233;l&#233;ment de la liste que &#171;&#160;monde&#160;&#187;, alors que si vous avez ajout&#233; une espace pour corriger cette erreur typographique, le point d&#8217;exclamation sera plac&#233; dans un &#233;l&#233;ment diff&#233;rent de la liste de mots. V&#233;rifiez si cela est bien le cas.</p>
<p>Notez que vous devez sauvegarder les modifications apport&#233;es au programme avant de pouvoir relancer Python.</p>
<p>En vous servant de vos nouvelles connaissances, ouvrez maintenant l&#8217;URL, t&#233;l&#233;chargez la page web, sauvegardez son contenu dans une chaine de caract&#232;res et, comme nous venons de le voir, d&#233;coupez celle-ci en une liste de mots. Essayez d&#8217;ex&#233;cuter alors le programme suivant&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_9" type="block" corresp="code_du-html-a-une-liste-de-mots-2_9.txt"></code></pre>
<p>Le r&#233;sultat obtenu devrait ressembler &#224; la liste ci-dessous&#160;:</p>
<pre><code class="language-python" xml:id="code_du-html-a-une-liste-de-mots-2_10" type="block" corresp="code_du-html-a-une-liste-de-mots-2_10.txt"></code></pre>
<p>Pour le moment, disposer d&#8217;une telle liste ne nous avance pas &#224; grand &#224; chose, surtout qu&#8217;un humain pourait facilement lire le texte initial. Cependant, comme nous le verrons dans les prochaines le&#231;ons, ce format est plus adapt&#233; pour automatiser le traitement de contenus textuels.</p>
</div>
      <div n="1"><head>Lectures sugg&#233;r&#233;es</head>
<ul>
<li>
Lutz, Mark. <emph>Learning python: Powerful object-oriented programming</emph>. O'Reilly Media, Inc., 2013.<ul>
<li>Ch. 7&#160;: &#171;&#160;Strings&#160;&#187;</li>
<li>Ch. 8&#160;: &#171;&#160;Lists and Dictionaries&#160;&#187;</li>
<li>Ch. 10&#160;: &#171;&#160;Introducing Python Statements&#160;&#187;</li>
<li>Ch. 15&#160;: &#171;&#160;Function Basics&#160;&#187;</li>
</ul>
</li>
</ul>
</div>
      <div n="1"><head>Synchronisation du code</head>
<p>Pour suivre les le&#231;ons &#224; venir, il est important que vous ayez les bons fichiers et programmes dans votre r&#233;pertoire <code type="inline">programming-historian</code>. &#192; la fin de chaque chapitre, vous pouvez t&#233;l&#233;charger le fichier <code type="inline">.zip</code> contenant le mat&#233;riel de cours afin de vous assurer d&#8217;avoir une version mise &#224; jour du code.</p>
<ul>
<li>python-lessons3.zip (<link target="/assets/python-lessons3.zip">zip sync</link>)</li>
</ul>
</div>
    </body>
  </text>
</TEI>
