<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="salida-de-datos-como-archivo-html">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Salida de datos como archivo HTML con Python</title>
  <author role="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor role="reviewers"><persName>Jim Clifford</persName><persName>Frederik Elwert</persName></editor><author role="translators">V&#237;ctor Gayol</author><editor role="translation-reviewers"><persName>Jairo A. Melo</persName><persName>Maria Jos&#233; Afanador-Llach</persName><persName>Antonio Rojas Castro</persName></editor><editor role="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phes0025</idno><date type="published">07/17/2012</date><date type="translated">03/15/2017</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#output-data-as-html-file"/>.</p><p>There are other translations: <ref target="#saida-dados-ficheiro-html-python"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Esta lecci&#243;n toma los pares de frecuencia creados en 'Contar frecuencias de palabras con Python' y crea una salida de datos a un archivo HTML.</p></abstract><textClass><keywords><term xml:lang="en">python</term><term xml:lang="en">website</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="es">
    <body>
      <div type="2"><head>Objetivo de la lecci&#243;n</head>
<p>Esta lecci&#243;n toma los pares de frecuencia creados en <ref target="/es/lecciones/contar-frecuencias">Contar frecuencias de palabras con Python</ref> y crea una salida de datos a un archivo HTML.</p>
<p>Aqu&#237; aprender&#225;s a crear esta salida de datos como archivo HTML utilizando Python. Tambi&#233;n aprender&#225;s acerca del formato de cadenas. El resultado final es un archivo HTML que muestra las palabras clave encontradas en la fuente original en orden de frecuencia descendente junto con el n&#250;mero de veces que aparece cada palabra clave.</p>
</div>
      <div type="2"><head>Archivos necesarios para esta lecci&#243;n</head>
<list type="unordered">
<item><code rend="inline">obo.py</code></item>
</list>
<p>Si no tienes estos archivos de las lecciones anteriores, puedes descargar python-es-lecciones6, un <ref target="/assets/python-es-lecciones6.zip">archivo zip de las lecciones anteriores</ref>.</p>
</div>
      <div type="2"><head>Construcci&#243;n de un contenedor de HTML</head>
<p>En la lecci&#243;n anterior aprendiste c&#243;mo etiquetar el mensaje "Hola Mundo" en HTML, escribir el resultado en un archivo y abrirlo autom&#225;ticamente en el navegador. Un programa que pone c&#243;digos de formato alrededor de algo para que pueda ser usado por otro programa es llamado a veces "contenedor" (<emph>wrapper</emph>). Lo que vamos a hacer ahora es desarrollar un contenedor de HTML para la salida de nuestro c&#243;digo que computa frecuencias de palabras. Tambi&#233;n a&#241;adiremos algunos <emph>metadatos</emph> din&#225;micos &#250;tiles para complementar los datos de frecuencia recogidos en <ref target="/es/lecciones/contar-frecuencias">Contar frecuencias</ref>.</p>
</div>
      <div type="2"><head>Metadatos</head>
<p>La distinci&#243;n entre datos y metadatos es crucial en las ciencias de la informaci&#243;n. Los metadatos son datos acerca de datos. Este concepto ya te debe ser familiar incluso si no has escuchado antes el t&#233;rmino. Considera un libro tradicional. Si tomamos el texto del libro como los datos, hay un n&#250;mero de otras caracter&#237;sticas que est&#225;n asociadas con el texto pero que pueden o no estar impresas en el libro de manera expl&#237;cita. El t&#237;tulo del libro, el autor, el editor y el lugar y fecha de la publicaci&#243;n son metadatos y generalmente est&#225;n impresos en el trabajo. El lugar y fecha del escrito, el nombre del corrector de estilo, los datos de catalogaci&#243;n de la Biblioteca del Congreso y el nombre del tipo de fuente utilizado para la composici&#243;n tipogr&#225;fica, a veces est&#225;n impresas en &#233;l. La persona que compra una copia particular puede escribir o no su nombre en el libro. Si el libro pertenece a la colecci&#243;n de una biblioteca, esa biblioteca mantendr&#225; metadatos adicionales, pero solamente algunos de ellos estar&#225;n unidos f&#237;sicamente al libro. El registro de los pr&#233;stamos, por ejemplo, se mantiene generalmente en una especie de base de datos y se vincula al libro con un identificador &#250;nico. Bibliotecas, archivos y museos tienen complejos sistemas para generar y mantener un registro de metadatos.</p>
<p>Cuando trabajas con datos digitales es buena idea incorporar metadatos en tus propios archivos siempre que sea posible. Ahora vamos a desarrollar algunas estrategias b&#225;sicas para hacer que nuestros archivos de datos sean <emph>auto-documentados</emph>. En nuestro contenedor queremos incluir informaci&#243;n din&#225;mica acerca del archivo, tales como la hora y fecha en el que fue creado as&#237; como un t&#237;tulo HTML que es relevante para el archivo. En este caso podr&#237;amos darle un nombre nosotros mismos, pero cuando empecemos a trabajar con m&#250;ltiples archivos, crear autom&#225;ticamente archivos autodocumentados nos ahorrar&#225; mucho tiempo, as&#237; que lo practicaremos ahora. Y para ello tendremos que aprender algunas opciones m&#225;s potentes de formato de cadenas de texto.</p>
</div>
      <div type="2"><head>Formato de cadenas de texto en Python</head>
<p>Python incluye un operador especial para formato que te permite insertar una cadena dentro de otra. Est&#225; representado por un signo de porcentaje seguido por una "s". Abre el <emph>shell</emph> de Python e intenta los ejemplos siguientes:</p>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_0" corresp="code_salida-de-datos-como-archivo-html_0.txt" lang="language-python" rend="block"/></ab>
<p>Tambi&#233;n hay una manera que te permite interpolar una lista de cadenas dentro de otra.</p>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_1" corresp="code_salida-de-datos-como-archivo-html_1.txt" lang="language-python" rend="block"/></ab>
<p>En estos ejemplos, un <code rend="inline">%s</code> en una cadena indica que otra cadena ser&#225; incrustada en ese punto. Hay una serie de otros c&#243;digos de formato de cadenas, la mayor&#237;a de los cuales permiten introducir n&#250;meros en las cadenas con varios formatos como <code rend="inline">%i</code> para enteros (i.e. 1, 2, 3), <code rend="inline">%f</code> para punto decimal flotante (por ejemplo: 3.023, 4.59, 1.0) y dem&#225;s. Al utilizar este m&#233;todo podemos introducir informaci&#243;n que es &#250;nica para ese archivo.</p>
</div>
      <div type="2"><head>Archivo de datos auto-documentado</head>
<p>Vamos a convertir en funciones algo del c&#243;digo que ya hemos escrito. Uno de ellos descargar&#225; el contenido de un URL y nos regresar&#225; una cadena de texto en min&#250;sculas de la p&#225;gina Web. Copia este c&#243;digo en el m&#243;dulo <code rend="inline">obo.py</code>.</p>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_2" corresp="code_salida-de-datos-como-archivo-html_2.txt" lang="language-python" rend="block"/></ab>
<p>Tambi&#233;n queremos una funci&#243;n que tome una cadena de texto en cualquier orden y la haga el cuerpo de un archivo HTML que se abra autom&#225;ticamente en Firefox. Esta funci&#243;n debe incluir algunos metadatos b&#225;sicos, como la hora y la fecha en la que se cre&#243; y el nombre del programa que lo cre&#243;. Estudia el siguiente c&#243;digo con atenci&#243;n y luego c&#243;pialo en el m&#243;dulo <code rend="inline">obo.py</code>.</p>
<div type="3"><head>Instrucciones para Mac</head>
<p>Si est&#225;s usado una Mac aseg&#250;rate de incluir la variable de la ruta de nombre de archivo adecuada en la segunda l&#237;nea del &#250;ltimo p&#225;rrafo del c&#243;digo para reflejar en d&#243;nde est&#225;s guardando tus archivos.</p>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_3" corresp="code_salida-de-datos-como-archivo-html_3.txt" lang="language-python" rend="block"/></ab>
</div><div type="3"><head>Instrucciones para Windows</head>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_4" corresp="code_salida-de-datos-como-archivo-html_4.txt" lang="language-python" rend="block"/></ab>
<p>***</p>
<p>Ten en cuenta que esta funci&#243;n utiliza el operador de formato de cadenas que apenas aprendimos. Si a&#250;n tienes problema con esta idea, echa una mirada al archivo HTML que se abri&#243; en la nueva pesta&#241;a de tu Firefox y podr&#225;s ver c&#243;mo funcion&#243;. Si a&#250;n est&#225;s atascado en esta parte, &#233;chale un ojo a:</p>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_5" corresp="code_salida-de-datos-como-archivo-html_5.txt" rend="block"/></ab>
<p>en el archivo HTML y rastrea c&#243;mo el programa sabe poner ah&#237; el valor del URL.</p>
<p>La funci&#243;n tambi&#233;n convoca una biblioteca <code rend="inline">datetime</code> de Python para determinar la hora y fecha actuales. Como el operador de formato de cadena <code rend="inline">%s</code>, esta biblioteca utiliza el <code rend="inline">%</code> como reemplazo de valores. En este caso, <code rend="inline">%Y %m %d %H %M %S</code> representan a&#241;o, mes, d&#237;a, hora, minutos y segundos respectivamente. A diferencia de <code rend="inline">%s</code>, el programa determinar&#225; para ti el valor de estas variables utilizando el reloj de tu computadora. Es importante que entiendas esta diferencia.</p>
<p>Estos metadatos de fecha junto con el nombre del programa que llam&#243; a la funci&#243;n, se guarda en la etiqueta de t&#237;tulo del HTML. El archivo HTML que es creado tiene el mismo nombre que el programa de Python que lo cre&#243; pero con la extensi&#243;n <code rend="inline">.html</code> en vez de <code rend="inline">.py</code>.</p>
</div></div>
      <div type="2"><head>Ensamblar todo</head>
<p>Ahora podemos crear otra versi&#243;n de nuestro programa para computar frecuencias. En vez de enviar su salida de datos a un archivo de texto o a una ventana de salida, env&#237;a la salida de datos a un archivo HTML que ser&#225; abierto en una nueva pesta&#241;a de Firefox. De ah&#237;, la salida de datos del programa puede agregarse f&#225;cilmente como una entrada bibliogr&#225;fica a Zotero. Escribe o copia el c&#243;digo siguiente en tu editor de texto, gu&#225;rdalo como <code rend="inline">html-a-frec-3.py</code> y ejec&#250;talo para confirmar que trabaja como se espera.</p>
<p>Utiliza lo m&#225;s apropiado para tu sistema: <code rend="inline">obo.envuelveCadenaenHTMLMac()</code> u <code rend="inline">obo.envuelveCadenaenHTMLWindows()</code>.</p>
<ab><code xml:id="code_salida-de-datos-como-archivo-html_6" corresp="code_salida-de-datos-como-archivo-html_6.txt" lang="language-python" rend="block"/></ab>
<p>Observa que intercalamos nuestros pares de frecuencia de palabras con la etiqueta de salto <code rend="inline">&lt;br\&gt;</code> de HTML, la cual act&#250;a como una <emph>nueva l&#237;nea</emph>. Si todo va bien, deber&#237;as ver las mismas frecuencias de palabras que computamos en la &#250;ltima secci&#243;n pero esta vez en la ventana de tu navegador.</p>
<div type="3"><head>Leturas sugeridas</head>
<list type="unordered">
<item>
Lutz, Learning Python<list type="unordered">
<item>Re-read and review Chs. 1-17</item>
</list>
</item>
</list>
</div><div type="3"><head>Sincronizaci&#243;n de c&#243;digo</head>
<p>Para seguir a lo largo de las lecciones futuras es importante que tengas los archivos correctos y programas en el directorio "programming-historian" de tu disco duro. Al final de cada lecci&#243;n puedes descargar el archivo zip "python-es-lecciones" para asegurarte que tienes el c&#243;digo correcto. Si est&#225;s trabajando con la versi&#243;n Mac o Linux de las lecciones deber&#225;s abrir el archivo <code rend="inline">obo.py</code> y cambiar "file:///Users/username/Desktop/programming-historian/" a la ruta del directorio de tu propia computadora.</p>
<list type="unordered">
<item>python-es-lecciones7.zip <ref target="/assets/python-es-lecciones7.zip">zip sync</ref></item>
</list>
</div></div>
    </body>
  </text>
</TEI>
