<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="introduction-aux-carnets-jupyter-notebooks">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Introduction aux carnets Jupyter</title>
  <author type="original_author"><persName>Quinn Dombrowski</persName><persName>Tassie Gniady</persName><persName>David Kloster</persName></author><editor type="reviewers"><persName>Patrick Burns</persName><persName>Jeri Wieringa</persName></editor><author type="translators">Fran&#231;ois Dominic Laram&#233;e</author><editor type="translation-reviewers">Marie-Christine Boucher</editor><editor type="editors">Brandon Walsh</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phfr0014</idno><date type="published">12/08/2019</date><date type="translated">10/21/2020</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#jupyter-notebooks"/>.</p><p>There are other translations: <ref target="#introducao-jupyter-notebooks"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Les carnets Jupyter proposent un environnement dans lequel il est possible de combiner librement le code informatique et le texte en langage naturel. Cette le&#231;on explique comment installer le logiciel Jupyter Notebook, comment cr&#233;er et ex&#233;cuter des carnets Jupyter, et dans quels contextes ces carnets peuvent se r&#233;v&#233;ler particuli&#232;rement utiles.</p></abstract><textClass><keyword xml:lang="en">python</keyword><keyword xml:lang="en">website</keyword></textClass></profileDesc>
</teiHeader>
  <text xml:lang="fr">
    <body>
      <div type="2"><head>Introduction</head>
<p>Est-il possible, lorsque le calcul informatique constitue une partie int&#233;grante de notre recherche, de publier un argumentaire dans lequel le code est aussi accessible et lisible que le texte qui l'accompagne? Dans les humanit&#233;s, la publication de la recherche prend le plus souvent la forme d'un texte en prose, qu'il s'agisse d'un article ou d'une monographie. Et bien que les &#233;diteurs  acceptent de plus en plus fr&#233;quemment d'inclure des liens vers du code ou d'autres ressources externes, cette approche rel&#232;gue n&#233;cessairement de tels contenus &#224; un statut secondaire, en comparaison avec le texte.</p>
<p>Et si l'on pouvait publier nos recherches dans un format qui accorde une importance &#233;quivalente au texte et au code? Dans la plupart des revues savantes, il est difficile, voire impossible, de r&#233;unir le code et le texte dans un seul document. On doit le plus souvent publier le code s&#233;par&#233;ment, sur GitHub ou sur un autre d&#233;p&#244;t similaire. Nos lecteurs et lectrices doivent inspecter nos notes infrapaginales pour savoir &#224; quel script un &#233;l&#233;ment de texte fait r&#233;f&#233;rence, trouver l'URL du d&#233;p&#244;t o&#249; ce script se trouve, visiter l'URL, trouver le script, t&#233;l&#233;charger le code et les donn&#233;es associ&#233;es, et enfin ex&#233;cuter le programme. Mais si l'on obtient la permission de reproduire nos textes dans un autre format, les carnets Jupyter nous offrent un environnement dans lequel le code et le texte peuvent &#234;tre juxtapos&#233;s et pr&#233;sent&#233;s avec la m&#234;me importance.</p>
<p>Les carnets Jupyter ont &#233;t&#233; adopt&#233;s avec enthousiasme par la communaut&#233; de la science des donn&#233;es, &#224; un tel point qu'ils tendent &#224; y remplacer Microsoft Word en tant qu'environnement de r&#233;daction privil&#233;gi&#233;. Dans la litt&#233;rature savante du domaine des humanit&#233;s num&#233;riques, on retrouve des r&#233;f&#233;rences aux carnets Jupyter qui remontent &#224; 2015 (les carnets <emph>iPython</emph>, dont le nom est une contraction de &#171; Python interactif &#187;, sont encore plus anciens; les carnets Jupyter sont n&#233;s d'une bifurcation des carnets iPython en 2014).</p>
<p>Les carnets Jupyter ont aussi acquis une certaine popularit&#233; en tant qu'outil p&#233;dagogique dans le domaine des humanit&#233;s num&#233;riques. Plusieurs le&#231;ons du <emph>Programming Historian</emph>, dont <link target="/en/lessons/text-mining-with-extracted-features">&#171; Text Mining in Python through the HTRC Feature Reader &#187;</link> et <link target="/en/lessons/extracting-illustrated-pages#jupyter-notebooks">&#171; Extracting Illustrated Pages from Digital Libraries with Python &#187;</link> sugg&#232;rent d'int&#233;grer leur code &#224; des carnets Jupyter ou de les utiliser pour guider les apprenants tout en donnant &#224; ces derniers la libert&#233; n&#233;cessaire pour &#233;diter et remanier le code. C'est aussi le cas des supports p&#233;dagogiques d&#233;velopp&#233;s pour de nombreux ateliers. Le format des carnets est particuli&#232;rement appropri&#233; pour enseigner &#224; des groupes o&#249; l'on trouve des personnes dont les niveaux d'expertise technique ou de familiarit&#233; avec la programmation sont in&#233;gaux.</p>
<p>Puisque l'on utilise des carnets Jupyter pour simplifier l'acc&#232;s des lecteurs au code informatique utilis&#233; dans la recherche ou dans la p&#233;dagogie num&#233;rique, il ne servirait &#224; rien d'&#233;tudier ou d'enseigner cet outil en vase clos. En effet, le carnet Jupyter lui-m&#234;me, en tant que plateforme, ne fait pas avancer la recherche ou la formation. Donc, avant de commencer cette le&#231;on, il est important de r&#233;fl&#233;chir aux objectifs que vous souhaitez atteindre gr&#226;ce aux  carnets Jupyter. Voulez-vous organiser le travail de votre &#233;quipe? D&#233;sirez-vous analyser vos donn&#233;es et conserver la trace de toutes les exp&#233;riences que vous tenterez en cours de route? Voulez-vous que ceux et celles qui liront votre recherche soient en mesure de suivre &#224; la fois l'aspect technique et l'aspect th&#233;orique de votre argument sans devoir passer d'un fichier PDF &#224; un r&#233;pertoire de scripts? Voulez-vous diriger des ateliers de programmation accessibles &#224; des participant(e)s dont les niveaux d'expertise varient? Souhaitez-vous utiliser ou adapter des carnets produits par d'autres? Gardez vos objectifs en t&#234;te pendant que vous suivez cette le&#231;on: selon la mani&#232;re dont vous envisagez d'utiliser les carnets Jupyter, il se pourrait que vous puissiez sauter certaines sections.</p>
</div>
      <div type="2"><head>Objectifs de la le&#231;on</head>
<p>Dans cette le&#231;on, vous apprendrez:</p>
<ul>
<li>ce que sont les carnets Jupyter;</li>
<li>comment installer, configuer et utiliser les carnets Jupyter;</li>
<li>dans quels contextes d'enseignement et de recherche les carnets Jupyter peuvent &#234;tre utiles.</li>
</ul>
<p>Nous commencerons par d&#233;velopper un carnet Jupyter pour analyser des donn&#233;es, puis nous adapterons ce m&#234;me carnet et les donn&#233;es associ&#233;es pour nous en servir en classe.</p>
<p>La le&#231;on abordera aussi certains th&#232;mes plus avanc&#233;s en lien avec les carnets Jupyter, dont:</p>
<ul>
<li>l'utilisation des carnets Jupyter pour programmer dans des langages autres que Python;</li>
<li>l'adaptation de code Python existant pour le rendre compatible avec les carnets Jupyter;</li>
<li>l'utilisation de carnets Jupyter dans des contextes de calcul intensif, comme par exemple lorsque l'on dispose d'un acc&#232;s &#224; une grappe de serveurs de haute performance.</li>
</ul>
</div>
      <div type="2"><head>Pr&#233;requis</head>
<p>Cette le&#231;on ne requiert que tr&#232;s peu d'expertise technique pr&#233;alable. Elle est con&#231;ue pour &#234;tre accessible aux d&#233;butants curieux; en fait, les carnets Jupyter constituent une excellente plateforme avec laquelle apprendre &#224; programmer.</p>
<p>Il se pourrait, si vous souhaitez ex&#233;cuter des carnets qui font appel &#224; certains modules de Python, que vous deviez <link target="/en/lessons/installing-python-modules-pip">installer ces modules Python avec la commande pip</link>, ce qui requiert une certaine familiarit&#233; avec la ligne de commande. Le Programming Historian propose des le&#231;ons portant sur l'utilisation de la ligne de commande <link target="/en/lessons/intro-to-powershell">sous Windows</link> et <link target="/en/lessons/intro-to-bash">sous Mac OS et Linux</link>.</p>
<p>Notez que cette le&#231;on pr&#233;sente la version 6.0 des carnets Jupyter (<emph>N.D.L.R. au moment de la traduction fran&#231;aise, la version la plus r&#233;cente est la 6.1.5</emph>). La fonctionnalit&#233; et l'interface utilisateur ont cependant &#233;t&#233; relativement stables d'une version &#224; l'autre jusqu'ici.</p>
</div>
      <div type="2"><head>Programmation lettr&#233;e</head>
<p>En informatique, la relation entre le code interpr&#233;t&#233; par l'ordinateur et le texte qui doit &#234;tre lu par des &#234;tres humains a suscit&#233; la r&#233;flexion d&#232;s les ann&#233;es 1970. C'est &#224; cette &#233;poque que l'informaticien Donald Knuth a propos&#233; le paradigme de la <link target="https://fr.wikipedia.org/wiki/Programmation_lettr%C3%A9e">programmation lettr&#233;e</link> (ou programmation litt&#233;raire). Le principe de la programmation lettr&#233;e est le suivant: plut&#244;t que d'organiser le code en fonction des besoins d'ex&#233;cution de l'ordinateur, la programmation lettr&#233;e traite le code comme un texte qui doit &#234;tre compr&#233;hensible pour ses lecteurs et qui exprime clairement la pens&#233;e du programmeur ou de la programmeuse. Telle que con&#231;ue par Knuth, la programmation lettr&#233;e prend la forme d'un texte en prose au sein duquel s'imbriquent des macros (une forme de code abr&#233;g&#233;) ex&#233;cutables par l'ordinateur. Les outils de programmation lettr&#233;e produisent deux documents &#224; partir du m&#234;me programme: du code source 	&#171; emm&#234;l&#233; &#187; qui peut &#234;tre ex&#233;cut&#233; par l'ordinateur et une documentation textuelle 	&#171; tiss&#233;e &#187;.<ref type="footnotemark" target="#1"/></p>
<p>Fernando P&#233;rez, le cr&#233;ateur de l'environnement de programmation iPython qui a plus tard engendr&#233; le Projet Jupyter, a propos&#233; l'expression <emph>informatique lettr&#233;e</emph> pour d&#233;crire le mod&#232;le employ&#233; par les carnets Jupyter:</p>
<blockquote>
<p>Un environnement informatique lettr&#233; permet non seulement &#224; ses utilisateurs d'ex&#233;cuter des commandes, mais aussi d'enregistrer dans un document de format litt&#233;raire les r&#233;sultats de ces commandes, des figures, du texte libre et m&#234;me des expressions math&#233;matiques. En pratique, cet environnement peut ressembler &#224; un hybride entre une ligne de commande (comme celle de la coquille Unix) et un logiciel de traitement de texte, puisque les documents r&#233;sultants peuvent &#234;tre lus comme du texte et inclure des blocs de code ex&#233;cut&#233;s par l'ordinateur sous-jacent.<ref type="footnotemark" target="#2"/></p>
</blockquote>
<p>Jupyter n'est ni le premier, ni le seul exemple des carnets informatiques. D&#232;s les ann&#233;es 1980, des logiciels comme MATLAB et Wolfram Mathematica offraient des interfaces de ce type. En 2013, St&#233;fan Sinclair et Geoffrey Rockwell proposaient les &#171; carnets Voyant &#187;, bas&#233;s sur le mod&#232;le de Mathematica, qui explicitaient certaines des hypoth&#232;ses sous-jacentes &#224; leur outil de lecture distante <link target="https://voyant-tools.org">Voyant Tools</link> et les rendaient configurables par les usagers.<ref type="footnotemark" target="#3"/> Ils ont d&#233;velopp&#233; ce concept plus en profondeur dans <link target="https://voyant-tools.org/spyral/alta"><emph>The Art of Literary Text Analysis Spyral Notebooks</emph></link>.</p>
<p>Jupyter s'est impos&#233; dans plusieurs domaines de la recherche en tant qu'environnement de d&#233;veloppement &#224; code ouvert compatible avec de multiples langages de programmation. Le nom <emph>Jupyter</emph> fait d'ailleurs r&#233;f&#233;rence aux trois principaux langages soutenus par le projet &#224; ses d&#233;buts: <hi rend="bold">Ju</hi>lia, <hi rend="bold">Py</hi>thon, et <hi rend="bold">R</hi>. De plus, il existe des <link target="https://fr.wikipedia.org/wiki/Noyau_de_syst%C3%A8me_d%27exploitation">noyaux</link> qui rendent les carnets Jupyter compatibles avec <link target="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">une foule d'autres langages</link>, dont Ruby, PHP, Javascript, SQL et Node.js. Il n'est pas forc&#233;ment souhaitable de d&#233;velopper des projets dans tous ces langages &#224; partir de carnets Jupyter; par exemple, si vous devez d&#233;velopper un plugiciel (<emph>N.D.L.R.: plugin ou griffon</emph>) pour <link target="/en/lessons/creating-an-omeka-exhibit">Omeka</link>, sachez qu'Omeka ne permet pas d'installer des plugiciels d&#233;velopp&#233;s sous forme de carnets Jupyter. L'environnement Jupyter peut tout de m&#234;me se r&#233;v&#233;ler utile pour documenter du code, enseigner des langages de programmation et donner aux &#233;tudiants l'acc&#232;s &#224; un espace d'exp&#233;rimentation dans lequel manipuler des exemples qu'on leur fournit.</p>
</div>
      <div type="2"><head>Installer les carnets Jupyter</head>
<p>Au moment d'&#233;crire ces lignes (&#224; la fin de 2019), les deux principaux environnements de d&#233;veloppement dans lesquels il est possible d'ex&#233;cuter des carnets Jupyter sont Jupyter Notebook (&#224; ne pas confondre avec les carnets ou &#171; notebooks &#187; eux-m&#234;mes, qui sont des fichiers &#224; l'extension .ipynb) et le relativement r&#233;cent Jupyter Lab. Jupyter Notebook est largement r&#233;pandu et bien document&#233;; il propose des outils de navigation simples pour cr&#233;er, ouvrir, &#233;diter et ex&#233;cuter les carnets. Jupyter Lab est plus complexe et son interface rappelle celle d'un environnement de d&#233;veloppement int&#233;gr&#233; professionnel, comme celui qui est pr&#233;sent&#233; dans ces le&#231;ons du <emph>Programming Historian</emph> pour <link target="/fr/lecons/installation-windows-py">Windows</link>, <link target="/en/lessons/mac-installation">Mac</link> et <link target="/en/lessons/linux-installation">Linux</link>. Bien que Jupyter Lab soit cens&#233; &#233;ventuellement remplacer Jupyter Notebook, rien n'indique que Notebook sera abandonn&#233; &#224; court ou &#224; moyen terme. En raison de sa simplicit&#233; et de son accessibilit&#233; pour les d&#233;butants, c'est donc sur Jupyter Notebook que cette le&#231;on portera. Notez que les deux environnements sont inclus dans le progiciel Anaconda, dont nous parlerons dans la prochaine section. Anaconda constitue la fa&#231;on la plus simple d'obtenir Jupyter Notebook, mais si vous disposez d&#233;j&#224; d'une installation de Python sur votre ordinateur et que vous ne souhaitez pas t&#233;l&#233;charger tout le contenu d'Anaconda vous pouvez aussi ex&#233;cuter <code type="inline">pip3 install jupyter</code> &#224; la ligne de commande (pour la version Python 3).</p>
<div type="3"><head>Anaconda</head>
<p>Anaconda est une distribution gratuite et &#224; code source ouvert des langages Python et R. Elle contient plus de 1 400 modules, le gestionnaire Conda qui sert &#224; installer des modules suppl&#233;mentaires, et l'interface graphique Anaconda Navigator qui vous permet de g&#233;rer vos environnements de d&#233;veloppement, par exemple en installant des ensembles de modules diff&#233;rents pour chaque projet afin d'&#233;viter les conflits. Une fois que vous avez install&#233; Anaconda, vous pouvez ajouter des modules suppl&#233;mentaires avec Anaconda Navigator ou en entrant <code type="inline">conda install</code> &#224; la ligne de commande. Notez cependant que certains modules ne sont pas disponibles avec Conda et que l'on ne peut y acc&#233;der qu'avec la commande pip, par exemple, en entrant <code type="inline">pip install</code> &#224; la ligne de commande ou dans un carnet Jupyter.</p>
<p>Dans la plupart des cas, il est pr&#233;f&#233;rable de t&#233;l&#233;charger la version Python 3 d'Anaconda, &#224; moins que vous ne deviez travailler avec du code Python 2 h&#233;rit&#233; d'une application plus ancienne. Nous utiliserons Python 3 dans cette le&#231;on. Notez que l'installateur d'Anaconda occupe plus de 500 Mo et qu'une installation compl&#232;te requiert jusqu'&#224; 3 Go; assurez-vous de disposer de l'espace disque requis (et d'une connexion Internet rapide) avant de lancer le t&#233;l&#233;chargement.</p>
<p class="alert alert-warning" style="alert alert-warning">En cas de p&#233;nurie d'espace disque ou dans le cadre d'un atelier, il est possible d'emballer un carnet Jupyter et de l'ex&#233;cuter dans un environnement infonuagigue (*cloud*) gratuit plut&#244;t que d'installer Anaconda sur les ordinateurs des participant(e)s. Pour plus de d&#233;tails, veuillez consulter la section portant sur Binder ci-dessous.</p>
<p>Pour t&#233;l&#233;charger et installer Anaconda, visitez le <link target="https://docs.anaconda.com/free/anaconda/getting-started/">site web d'Anaconda</link>. Assurez-vous de cliquer sur l'ic&#244;ne de votre syst&#232;me d'exploitation, ce qui devrait remplacer <emph>Anaconda [num&#233;ro de version]</emph> par une mention de l'installateur requis pour votre syst&#232;me. Puis, cliquez sur le bouton <emph>Download</emph> (t&#233;l&#233;charger) situ&#233; dans la bo&#238;te o&#249; l'on retrouve le num&#233;ro de la version courante de Python 3. Si vous travaillez sous Windows, cette op&#233;ration devrait t&#233;l&#233;charger un fichier .exe; sur Mac, un fichier .pkg; sous Linux, un fichier .sh.</p>
<p>Ouvrez ce fichier pour installer le logiciel comme vous le faites habituellement sur votre ordinateur. Pour plus de d&#233;tails sur la proc&#233;dure d'installation, y compris sur la marche &#224; suivre pour installer Anaconda &#224; partir de la ligne de commande, veuillez consulter la <link target="https://docs.anaconda.com/free/anaconda/install/">documentation d'Anaconda</link>. Si votre ordinateur ne parvient pas &#224; ouvrir le fichier t&#233;l&#233;charg&#233;, v&#233;rifiez que vous avez bien choisi la version d'Anaconda compatible avec votre syst&#232;me d'exploitation avant de lancer le t&#233;l&#233;chargement. Sous Windows, assurez-vous d'activer l'option <emph>Add Anaconda to PATH Variable (Ajouter Anaconda &#224; la variable d'environnement PATH)</emph> pendant l'installation; sinon vous ne pourrez pas lancer Jupyter Notebook &#224; partir de la ligne de commande.</p>
</div></div>
      <div type="2"><head>Utilisation des carnets Jupyter pour la recherche</head>
<p>Cette le&#231;on explique comment r&#233;diger un carnet Jupyter pour l'analyse de donn&#233;es dans le cadre d'un projet de recherche et comment adapter ce carnet pour la discussion en classe. Bien que l'exemple pr&#233;sent&#233; provienne du domaine des &#233;tudes sur les communaut&#233;s de fans, il se concentre sur la conversion de dates, une t&#226;che courante dans l'ensemble des &#233;tudes historiques et litt&#233;raires num&#233;riques.</p>
<div type="3"><head>D&#233;marrer Jupyter Notebook</head>
<p>Apr&#232;s avoir install&#233; Anaconda en suivant la proc&#233;dure d&#233;crite ci-dessus, lancez Anaconda Navigator comme n'importe quelle autre application. Vous pouvez ignorer le message vous invitant &#224; cr&#233;er un compte infonuagique Anaconda; vous n'avez pas besoin de compte pour utiliser ce logiciel.</p>
<p>Sur l'&#233;cran d'accueil, vous devriez voir appara&#238;tre une s&#233;rie d'ic&#244;nes et de br&#232;ves descriptions de chacune des applications incluses dans la distribution Anaconda. Cliquez sur le bouton <emph>Launch (lancer)</emph> situ&#233; sous l'ic&#244;ne <emph>Jupyter Notebook</emph>.</p>
<figure><desc>Interface d'Anaconda Navigator</desc><graphic url="anaconda-navigator.png"/></figure>
<p>Si vous pr&#233;f&#233;rez travailler &#224; la ligne de commande plut&#244;t qu'avec Anaconda Navigator, installez d'abord Anaconda, puis ouvrez une fen&#234;tre du Terminal (sur Mac) ou acc&#233;dez &#224; l'invite de commandes (sous Windows) et entrez <code type="inline">jupyter notebook</code> pour lancer Jupyter Notebook dans votre navigateur web. Attention: le r&#233;pertoire &#224; partir duquel vous lancerez la commande deviendra le r&#233;pertoire d'accueil de votre interface Jupyter Notebook, que nous d&#233;crirons bient&#244;t.</p>
<p>Quelle que soit la m&#233;thode de d&#233;marrage choisie, l'interface Jupyter Notebook appara&#238;tra dans une nouvelle fen&#234;tre ou dans un nouvel onglet de votre navigateur web. En effet, Jupyter Notebook est une application qui roule &#224; l'int&#233;rieur du navigateur: vous n'interagirez avec Notebook que par l'interm&#233;diaire de votre navigateur, m&#234;me si Jupyter Notebook s'ex&#233;cute sur votre poste de travail.</p>
<p class="alert alert-warning" style="alert alert-warning">
Si vos carnets importent des modules Python qui d&#233;pendent de versions sp&#233;cifiques d'autres modules, vous devriez &#233;tablir un <i>environnement</i> sp&#233;cifique pour ces carnets afin d'&#233;viter les conflits. Un tel conflit pourrait se produire, par exemple, si un carnet requiert la version 1.0 d'un module sous-jacent et qu'un autre exige la version 2.0. Vous trouverez des instructions d&#233;taill&#233;es pour la cr&#233;ation, la mise &#224; jour et la gestion d'environnements dans la <link target="https://docs.anaconda.com/free/navigator/tutorials/manage-environments/">documentation d'Anaconda Navigator</link> ou, si vous pr&#233;f&#233;rez travailler avec la ligne de commande, dans la <link target="https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-environments.html">documentation de Conda.</link> Notez que pour lancer Jupyter Notebook dans un environnement sp&#233;cifique, vous devrez d'abord activer cet environnement.
</p>
</div><div type="3"><head>Naviguer dans l'interface de Jupyter Notebook</head>
<p>La fa&#231;on la plus courante d'ouvrir un carnet Jupyter (c'est-&#224;-dire un fichier .ipynb) consiste &#224; utiliser le navigateur de fichiers de Jupyter Notebook. Si vous tentez d'ouvrir un carnet dans un &#233;diteur de texte ordinaire, le carnet appara&#238;tra &#224; l'&#233;cran sous forme de fichier JSON et vous ne verrez pas les blocs de code interactifs qu'il contient. Pour examiner un carnet dans l'interface Jupyter, lancez d'abord Jupyter Notebook, qui s'affichera dans une fen&#234;tre de votre navigateur web, puis ouvrez le fichier du carnet &#224; partir de l'interface de Jupyter Notebook. Malheureusement, on ne peut pas faire de Jupyter Notebook l'application par d&#233;faut qui ouvre automatiquement les fichiers .ipynb lorsque l'on double-clique sur ceux-ci.</p>
<p>Lorsque vous lancez Jupyter Notebook &#224; partir d'Anaconda Navigator, votre <link target="https://fr.wikipedia.org/wiki/R%C3%A9pertoire_racine">r&#233;pertoire racine</link> s'affiche automatiquement. Si vous travaillez sur un Mac, il s'agit habituellement du r&#233;pertoire qui porte votre nom d'usager (/Utilisateurs/<emph>votre-nom</emph> ou quelque chose de similaire). Sur un PC, il s'agit habituellement de C:\. Mais si vous lancez Notebook &#224; partir de la ligne de commande, ce sera plut&#244;t le contenu du r&#233;pertoire dans lequel vous vous trouvez au moment de lancer l'application qui s'affichera. Sinon, vous pouvez aussi ouvrir directement un carnet sp&#233;cifique &#224; partir de la ligne de commande, par exemple en entrant <code type="inline">jupyter notebook exemple.ipynb</code>.</p>
<p>Afin d'&#233;viter d'encombrer votre r&#233;pertoire racine, il peut &#234;tre souhaitable de cr&#233;er un sous-r&#233;pertoire dans celui-ci pour y entreposer vos carnets. Vous pouvez le faire soit dans l'outil de gestion des r&#233;pertoires de votre syst&#232;me d'exploitation (Finder sur Mac ou Explorateur sous Windows) ou bien dans Jupyter Notebook puisque, comme Google Drive, Notebook fournit sa propre barre d'outils pour la cr&#233;ation et la manipulation de fichiers &#224; partir de son interface dans le navigateur web. Pour cr&#233;er un nouveau r&#233;pertoire dans Jupyter Notebook, cliquez sur <emph>New</emph> (<emph>nouveau</emph>) dans le coin sup&#233;rieur-gauche de la fen&#234;tre, puis choisissez <emph>Folder</emph> (<emph>r&#233;pertoire</emph>). Un nouveau r&#233;pertoire nomm&#233; <emph>Untitled Folder</emph> (<emph>r&#233;pertoire sans nom</emph>) appara&#238;tra. Pour le renommer, cliquez sur la case &#224; cocher &#224; la gauche de <emph>Untitled Folder</emph>, puis cliquez sur le bouton <emph>Rename</emph> (<emph>renommer</emph>) qui appara&#238;t sous l'onglet <emph>Files</emph> (<emph>fichiers</emph>). Donnez un nom significatif &#224; votre r&#233;pertoire, par exemple <emph>carnets</emph>, et cliquez sur celui-ci pour l'ouvrir.</p>
</div><div type="3"><head>T&#233;l&#233;verser les donn&#233;es requises par notre exemple</head>
<p>Le fichier CSV qui contient les donn&#233;es que nous manipulerons dans cette le&#231;on est un extrait des m&#233;tadonn&#233;es portant sur des oeuvres de fiction r&#233;dig&#233;es par des fans de la s&#233;rie <emph>Harry Potter</emph>. Ces m&#233;tadonn&#233;es ont &#233;t&#233; r&#233;colt&#233;es sur le site de <emph>fan fiction</emph> italien <link target="https://efpfanfic.net">Efpfanfic.net</link>. Elles ont &#233;t&#233; nettoy&#233;es &#224; l'aide <link target="/fr/lecons/comprendre-les-expressions-regulieres">d'expressions r&#233;guli&#232;res</link> et du logiciel <link target="/fr/lecons/nettoyer-ses-donnees-avec-openrefine">OpenRefine</link>. Le fichier CSV contient trois colonnes: une cote qui d&#233;crit le contenu du r&#233;cit (comme la cote accord&#233;e &#224; un film qui identifie le public auquel celui-ci est destin&#233;), sa date de publication et la date de sa plus r&#233;cente modification. Les cotes possibles sont <emph>verde</emph> (vert), <emph>giallo</emph> (jaune), <emph>arancione</emph> (orange) et <emph>rosso</emph> (rouge). Les dates de publication et de modification sont calcul&#233;es automatiquement lorsque le texte d'un r&#233;cit est publi&#233; ou mis &#224; jour sur le site.</p>
<p>Le site enregistre toujours les dates dans le m&#234;me format. Gr&#226;ce &#224; cette r&#233;gularit&#233;, il devrait nous &#234;tre possible de calculer les jours de la semaine qui correspondent &#224; chacune de ces dates &#224; l'aide de scripts Python. Un carnet Jupyter constitue un environnement commode dans lequel exp&#233;rimenter avec diverses mani&#232;res de r&#233;soudre ce probl&#232;me.</p>
<p>Avant d'aller plus loin, t&#233;l&#233;chargez [le fichier CSV]({{ site.baseurl }}/assets/jupyter-notebooks/ph-jupyter-notebook-example.csv).</p>
<p>Revenez maintenant &#224; l'interface de Jupyter Notebook. Celle-ci devrait afficher le contenu du r&#233;pertoire <emph>carnets</emph> que vous venez de cr&#233;er. Dans le coin sup&#233;rieur-droit de l'&#233;cran, cliquez sur le bouton <emph>Upload</emph> (<emph>t&#233;l&#233;verser</emph>) et t&#233;l&#233;versez le fichier CSV. Il sera plus facile d'y acc&#233;der s'il se trouve dans le m&#234;me r&#233;pertoire que le carnet Jupyter que vous cr&#233;erez dans quelques instants pour convertir les dates qui s'y trouvent.</p>
<figure><desc>T&#233;l&#233;verser des fichiers dans l'interface Jupyter Notebook</desc><graphic url="jupyter-upload.png"/></figure>
<p>Veuillez noter qu'il ne s'agit pas de la seule mani&#232;re de faire appara&#238;tre des fichiers dans votre interface Jupyter Notebook. Le r&#233;pertoire <emph>carnets</emph> que vous avez cr&#233;&#233; sur votre ordinateur est un r&#233;pertoire comme les autres; vous pouvez donc utiliser votre gestionnaire de fichiers usuel (par exemple, Finder sur Mac ou Explorateur sous Windows) pour y copier des fichiers de donn&#233;es ou des fichiers .ipynb. Jupyter Notebooks utilise le r&#233;pertoire o&#249; l'on trouve le carnet lui-m&#234;me (le fichier .ipynb) comme point de d&#233;part par d&#233;faut. Dans le cadre d'un cours ou d'un atelier, il peut &#234;tre avantageux de cr&#233;er un r&#233;pertoire o&#249; regrouper &#224; la fois le carnet, les images attach&#233;es et les donn&#233;es &#224; traiter. Si toutes ces composantes n'apparaissent pas dans le m&#234;me r&#233;pertoire, il faudra inclure les chemins de navigation complets pour acc&#233;der &#224; celles-ci, ou encore utiliser du code Python pour changer le r&#233;pertoire de travail courant.</p>
</div><div type="3"><head>Cr&#233;er un nouveau carnet</head>
<p><a id="creating"/>
Nous allons maintenant cr&#233;er un nouveau carnet dans votre r&#233;pertoire <emph>carnets</emph> afin de convertir les dates de votre projet de recherche. Cliquez sur le bouton <emph>New</emph> (<emph>nouveau</emph>) dans le coin sup&#233;rieur-droit de votre interface Jupyter Notebook. Si vous venez d'installer Anaconda en suivant la proc&#233;dure d&#233;crite ci-dessus, vous n'aurez pas d'autre choix que de cr&#233;er un carnet Jupyter qui utilise le <emph>noyau</emph> Python 3 (le noyau est l'infrastructure cach&#233;e qui ex&#233;cute le code du carnet) mais nous expliquerons bient&#244;t comment ajouter des noyaux pour d'autres langages de programmation. Cliquez sur <emph>Python 3</emph> et Jupyter Notebook ouvrira dans votre navigateur web un onglet o&#249; s'affichera votre nouveau carnet. Par d&#233;faut, celui-ci s'appellera <emph>Untitled</emph> ("sans titre"); vous pouvez cliquer sur ce mot au haut de l'&#233;cran pour donner &#224; votre carnet un nom plus significatif.</p>
<figure><desc>Cr&#233;ation d'un nouveau carnet Jupyter</desc><graphic url="jupyter-createnew.png"/></figure>
</div><div type="3"><head>Travailler avec les carnets Jupyter</head>
<p>Un carnet est form&#233; d'un ensemble de <emph>cellules</emph>, c'est-&#224;-dire de bo&#238;tes qui contiennent soit du code, soit du texte en langage naturel. On choisit le type de contenu qui appara&#238;t dans une cellule &#224; l'aide d'une liste d&#233;roulante situ&#233;e dans la barre de menu. L'option par d&#233;faut est <emph>Code</emph>; le texte en langage naturel destin&#233; &#224; &#234;tre lu par les &#234;tres humains est de type "Markdown" et devra donc &#234;tre r&#233;dig&#233; en suivant les conventions de mise en forme de Markdown. Pour en savoir plus long sur Markdown, veuillez consulter la le&#231;on du Programming Historian intitul&#233;e <link target="/fr/lecons/debuter-avec-markdown">&#171; D&#233;buter avec Markdown &#187;</link>.</p>
<p>Par d&#233;faut, la premi&#232;re cellule d'un nouveau carnet Jupyter est toujours une cellule de code. Voici comment transformer celle-ci en cellule Markdown. Au haut de l'interface Jupyter Notebook se trouve une barre d'outils dont les fonctions s'appliquent &#224; la cellule courante. L'un des outils est une liste d&#233;roulante dont l'option par d&#233;faut est <emph>Code</emph>. Cliquez sur cette liste d&#233;roulante et choisissez plut&#244;t <emph>Markdown</emph>. (Vous pouvez aussi utiliser le raccourci clavier <emph>Esc+m</emph> pour d&#233;signer la cellule courante comme une cellule Markdown, ou encore <emph>Esc+y</emph> pour la d&#233;signer &#224; nouveau comme une cellule de code.)</p>
<p>Donnons maintenant &#224; ce nouveau carnet un titre et une br&#232;ve description des t&#226;ches qu'il doit accomplir. Pour le moment, ces informations ne sont qu'un simple aide-m&#233;moire pour vous; il n'est pas n&#233;cessaire de consacrer beaucoup de temps &#224; leur r&#233;daction, d'autant plus que vous ne savez pas encore si le code que vous d&#233;velopperez dans ce carnet se retrouvera dans la version finale de votre projet ou si vous finirez par le mettre au rancart au profit d'une toute autre m&#233;thode. Quoi qu'il en soit, il peut &#234;tre utile d'inclure quelques cellules en Markdown pour annoter votre carnet et vous aider &#224; retracer les &#233;tapes de votre r&#233;flexion plus tard au besoin.</p>
<p>Copiez-collez les lignes de texte suivantes dans la cellule dont vous venez de changer le type pour <emph>Markdown</emph>. Si la premi&#232;re ligne n'appara&#238;t pas en gros caract&#232;res (c'est-&#224;-dire comme un titre), assurez-vous que vous avez bien assign&#233; le type de contenu <emph>Markdown</emph> &#224; cette cellule.</p>
<pre><code xml:id="code_introduction-aux-carnets-jupyter-notebooks_0" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_0.txt"/></pre>
<figure><desc>&#201;dition d'une cellule en Markdown dans un carnet Jupyter</desc><graphic url="jupyter-editing-fr.jpg"/></figure>
<p>Pendant l'&#233;dition d'une cellule, vous pouvez utiliser la commande <emph>Ctrl+Z</emph> (sous Windows) ou <emph>Commande+Z</emph> (sur Mac) pour annuler vos plus r&#233;centes modifications. Notez que chaque cellule conserve son propre historique; m&#234;me si vous entrez dans une autre cellule et que vous y apportez des changements, il vous suffira de revenir &#224; la premi&#232;re cellule en cliquant sur celle-ci pour pouvoir annuler les changements que vous avez apport&#233;s &#224; cette premi&#232;re cellule sans perdre ceux que vous avez apport&#233;s &#224; la seconde.</p>
<p>Pour quitter le mode d'&#233;dition et &#171; ex&#233;cuter &#187; une cellule (ce qui, dans le cas d'une cellule Markdown, ne fait rien sauf rafra&#238;chir son affichage et avancer le curseur &#224; la cellule suivante), vous pouvez cliquer sur <i class="fa-step-forward fa"/> dans la barre d'outils ou appuyer sur <emph>Ctrl+Entr&#233;e</emph> (<emph>Ctrl+Retour</emph> sur Mac). Pour recommencer &#224; &#233;diter le contenu de la cellule, double-cliquez sur elle, ou encore s&#233;lectionnez-la en cliquant (une fois) sur elle, ce qui affichera une barre verticale bleue &#224; sa gauche, puis appuyez sur la touche <emph>Entr&#233;e</emph> (Windows) ou <emph>Retour</emph> (Mac). Pour quitter le mode d'&#233;dition, cliquez sur <i class="fa-step-forward fa"/> dans la barre d'outils ou appuyez sur <emph>Ctrl+Entr&#233;e</emph> (<emph>Ctrl+Retour</emph> sur Mac). Pour ex&#233;cuter la cellule courante et ins&#233;rer automatiquement une nouvelle cellule de code imm&#233;diatement sous celle-ci, appuyez sur <emph>Alt+Entr&#233;e</emph> (<emph>Option+Retour</emph> sur Mac)</p>
<p>Il est maintenant temps de trouver la m&#233;thode &#224; implanter pour effectuer les conversions de dates. Une recherche par mots-cl&#233;s dans un moteur de recherche pourrait vous guider jusqu'&#224; ce <link target="https://stackoverflow.com/questions/2265357/parse-date-string-and-change-format">fil de discussion sur StackOverflow</link>, o&#249; la premi&#232;re solution propos&#233;e requiert l'utilisation du module <emph>datetime</emph> de Python. La premi&#232;re &#233;tape de cette solution consiste &#224; importer <emph>datetime</emph> &#224; l'aide d'une cellule de code. Puisque vous savez que votre fichier de donn&#233;es est en format CSV, vous devriez en profiter pour importer aussi le module <emph>csv</emph>.</p>
<p>Pour ajouter une nouvelle cellule, cliquez sur le bouton <emph>Plus</emph> <i class="fa fa-plus"/> dans la barre d'outils ou utilisez le raccourci clavier <emph>Esc+b</emph>. Une nouvelle cellule de code appara&#238;tra sous la cellule courante. Dans cette nouvelle cellule de code, copiez-collez les lignes suivantes:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_1" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_1.txt"/></pre>
<p>Sachant qu'il est possible que vous partagiez plus tard ce carnet ou un d&#233;riv&#233; de celui-ci avec des coll&#232;gues, il pourrait &#234;tre souhaitable de placer les importatations de modules dans une cellule et le code dans une ou plusieurs autres. Ainsi, vous pourrez ais&#233;ment ins&#233;rer des cellules de texte en Markdown entre ces cellules pour bien expliquer ce que chacune doit accomplir.</p>
<p>Les deux modules que vous venez d'importer dans votre carnet font d&#233;j&#224; partie de l'ensemble install&#233; avec Anaconda. Tel que nous l'avons mentionn&#233; plus t&#244;t, il est possible que votre recherche ait besoin de modules plus sp&#233;cialis&#233;s, comme le <link target="https://github.com/cltk/cltk">Classical Languages Toolkit, CLTK</link>, qui est con&#231;u pour l'analyse de textes en langues anciennes. Ces modules sp&#233;cialis&#233;s ne sont pas inclus dans la distribution Anaconda et ne sont pas accessibles &#224; l'aide de l'installateur <emph>conda</emph>. Si vous avez besoin d'un module de ce genre, vous devrez l'installer &#224; l'aide de <emph>pip</emph>.</p>
<p>Sachez qu'installer des modules &#224; partir d'un carnet Jupyter peut &#234;tre d&#233;licat en raison des diff&#233;rences entre le <emph>noyau Jupyter</emph> du carnet et d'autres versions de Python qui peuvent coexister avec lui sur votre ordinateur. Une discussion longue et technique des enjeux que vous pourriez devoir confronter en pareille situation appara&#238;t dans ce <link target="https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/">billet de blogue</link>. Ceci dit, si vous travaillez sur un carnet que vous pr&#233;voyez partager et que celui-ci requiert des modules relativement peu communs, vous pouvez soit inclure des instructions dans une cellule Markdown pour avertir les usagers des modules &#224; pr&#233;-installer (&#224; l'aide de conda ou de pip) ou encore utiliser les commandes suivantes dans une cellule de code de votre carnet:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_2" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_2.txt"/></pre>
<p>Ces lignes de code indiquent &#224; Jupyter Notebook que vous souhaitez installer le module NomDeVotreModuleIci &#224; partir du carnet en utilisant conda. La syntaxe <code type="inline">!</code> indique &#224; Notebook que le code doit &#234;tre ex&#233;cut&#233; &#224; la ligne de commande du syst&#232;me d'exploitation plut&#244;t qu'&#224; l'aide du noyau Jupyter. Si le module &#224; installer n'est pas disponible dans conda (c'est le cas de plusieurs modules sp&#233;cialis&#233;s pour la recherche), utilisez plut&#244;t pip:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_3" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_3.txt"/></pre>
<p>Notez aussi que, si vous n'aviez jamais install&#233; Python sur votre ordinateur avant de t&#233;l&#233;charger Anaconda pour cette le&#231;on, il est possible que vous deviez ajouter manuellement le module <emph>pip</emph> avant de pouvoir l'utiliser pour t&#233;l&#233;charger d'autres modules. Vous pouvez le faire &#224; l'aide de l'interface graphique Anaconda Navigator ou en entrant <code type="inline">conda install pip</code> &#224; la ligne de commande.</p>
<p>Revenons maintenant &#224; notre exemple. Ins&#233;rez une nouvelle cellule de code sous les pr&#233;c&#233;dentes et copiez-collez le code suivant dans celle-ci, en prenant bien soin d'inclure les tabulations pour que les lignes de code soient align&#233;es correctement (parce que l'indentation a une signification pr&#233;cise en Python):</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_4" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_4.txt"/></pre>
<p>S&#233;lectionnez la cellule, puis cliquez sur le bouton <i class="fa-step-forward fa"/> dans la barre d'outils pour ex&#233;cuter le code de la cellule. Attention: si vous tentez d'ex&#233;cuter ce code apr&#232;s avoir import&#233; les modules <emph>csv</emph> et <emph>datetime</emph> tel qu'expliqu&#233; ci-dessus, vous recevrez un message d'erreur: "ValueError: time data '1/7/18' does not match format '%d/%m/%Y'". Ne vous en faites pas: nous allons corriger ce probl&#232;me bient&#244;t.</p>
<p>Lorsque l'ex&#233;cution du code contenu dans une cellule est termin&#233;e, un nombre entour&#233; de crochets appara&#238;t &#224; la gauche de la cellule. Ce nombre indique la position de cette cellule dans l'ordre d'ex&#233;cution. Si vous ex&#233;cutez le contenu de la cellule &#224; nouveau, le nombre sera mis &#224; jour.</p>
<p>Si, au lieu d'un nombre, vous voyez plut&#244;t un ast&#233;risque entre crochets appara&#238;tre &#224; gauche de la cellule, c'est parce que l'ex&#233;cution du code n'est pas termin&#233;e. C'est normal, surtout dans les cas de t&#226;ches qui requi&#232;rent beaucoup de ressources (comme le traitement du langage naturel) ou qui durent longtemps (comme la cuillette de donn&#233;es sur le Web). Par ailleurs, lorsqu'une cellule est en cours d'ex&#233;cution, la <link target="https://fr.wikipedia.org/wiki/Favicon">favicon</link> qui appara&#238;t dans l'onglet de votre navigateur o&#249; se trouve le carnet est remplac&#233;e par un sablier<i class="fa fa-hourglass-start"/>. Vous pouvez passer &#224; un autre onglet et vous atteler &#224; une autre t&#226;che pendant que le code s'ex&#233;cute; vous saurez qu'il a termin&#233; lorsque le sablier c&#233;dera sa place &#224; l'ic&#244;ne normale des carnets <i class="fa-book fa"/>.</p>
<figure><desc>Ex&#233;cution d'une cellule de code dans un carnet Jupyter</desc><graphic url="jupyter-running-code-fr.jpg"/></figure>
<p>Ex&#233;cutez maintenant les deux cellules de code qui apparaissent dans votre carnet, en commen&#231;ant par celle du haut.</p>
<p class="alert alert-block alert-warning" style="alert alert-block alert-warning">
Les carnets Jupyter fonctionnent mieux lorsque les cellules s'ex&#233;cutent en ordre. Il est possible que vous obteniez des erreurs d'ex&#233;cution ou des r&#233;sultats incorrects lorsque vous ex&#233;cutez les cellules dans le d&#233;sordre. Si vous avez effectu&#233; beaucoup de changements &#224; votre code ou que vous ex&#233;cutez vos cellules dans un ordre non lin&#233;aire et que vous obtenez des r&#233;sultats qui vous semblent bizarres, vous pouvez r&#233;initialiser Jupyter Notebook en cliquant sur le menu <i>Kernel</i> (&#171; noyau	&#187;) et en choisissant l'option <i>Restart &amp; Clear Output</i> (&#171; red&#233;marrer et effacer les r&#233;sultats	&#187;). M&#234;me si vous ne remarquez rien qui sorte de l'ordinaire, il peut &#234;tre souhaitable de r&#233;initialiser Notebook et d'ex&#233;cuter &#224; nouveau tout votre code une fois que vous avez termin&#233; sa r&#233;daction, ne serait-ce que pour v&#233;rifier que tout se passe bien.</p>
<p>Tel que mentionn&#233; plus t&#244;t, un message d'erreur s'affiche lorsque vous ex&#233;cutez votre deuxi&#232;me cellule de code. Pour comprendre ce qui se passe, vous pouvez consulter <link target="https://docs.python.org/fr/2/library/datetime.html?highlight=strftime#strftime-and-strptime-behavior">la documentation du module datetime</link> qui explique toutes les options de mise en forme des affichages. Vous remarquerez alors que ce module ne &#171; comprend &#187; que les num&#233;ros de jours &#224; deux chiffres, c'est-&#224;-dire que les jours dont le num&#233;ro n'a qu'un chiffre doivent &#234;tre &#171; rembourr&#233;s &#187; avec un z&#233;ro. Or, si vous examinez le fichier de donn&#233;es CSV, vous constaterez que les mois sont &#171; rembourr&#233;s &#187; de z&#233;ros mais que les jours ne le sont pas. Vous disposez alors de deux options: changer les donn&#233;es ou changer le code.</p>
<p>Supposons que vous d&#233;cidiez d'essayer d'abord de changer votre code, mais que vous voulez conserver le travail que vous avez effectu&#233; jusqu'ici au cas o&#249; il s'av&#233;rerait n&#233;cessaire de revenir en arri&#232;re et de tenter plut&#244;t une approche bas&#233;e sur la modification des donn&#233;es. Pour bien vous rappeler de ce que vous avez fait jusqu'&#224; maintenant, ins&#233;rez une cellule Markdown au-dessus de votre deuxi&#232;me cellule de code. Cliquez sur la premi&#232;re cellule de code, puis sur le bouton <emph>Plus</emph> <i class="fa fa-plus"/> de la barre d'outils (si vous appuyez directement sur <emph>Plus</emph> apr&#232;s avoir ex&#233;cut&#233; la derni&#232;re cellule de code, la nouvelle cellule appara&#238;tra tout en bas de votre carnet. N'ayez crainte: vous pouvez la d&#233;placer au bon endroit en cliquant sur le bouton marqu&#233; d'une fl&#232;che pointant vers le haut <i class="fa fa-arrow-up"/>.) Assurez-vous maintenant que cette cellule soit de type Markdown, puis copiez-y le texte suivant:</p>
<pre><code xml:id="code_introduction-aux-carnets-jupyter-notebooks_5" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_5.txt"/></pre>
<p>Si vous poursuivez la lecture du <link target="https://stackoverflow.com/a/16115575">fil de discussion StackOverflow</link> mentionn&#233; plus t&#244;t, vous remarquerez l'existence d'une autre approche bas&#233;e sur un module nomm&#233; <emph>dateutil</emph> qui semble plus flexible au sujet des formats de dates qu'il accepte. Retournez &#224; la cellule dans laquelle vous avez d&#233;j&#224; import&#233; des modules et ajoutez-y la ligne suivante, n'importe o&#249; dans la cellule en autant que chaque d&#233;claration apparaisse sur sa propre ligne:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_6" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_6.txt"/></pre>
<p>Ex&#233;cutez &#224; nouveau cette cellule. Vous remarquerez que le nombre qui appara&#238;t &#224; la gauche de la cellule a chang&#233; par rapport &#224; la premi&#232;re fois, comme nous l'avions mentionn&#233; plus t&#244;t.</p>
<p>Ajoutez maintenant une nouvelle cellule Markdown &#224; la fin du carnet et copiez-collez le texte suivant dans cette cellule:</p>
<pre><code xml:id="code_introduction-aux-carnets-jupyter-notebooks_7" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_7.txt"/></pre>
<p>Sous cette cellule, ajoutez une nouvelle cellule de code et copiez-collez le code suivant en faisant bien attention de pr&#233;server les tabulations pour que le code soit indent&#233; pr&#233;cis&#233;ment comme il appara&#238;t ci-dessous:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_8" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_8.txt"/></pre>
<p>Ex&#233;cutez cette nouvelle cellule de code. Cela pourrait prendre un certain temps; patientez jusqu'&#224; ce que l'ast&#233;risque &#224; gauche de la cellule soit remplac&#233; par un nombre. Vous devriez voir s'afficher une liste de dates de publications formatt&#233;es diff&#233;remment, avec des traits d'union plut&#244;t que des barres obliques, et avec les heures, minutes et secondes ajout&#233;es aux dates (toutes en z&#233;ros puisque les donn&#233;es ne contiennent pas ces informations). &#192; premi&#232;re vue, tout semble correct... Mais si vous comparez minutieusement ces r&#233;sultats avec le fichier de donn&#233;es, vous remarquerez que l'analyse des dates n'est pas toujours coh&#233;rente. Les dates qui apparaissent apr&#232;s le 12 du mois sont interpr&#233;t&#233;es correctement parce que le module sait qu'un nombre sup&#233;rieur &#224; 12 ne peut pas repr&#233;senter un mois. Mais lorsque le nombre associ&#233; au jour est de 12 ou moins, la date est interpr&#233;t&#233;e comme si le mois apparaissait en premier. Par exemple, la premi&#232;re ligne du fichier de donn&#233;es contient la date 1/7/18, qui devrait correspondre au 1er juillet mais que le module interpr&#232;te comme &#171; 2018-01-07 00:00:00 &#187; , c'est-&#224;-dire le 7 janvier selon la convention en vigueur dans les pays anglophones. En consultant la documentation de dateutil, vous d&#233;couvrez cependant qu'il est possible de sp&#233;cifier dans le param&#232;tre <link target="https://dateutil.readthedocs.io/en/stable/parser.html">dayfirst=true</link> qu'il faut traiter la premi&#232;re composante d'une date comme le num&#233;ro du jour plut&#244;t que comme celui du mois. &#201;ditez votre derni&#232;re cellule de code pour que l'avant-derni&#232;re ligne stipule plut&#244;t:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_9" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_9.txt"/></pre>
<p>Lorsque vous ex&#233;cuterez &#224; nouveau cette cellule, vous constaterez que toutes les dates ont maintenant &#233;t&#233; interpr&#233;t&#233;es correctement.</p>
<p>D&#233;coder les dates ne constitue cependant que la premi&#232;re &#233;tape de notre travail. Il faut maintenant faire appel au module datetime pour convertir les dates en jours de la semaine.</p>
<p>Effacez la derni&#232;re ligne de votre bloc de code et remplacez-l&#224; par celles-ci, en vous assurant qu'elles sont indent&#233;es de fa&#231;on identiques &#224; la ligne qu'elles remplacent:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_10" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_10.txt"/></pre>
<p>Ex&#233;cutez le bloc de code &#224; nouveau. Vous devriez obtenir une liste de jours de la semaine.</p>
<p>NOTE DU TRADUCTEUR: si vous obtenez une liste de jours de la semaine en anglais ou dans une autre langue et que vous souhaitez plut&#244;t les avoir en fran&#231;ais, ins&#233;rez les deux lignes suivantes <emph>au d&#233;but</emph> de la cellule de code, puis ex&#233;cutez-la &#224; nouveau:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_11" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_11.txt"/></pre>
<p>Maintenant que vous disposez du code n&#233;cessaire pour d&#233;coder et transformer une date, il faut appliquer ce code aux deux dates qui apparaissent dans chacune des lignes de votre fichier de donn&#233;es. Puisque vous savez que le code qui se trouve dans votre cellule courante fonctionne, il pourrait &#234;tre utile d'en conserver une copie avant d'effectuer des modifications suppl&#233;mentaires, surtout si vous n'&#234;tes pas encore tr&#232;s confortable avec Python. S&#233;lectionnez la cellule &#224; copier et cliquez sur le bouton <i class="fa fa-files-o"/> dans la barre d'outils. Cliquez ensuite sur le bouton <i class="fa fa-clipboard"/> pour ins&#233;rer une nouvelle copie de la cellule sous la cellule courante. Vous pourrez ainsi effectuer tous les changements n&#233;cessaires &#224; votre code en sachant que vous disposez d'une version de r&#233;f&#233;rence qui fonctionnait parfaitement.</p>
<p>Si vous ne souhaitez pas tenter de d&#233;velopper une solution par vous-m&#234;me, vous pouvez copier-coller le bloc de code suivant dans une nouvelle cellule ou encore vous en servir pour remplacer le contenu de la cellule courante:</p>
<pre><code class="language-py" xml:id="code_introduction-aux-carnets-jupyter-notebooks_12" type="block" corresp="code_introduction-aux-carnets-jupyter-notebooks_12.txt"/></pre>
<p>L'ex&#233;cution de ce code cr&#233;era un nouveau fichier, intitul&#233; <emph>ph-jupyter-notebook-example-jours-de-semaine.csv</emph>, dans lequel vous trouverez les cotes et les jours de la semaine pour chacun des textes de fiction qui apparaissent dans le fichier de donn&#233;es d'origine.</p>
<p>Maintenant que vous avez r&#233;dig&#233; du code capable de convertir les dates comme vous le vouliez, vous pouvez faire le m&#233;nage dans les blocs de code incorrects et dans les notes que vous avez r&#233;dig&#233;es en cours de route. Il vous faudra conserver le premier bloc de code, qui contient les d&#233;clarations d'importation de modules, et la premi&#232;re cellule Markdown qui contient le titre et la description du projet. Vous pouvez cependant, si vous le d&#233;sirez, effacer les autres blocs de code et de texte en format Markdown qui ne correspondent pas au produit final. Pour effacer une cellule, cliquez sur celle-ci et cliquez ensuite sur la paire de ciseaux <i class="fa fa-scissors"/> dans la barre d'outils. Si vous effacez une cellule par erreur, vous pouvez la r&#233;cup&#233;rer en choisissant <emph>Undo Delete Cells</emph>(<emph>annuler l'effacement des cellules</emph>) dans le menu <emph>Edit</emph> de l'interface Jupyter Notebook.</p>
</div><div type="3"><head>Sauvegarder, exporter et publier des carnets Jupyter</head>
<p>Jupyter sauvegarde automatiquement votre travail en cr&#233;ant des &#171; points de rep&#232;re &#171; de temps &#224; autres. En cas de probl&#232;me, vous pouvez restaurer une version pr&#233;c&#233;dente de votre carnet en choisissant l'entr&#233;e &#171; Revert to Checkpoint &#187; (&#171; retour &#224; un point de rep&#232;re &#187;) du menu &#171; File &#187; (&#171; fichiers &#187;) et en choisissant l'horodatage du point de rep&#232;re &#224; r&#233;cup&#233;rer. Ceci dit, il est tout de m&#234;me important de sauvegarder votre travail &#224; l'aide du bouton <i class="fa fa-floppy-o"/> parce que les points de rep&#232;re disparaissent lorsque vous quittez Notebook ou que vous red&#233;marrez le noyau Jupyter.</p>
<p>Vous pouvez aussi exporter votre carnet sous diff&#233;rents formats en choisissant l'option de menu <emph>File &gt; Download as</emph>. T&#233;l&#233;charger une copie en format Notebook (.ipynb) vous permet de partager toute la richesse de votre code et de votre carnet. Il est aussi possible d'extraire le code source, quel que soit le langage de programmation que vous utilisiez, dans un fichier de type appropri&#233;, comme .r si vous codez en R, .py si vous codez en Python ou .js pour du code JavaScript; dans ce cas, les cellules Markdown seront automatiquement transform&#233;es en commentaires. Vous pouvez aussi convertir votre carnet en page web (fichier .html), en Markdown (.md) ou en PDF par l'interm&#233;diaire de LaTeX. Pour convertir un carnet .ipynb en un autre format apr&#232;s l'avoir t&#233;l&#233;charg&#233;, vous pouvez faire appel &#224; l'utilitaire <link target="https://github.com/jupyter/nbconvert">nbconvert</link>.</p>
<p>Si vous utilisez un ou plusieurs carnet(s) Jupyter pour documenter le progr&#232;s de votre projet de recherche, il pourrait &#234;tre int&#233;ressant de les publier sur GitHub, accompagn&#233;s de diapos, d'affiches en PDF et/ou de donn&#233;es et de m&#233;tadonn&#233;es (selon ce qui est permis par les r&#232;gles du droit d'auteur), notamment afin d'&#234;tre en mesure de fournir un compl&#233;ment d'information &#224; votre auditoire lorsque vous effectuerez une pr&#233;sentation. Les visiteurs d'un d&#233;p&#244;t GitHub peuvent y visionner des version statiques (non-interactives) des carnets Jupyter qui s'y trouvent. Il est aussi possible de copier l'URL d'un d&#233;p&#244;t GitHub qui contient des carnets Jupyter dans l'outil <link target="https://nbviewer.jupyter.org/">nbviewer</link>, qui g&#233;n&#232;re des aper&#231;us parfois plus robustes et plus rapides. Quelle que soit l'option que vous choisissiez, il pourrait &#234;tre utile d'inclure dans votre carnet une cellule Markdown qui contient la citation que vous recommandez &#224; votre lectorat ainsi qu'un lien vers le d&#233;p&#244;t GitHub o&#249; votre carnet se trouve, surtout si celui-ci contient du code susceptible d'&#234;tre r&#233;utilis&#233; par d'autres dans le cadre de projets similaires.</p>
<p>Supposons maintenant que vous ayez d&#233;velopp&#233; le code de cette le&#231;on en mi-parcours d'un projet r&#233;el. Si vous utilisez les carnets pour documenter le progr&#232;s de votre recherche, il pourrait &#234;tre pr&#233;f&#233;rable de copier-coller le code qui se trouve dans votre derni&#232;re cellule vers un carnet existant (qui contient d&#233;j&#224; la documentation des &#233;tapes pr&#233;alables du projet) plut&#244;t que de le conserver dans un carnet s&#233;par&#233;.</p>
<p>Par ailleurs, les carnets Jupyter sont particuli&#232;rement utiles pour documenter un flot de travail lorsque le projet implique des collaborateurs qui n'y contribuent que pendant un court laps de temps, comme par exemple des &#233;tudiants de premier cycle en stage estival. Il est important d'aider ces collaborateurs temporaires &#224; comprendre et &#224; utiliser les normes du projet le plus rapidement possible; les carnets Jupyter peuvent expliquer ces normes &#233;tape par &#233;tape, indiquer o&#249; et comment les fichiers sont entrepos&#233;s et pointer les n&#233;ophytes vers des tutoriels externes et des outils de formation susceptibles de les aider &#224; acqu&#233;rir les comp&#233;tences n&#233;cessaires &#224; leur travail. Les projets Socialist Realism Project de Sarah McEleney et <link target="https://github.com/mchesterkadwell/bughunt-analysis">Text mining of English children's literature 1789-1914 for the representation of insects and other creepy crawlies</link> de Mary Chester-Kadwell constituent deux exemples de projets qui ont utilis&#233; les carnets Jupyter pour publier leurs m&#233;thodes de travail.</p>
<p>Lorsque votre projet avance, que vous pouvez publier en libre acc&#232;s et que vos jeux de donn&#233;es peuvent &#234;tre distribu&#233;s sans restriction, les carnets Jupyter constituent le moyen id&#233;al de rendre le code qui sous-tend votre argumentation scientifique visible, testable et r&#233;utilisable. Bien que les revues et les presses universitaires n'acceptent que rarement les soumissions sous forme de carnets Jupyter, rien ne vous emp&#234;che de d&#233;velopper une version parall&#232;le de vos articles qui inclut tout votre texte dans des cellules Markdown; il vous suffit alors d'ins&#233;rer des cellules de code aux endroits appropri&#233;s pour illustrer votre analyse de fa&#231;on claire et pr&#233;cise. Vous pourriez aussi inclure, en annexe du m&#234;me carnet ou dans un carnet s&#233;par&#233;, les cellules de code dans lesquelles vous avez pr&#233;par&#233; et nettoy&#233; vos donn&#233;es. Int&#233;grer votre code au texte d'un article savant augmente la probabilit&#233; que vos lecteurs et vos lectrices examineront ce code, puisqu'il sera possible de l'ex&#233;cuter &#224; partir du carnet dans lequel ils liront votre expos&#233;. Certains chercheurs et chercheuses (surtout en Europe) publient aussi leurs carnets sur <link target="https://zenodo.org/">Zenodo</link>, une archive accessible quelle que soit l'origine nationale, les sources de financement ou la discipline des auteurs et autrices. Zenodo accepte des jeux de donn&#233;es d'une taille allant jusqu'&#224; 50 Go (GitHub, en comparaison, limite la taille des fichiers d&#233;pos&#233;s &#224; 100 Mo) et fournit des identificateurs DOI pour les mat&#233;riaux t&#233;l&#233;vers&#233;s, y compris les carnets. Certains projets choisissent de b&#233;n&#233;ficier &#224; la fois de la durabilit&#233; de l'archivage sur Zenodo et de la trouvabilit&#233; de la publication sur GitHub, en incluant le DOI fourni par Zenodo dans le fichier readme.md du d&#233;p&#244;t GitHub qui renferme leurs carnets. Par exemple, le carnet de la s&#233;ance de travail <link target="https://github.com/mromanello/ADA-DHOxSS2019">&#171; Applied Data Analytics &#187; du congr&#232;s DHOxSS 2019</link>, d&#233;velopp&#233; par Giovanni Colavizza et Matteo Romanello, est publi&#233; sur GitHub et inclut un DOI tir&#233; de Zenodo.</p>
<p>Bien que les documents qui int&#232;grent pleinement l'argumentation scientifique et le code soient encore peu nombreux, faute de d&#233;bouch&#233;s pour leur publication, la communaut&#233; scientifique a commenc&#233; &#224; utiliser les carnets Jupyter pour franchir quelques pas en direction de la publication dynamique. Jos&#233; Calvo propose notamment un carnet qui accompagne <link target="https://github.com/morethanbooks/publications/tree/master/Cervantes_Conquista">un article sur la stylom&#233;trie (en espagnol)</link> tandis que James Dobson a publi&#233; <link target="https://github.com/jeddobson/cdh">un ensemble de carnets</link> pour accompagner sa monographie  <emph>Critical Digital Humanities: The Search for a Methodology</emph>, qui analyse explicitement les carnets Jupyter en tant qu'objets scientifiques (p. 39-41).</p>
</div></div>
      <div type="2"><head>Utiliser les carnets Jupyter en classe</head>
<p>Les carnets Jupyter constituent un excellent outil d'enseignement de la programmation et d'introduction &#224; des concepts comme la <link target="https://fr.wikipedia.org/wiki/Topic_model">mod&#233;lisation th&#233;matique</link> et le <link target="https://fr.wikipedia.org/wiki/Word_embedding">plongement lexical</link>, qui requi&#232;rent une expertise technique consid&#233;rable. La possibilit&#233; d'alterner les cellules de code et les cellules Markdown permet aux enseignant(e)s de fournir des instructions d&#233;taill&#233;es et contextuelles, o&#249; les cellules Markdown expliquent le code qui se trouve dans les cellules qui les suivent. Ce m&#233;canisme se r&#233;v&#232;le particuli&#232;rement utile lors d'ateliers de formation puisque le code et les instructions peuvent &#234;tre pr&#233;par&#233;s &#224; l'avance. Les participant(e)s n'ont qu'&#224; ouvrir les carnets, &#224; t&#233;l&#233;charger les jeux de donn&#233;es et &#224; ex&#233;cuter le code tel quel. Si vous pr&#233;voyez animer un atelier dont les participants ne sont pas tous et toutes au m&#234;me niveau en mati&#232;re de familiarit&#233; avec la programmation, vous pouvez int&#233;grer &#224; vos carnets des activit&#233;s suppl&#233;mentaires destin&#233;es aux plus exp&#233;riment&#233;(e)s, tandis que m&#234;me les n&#233;ophytes qui h&#233;sitent &#224; se plonger dans le code seront en mesure d'acqu&#233;rir l'essentiel de la formation en ex&#233;cutant des cellules de code pr&#233;par&#233;es par vous.</p>
<p>Une autre approche p&#233;dagogique consiste &#224; utiliser les carnets Jupyter pour r&#233;diger du code en temps r&#233;el. Dans un tel sc&#233;nario, les &#233;tudiant(e)s commencent l'atelier avec un carnet vide et r&#233;digent le code en m&#234;me temps que vous. La division en cellules permet de compartimenter le code pendant sa r&#233;daction, ce qui &#233;vite la confusion qui risque de s'installer lorsque l'on utilise un &#233;diteur de texte ou un environnement de d&#233;veloppement int&#233;gr&#233;, surtout chez les n&#233;ophytes.</p>
<p>Vous pouvez aussi utiliser les carnets Jupyter pour organiser des exercices en classe. Inscrivez les instructions dans des cellules Markdown et invitez les &#233;tudiant(e)s &#224; suivre ces instructions pour r&#233;soudre des probl&#232;mes dans des cellules de code vides ou partiellement remplies par vous au pr&#233;alable. Vous pouvez ainsi mettre en place des exercices de programmation interactifs qui permettent aux &#233;tudiant(e)s d'acqu&#233;rir non seulement la syntaxe et le vocabulaire d'un langage sp&#233;cifique, mais aussi les meilleures pratiques en mati&#232;re de programmation en g&#233;n&#233;ral.</p>
<p>Enfin, si vous employez d&#233;j&#224; les carnets Jupyter pour documenter les flots de travail de vos projets de recherche, vous pourriez &#234;tre en mesure de reformuler ces carnets de recherche pour un usage en classe et ainsi d'int&#233;grer votre recherche et votre enseignement. Cet [exemple de carnet]({{ site.baseurl }}/assets/jupyter-notebooks/ph-carnets-jupyter-exemple-fr.ipynb) combine quelques-unes des approches p&#233;dagogiques mentionn&#233;es plus t&#244;t. Sa premi&#232;re partie est con&#231;ue pour les &#233;tudiant(e)s qui n'ont pas d'exp&#233;rience de programmation ou presque; son objectif p&#233;dagogique principal consiste &#224; comparer le temps qu'il faut pour convertir des dates manuellement avec celui requis lorsque l'on dispose de code pour le faire. Vous pourriez utiliser ce carnet lors d'un exercice de laboratoire dans un cours d'introduction aux humanit&#233;s num&#233;riques ou &#224; l'histoire num&#233;rique, dans lequel les participant(e)s installent Anaconda et apprennent les bases des carnets Jupyter. Si la classe contient &#224; la fois des n&#233;ophytes et des programmeurs et programmeuses Python chevronn&#233;(e)s, vous pourriez sugg&#233;rer aux plus exp&#233;riment&#233;(e)s de travailler en &#233;quipes de deux ou trois personnes pour formuler des solutions aux probl&#232;mes pr&#233;sent&#233;s dans la seconde partie du carnet. Rappelez-vous que, si vous utilisez un tel exercice en classe pour que des &#233;tudiant(e)s en informatique r&#233;digent du code qui vous servira dans votre recherche, ces &#233;tudiant(e)s devraient &#234;tre reconnu(e)s comme collaborateurs et collaboratrices de votre projet et recevoir les mentions appropri&#233;es dans les publications qui en d&#233;couleront.<ref type="footnotemark" target="#4"/>.</p>
<p>Il existe plusieurs cours et ateliers d'introduction &#224; la programmation en Python pour les humanit&#233;s num&#233;riques, dont <link target="https://github.com/PonteIneptique/cours-python">Introduction &#224; Python et au d&#233;veloppement web avec Python pour les sciences humaines</link> de Thibault Cl&#233;rice, qui traduit des contenus d&#233;velopp&#233;s par Matthew Munson. Les carnets Jupyter servent aussi couramment dans les ateliers d'analyse textuelle, comme celui portant sur le plongement lexical qui a &#233;t&#233; anim&#233; par Eun Seo Jo, Javier de la Rosa et Scott Bailey <link target="https://github.com/sul-cidr/dh2018-word-vector-workshops">lors du congr&#232;s DH 2018</link>.</p>
<p><a id="cloud"/>
Enseigner avec les carnets Jupyter n'exige pas forc&#233;ment que l'on investisse le temps n&#233;cessaire pour t&#233;l&#233;charger et installer Anaconda, surtout si vous pr&#233;voyez que seulement une ou deux le&#231;ons utiliseront des carnets. Si vos activit&#233;s en classe impliquent l'utilisation de donn&#233;es que vous avez pr&#233;par&#233;es au pr&#233;alable et que vous avez d&#233;j&#224; r&#233;dig&#233; au moins une partie du code, il pourrait &#234;tre avantageux d'ex&#233;cuter vos carnets dans des environnements infonuagiques gratuits - &#224; condition que vos &#233;tudiant(e)s disposent d'une connexion Internet fiable en classe. Ex&#233;cuter des carnets dans le nuage pr&#233;sente aussi l'avantage d'assurer un environnement de travail identique &#224; tous et &#224; toutes (ce qui vous &#233;vitera d'avoir &#224; g&#233;rer les diff&#233;rences entre Windows et Mac), en plus d'offrir aux &#233;tudiant(e)s un moyen de participer m&#234;me si leurs ordinateurs ne disposent pas de l'espace disque ou de la m&#233;moire n&#233;cessaires pour ex&#233;cuter Anaconda efficacement.</p>
<p>Notez qu'il vaut mieux faire appel &#224; votre moteur de recherche favori pour conna&#238;tre la liste des environnements infonuagiques susceptibles d'accueillir vos carnets Jupyter puisque la liste des options varie constamment. Parmi les sites qui ont acquis une certaine popularit&#233; en milieu universitaire, notons <link target="https://mybinder.org/">MyBinder</link>, qui accepte un d&#233;p&#244;t GitHub contenant des carnets Jupyter (fichiers .ipynb), les fichiers de donn&#233;es associ&#233;s (images int&#233;gr&#233;es, jeux de donn&#233;es auxquels appliquer le code, etc.) et l'information au sujet des modules n&#233;cessaires et autres d&#233;pendances (dans un fichier intitul&#233; requirements.txt ou environment.yml) et en fait un ex&#233;cutable capable de rouler sur un serveur infonuagique. Une fois que MyBinder aura encapsul&#233; votre d&#233;p&#244;t GitHub, vous pourrez ajouter un  &#171; badge &#187; Binder au fichier lisez-moi de votre d&#233;p&#244;t. Quiconque visitera votre d&#233;p&#244;t pourra lancer le carnet directement &#224; partir de son navigateur web sans devoir t&#233;l&#233;charger ni installer quoi que ce soit.</p>
<p>Puisque MyBinder exige que les donn&#233;es requises par le carnet soient enregistr&#233;es dans votre d&#233;p&#244;t GitHub, cette strat&#233;gie ne fonctionnera pas en toutes circonstances. Par exemple, elle &#233;chouera si vous ne pouvez pas l&#233;galement distribuer vos donn&#233;es sur GitHub, si la taille de vos fichiers de donn&#233;es d&#233;passe la limite permise par GitHub, que vous ne pouvez pas t&#233;l&#233;charger vos fichiers de donn&#233;es automatiquement d'un autre d&#233;p&#244;t pendant la configuration de l'environnement Binder, ou que vous d&#233;sirez permettre &#224; vos visiteurs et visiteuses d'utiliser leurs propres donn&#233;es avec vos carnets. Il s'agit cependant d'une excellente option pour les ateliers et pour les cours o&#249; chacun(e) des participant(e)s travaille avec les m&#234;mes donn&#233;es librement partageables.</p>
<p>Si vous souhaitez explorer les options infonuagiques disponibles, Shawn Graham a cr&#233;&#233; une s&#233;rie d'exemples visant &#224; expliquer <link target="https://github.com/o-date/notebooks">comment configuer des carnets Jupyter en Python ou en R avec Binder</link>.</p>
<p>Enfin, si vous devez garder vos carnets <emph>hors</emph> des environnements infonuagiques, par exemple &#224; cause de la pr&#233;sence de donn&#233;es personnelles ou &#224; usage restreint, mais que vous voulez tout de m&#234;me offrir un environnement d'ex&#233;cution identique &#224; toute la classe, vous pouvez explorer <link target="https://jupyterhub.readthedocs.io/en/stable/">JupyterHub</link>, une solution d'infrastructure adopt&#233;e par un nombre croissant de programmes de recherche en sciences des donn&#233;es.</p>
</div>
      <div type="2"><head>Convertir du code Python existant</head>
<p>Si l'id&#233;e d'utiliser les carnets Jupyter avec votre base de code existante vous pla&#238;t, sachez tout de m&#234;me que n'importe quel passage d'un format &#224; un autre requiert un certain effort. Heureusement, convertir vos scripts Python en carnets Jupyter devrait &#234;tre relativement facile. Par exemple, vous pouvez copier-coller le code contenu dans un fichier .py dans une seule cellule de code appartenant &#224; un carnet neuf, puis diviser ce code entre plusieurs cellules et ins&#233;rer des &#233;l&#233;ments en Markdown au besoin.</p>
<p>Vous pouvez aussi segmenter votre code pendant son transfert en copiant-collant un segment &#224; la fois dans sa propre cellule. Les deux approches fonctionnent; il s'agit d'une question de pr&#233;f&#233;rence personnelle.</p>
<p>Il existe aussi des outils comme le <link target="https://pypi.org/project/p2j/">module p2j</link> qui convertit automatiquement du code Python existant en carnets Jupyter en suivant un ensemble de conventions bien document&#233;es, dont la conversion automatique des commentaires en cellules Markdown.</p>
</div>
      <div type="2"><head>Utiliser les carnets Jupyter avec d'autres langages de programmation</head>
<p>Les carnets Jupyter sont compatibles avec une vari&#233;t&#233; de langages de programmation dont R, Julia, JavaScript, PHP et Ruby. Vous pouvez consulter la liste compl&#232;te sur la page GitHub des <link target="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">noyaux Jupyter</link>.</p>
<p>Cependant, si toute l'infrastructure n&#233;cessaire pour interpr&#233;ter du code en Python est install&#233;e par d&#233;faut avec Anaconda, vous devrez installer vous-m&#234;mes les noyaux (&#171; kernels &#187;) des autres langages que vous souhaitez employer dans l'environnement Jupyter Notebook. Dans le cas de R, la proc&#233;dure &#224; suivre est relativement simple. Les m&#233;thodes d'installation varient cependant d'un langage &#224; l'autre; vous devrez suivre les instructions sp&#233;cifiques au langage de votre choix. La page GitHub des <link target="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">noyaux Jupyter</link> saura vous guider, quelle que soit votre pr&#233;f&#233;rence.</p>
<p>Une fois que vous aurez install&#233; le noyau du langage de votre choix, vous pourrez ex&#233;cuter des carnets r&#233;dig&#233;s dans ce langage ou en programmer vous-m&#234;me. Au moment de cr&#233;er nouveau carnet, Jupyter Notebook vous offrira le choix entre tous les langages dont les noyaux auront &#233;t&#233; install&#233;s sur votre ordinateur.</p>
<p>Pour consulter un exemple d'un carnet Jupyter en langage R, veuillez t&#233;l&#233;charger cette <link target="https://github.com/quinnanya/enumerations">adaptation du code tir&#233; de l'ouvrage &#171; Enumerations &#187; d'Andrew Piper</link>.</p>
</div>
      <div type="2"><head>Carnets Jupyter et calculs &#224; grande &#233;chelle</head>
<p>Parfois, surtout lorsque l'on d&#233;bute en programmation Python, r&#233;ussir &#224; faire fonctionner quelque chose - n'importe quoi - constitue d&#233;j&#224; une victoire. Mais lorsque la taille de nos jeux de donn&#233;es augmente, certaines de nos &#171; solutions &#187; (comme l'utilisation de la m&#233;thode .readlines() pour parcourir un fichier texte une ligne &#224; la fois) se montrent si co&#251;teuses en ressources de calcul qu'elles finissent par entra&#238;ner des cons&#233;quences inacceptables. Une bonne fa&#231;on de d&#233;tecter les inefficiences dans votre code consiste &#224; ajouter <code type="inline">%%timeit</code> au d&#233;but d'une cellule. Le carnet ex&#233;cutera le code un certain nombre de fois (le nombre d&#233;pend de la complexit&#233; de la t&#226;che &#224; accomplir) et affichera le nombre d'it&#233;rations et le temps d'ex&#233;cution moyen. Pourquoi ex&#233;cuter le code plusieurs fois? Pour &#171; filtrer &#187; les effets d'&#233;v&#233;nements fortuits reli&#233;s au fonctionnement du syst&#232;me d'exploitation, par exemple un d&#233;lai caus&#233; par le fait que votre ordinateur est temporairement occup&#233; &#224; accomplir une autre t&#226;che ind&#233;pendante de votre carnet Jupyter. Si vous voulez chronom&#233;trer plusieurs ex&#233;cutions d'une seule ligne de code plut&#244;t que d'une cellule enti&#232;re, ins&#233;rez <code type="inline">%timeit</code> au d&#233;but de la ligne. Faites preuve de prudence lorsque vous employez ces techniques: trier une liste prend beaucoup plus de temps &#224; la premi&#232;re it&#233;ration qu'aux suivantes puisque la liste est d&#233;j&#224; en ordre quand vient le temps d'essayer de la trier une deuxi&#232;me fois. Dans les cas de t&#226;ches comme le tri, o&#249; l'ex&#233;cution de multiples it&#233;rations du m&#234;me code peut &#234;tre trompeuse, ou lorsque les al&#233;as du fonctionnement du syst&#232;me sont n&#233;gligeables en comparaison avec le temps d'ex&#233;cution requis par une lourde t&#226;che, utilisez plut&#244;t <code type="inline">%%time</code> au d&#233;but d'une cellule ou <code type="inline">%time</code> au d&#233;but d'une ligne pour mesurer la dur&#233;e d'une seule ex&#233;cution. Ces commandes font partie d'une liste de &#171; mots magiques &#187; disponibles dans les carnets Jupyter; veuillez consulter la <link target="https://ipython.readthedocs.io/en/stable/interactive/magics.html">documentation de Jupyter</link> pour plus de d&#233;tails.</p>
<p>&#201;valuer le temps d'ex&#233;cution probable de votre code constitue un pr&#233;requis important lorsque vient le temps d'exploiter des ressources informatiques de niveau sup&#233;rieur, comme par exemple les grappes de serveurs de haute performance financ&#233;s et mis &#224; la disposition des chercheurs et des chercheuses par plusieurs institutions. La grande majorit&#233; des scientifiques qui font appel &#224; ces ressources proviennent des sciences pures, mais en r&#232;gle g&#233;n&#233;rale tous les membres du corps professoral peuvent y avoir acc&#232;s sur demande. Il est parfois m&#234;me possible d'acc&#233;der &#224; des centres de calcul r&#233;gionaux ou nationaux. Ces centres de calcul acc&#233;l&#232;rent radicalement l'ex&#233;cution de t&#226;ches informatiques complexes; c'est notamment le cas des op&#233;rations de rendu 3D qui font appel &#224; des r&#233;seaux de serveurs dot&#233;s de processeurs graphiques (GPU) puissants. Apprendre comment tirer b&#233;n&#233;fice des ressources des centres de calcul constitue un sujet assez vaste pour justifier sa propre le&#231;on, mais les carnets Jupyter pourraient constituer une sorte de raccourci. En effet, certains centres de calcul proposent des m&#233;thodes simplifi&#233;es pour l'ex&#233;cution de carnets Jupyter sur des grappes de serveurs; il existe <link target="https://ask.cyberinfrastructure.org/t/how-can-i-run-jupyter-notebooks-on-my-institutions-hpc-cluster/74">une vari&#233;t&#233; de guides et d'exemples</link> qui pourront vous aider &#224; y voir clair. Si vous avez acc&#232;s &#224; ce genre de ressources, il vaut la peine de contacter le personnel des services informatiques de votre institution pour conna&#238;tre la marche &#224; suivre, surtout si la documentation disponible sur leur site web est lacunaire. Les techniciens et professionnels de recherche qui collaborent surtout avec des chercheurs en sciences pures communiquent parfois plus brusquement que ce &#224; quoi vous &#234;tes habitu&#233;s, mais ne vous laissez pas abattre - la plupart des &#233;quipes de services informatiques pour la recherche sont enthousiastes &#224; l'id&#233;e de contribuer &#224; des projets en lettres et en sciences humaines et veulent vous aider, ne serait-ce que parce qu'une diversit&#233; disciplinaire au sein de leurs client&#232;les constitue un facteur important dans l'&#233;valuation de leur performance &#224; l'&#233;chelle de l'universit&#233;.</p>
</div>
      <div type="2"><head>Conclusion</head>
<p>Qu'il s'agisse d'exp&#233;rimenter avec la programmation, de documenter les processus de travail, de faciliter l'enseignement ou de soutenir la publication savante, les carnets Jupyter constituent un outil flexible et polyvalent pour de multiples contextes de recherche num&#233;rique. M&#234;me si vous ne savez pas exactement quoi en faire, il est relativement facile d'installer le logiciel Jupyter Notebook, puis de t&#233;l&#233;charger et d'examiner des carnets r&#233;dig&#233;s par d'autres ou d'en r&#233;diger quelques-uns de votre cru. Surtout, les carnets Jupyter r&#233;pondent de mani&#232;re plus que prometteuse au besoin des chercheurs et des chercheuses qui d&#233;sirent b&#226;tir des ponts entre les aspects critiques et informatiques de leur travail. Concluons sur cette citation tir&#233;e de <emph>Critical Digital Humanities: The Search for a Methodology</emph> par James Dobson (traduction libre):</p>
<blockquote>
<p>Les carnets constituent en eux-m&#234;mes de la th&#233;orie - non seulement une fa&#231;on de percevoir le code comme de la th&#233;orie, mais de la v&#233;ritable th&#233;orie sous forme d'interaction consciente avec les implications th&#233;oriques du code. Les normes disciplinaires - dont l'encadrement conceptuel, la th&#233;orie et l'autocritique - doivent accompagner, compl&#233;ter et informer toute critique num&#233;rique. D&#233;voiler autant que possible le code, les donn&#233;es et les m&#233;thodes est essentiel pour entretenir une conversation disciplinaire. Assembler toutes ces composantes dans un seul objet, qui peut &#234;tre export&#233;, partag&#233;, examin&#233; et ex&#233;cut&#233; par d'autres, produit un type de th&#233;orisation dynamique &#224; la fois modulaire et &#233;troitement reli&#233; avec son sujet.<ref type="footnotemark" target="#5"/></p>
</blockquote>
</div>
      <div type="2"><head>Liens</head>
<ul>
<li>Vous trouverez ici une <link target="https://github.com/quinnanya/dh-jupyter">liste &#233;volutive de carnets Jupyter pour les humanit&#233;s num&#233;riques</link>, en plusieurs langues naturelles et en plusieurs langages informatiques. Merci &#224; tous ceux et &#224; toutes celles qui nous ont envoy&#233; leurs suggestions sur Twitter; des r&#233;f&#233;rences additionnelles sont toujours les bienvenues.</li>
<li>Vous trouverez ici une explication technique d&#233;taill&#233;e des m&#233;thodes &#224; suivre pour <link target="https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/">installer des modules Python &#224; partir de Jupyter</link>.</li>
</ul>
</div>
      <div type="2"><head>Remerciements</head>
<ul>
<li>
<p>Merci &#224; St&#233;fan Sinclair (<emph>N.D.L.R. d&#233;c&#233;d&#233; en 2020</emph>) pour les r&#233;f&#233;rences historiques portant sur l'utilisation des carnets dans les humanit&#233;s num&#233;riques.</p>
</li>
<li>
<p>Merci &#224; Rachel Midura pour avoir sugg&#233;r&#233; l'utilisation des carnets Jupyter dans le cadre de projets collaboratifs.</p>
</li>
<li>
<p>Merci &#224; Paige Morgan pour le rappel de l'importance de souligner les effets d'&#233;tat.</p>
</li>
</ul>
<p><note id="1"> Knuth, Donald. 1992. <emph>Literate Programming</emph>. Stanford, California: Center for the Study of Language and Information.</note></p>
<p><note id="2"> Millman, KJ et Fernando Perez. 2014.  &#171; Developing open source scientific practice  &#187;, dans <emph>Implementing Reproducible Research</emph>, &#233;dit&#233; par Victoria Stodden, Friedrich Leisch et Roger D. Peng. <link target="https://osf.io/h9gsd/">https://osf.io/h9gsd/</link></note></p>
<p><note id="3"> Sinclair, St&#233;fan et Geoffrey Rockwell. 2013.  &#171; Voyant Notebooks: Literate Programming and Programming Literacy &#187;. Journal of Digital Humanities, Vol. 2, No. 3 &#201;t&#233; 2013. <link target="http://journalofdigitalhumanities.org/2-3/voyant-notebooks-literate-programming-and-programming-literacy/">http://journalofdigitalhumanities.org/2-3/voyant-notebooks-literate-programming-and-programming-literacy/</link></note></p>
<p><note id="4"> Haley Di Pressi, Stephanie Gorman, Miriam Posner, Raphael Sasayama et Tori Schmitt, avec la collaboration de Roderic Crooks, Megan Driscoll, Amy Earhart, Spencer Keralis, Tiffany Naiman et Todd Presner.  &#171; A Student Collaborator's Bill of Rights  &#187;. <link target="https://humtech.ucla.edu/news/a-student-collaborators-bill-of-rights/">https://humtech.ucla.edu/news/a-student-collaborators-bill-of-rights/</link></note></p>
<p><note id="5"> Dobson, James. 2019. <emph>Critical Digital Humanities: The Search for a Methodology</emph>. Urbana-Champaign: University of Illinois Press. p. 40.</note></p>
</div>
    </body>
  </text>
</TEI>
