<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Criando uma aplica&#231;&#227;o Web interativa com R e Shiny</title>
  <slug>aplicacao-web-interativa-r-shiny-leaflet</slug>
  <original>shiny-leaflet-newspaper-map-tutorial</original>
  <layout>lesson</layout>
  <collection>lessons</collection>
  <date>2022-10-19</date>
  <translation_date>2023-10-14</translation_date>
  <authors>Yann Ryan</authors>
  <reviewers>Amanda Regan,Nicole Lemire Garlic</reviewers>
  <editors>Tiago Sousa Garcia,Alex Wermer-Colan</editors>
  <translator>Aracele Torres</translator>
  <translation-editor>Daniel Alves</translation-editor>
  <translation-reviewer>Joana Malta,Juciane Pereira</translation-reviewer>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/513</review-ticket>
  <difficulty>2</difficulty>
  <activity>presenting</activity>
  <topics>mapping,website,r,data-visualization</topics>
  <avatar_alt>Reflexo da luz da lua num lago</avatar_alt>
  <abstract>Esta li&#231;&#227;o demonstra como construir um mapa interativo na web usando R e a biblioteca Shiny. Na li&#231;&#227;o, ser&#225; projetado e implementado um aplicativo simples, que consiste num controlo deslizante que permite ao usu&#225;rio selecionar um intervalo de datas e exibir um conjunto de pontos correspondentes num mapa interativo.</abstract>
  <lesson-partners>Jisc,The National Archives</lesson-partners>
  <partnership-url>/pt/jisc-tna-parceria</partnership-url>
  <doi>10.46430/phpt0044</doi>
</metadata>
  <text xml:lang="pt">
    <body>
      <div type="2"><head>Introdu&#231;&#227;o</head>
<p>Esta li&#231;&#227;o demonstra como criar uma aplica&#231;&#227;o Web interativa b&#225;sica usando Shiny. Shiny &#233; uma biblioteca (um conjunto de fun&#231;&#245;es adicionais) para a linguagem de programa&#231;&#227;o R. O seu objetivo &#233; facilitar o desenvolvimento de aplica&#231;&#245;es Web, que permitem que um usu&#225;rio interaja com o c&#243;digo R usando elementos da Interface do Utilizador (UI) num navegador Web, como controlos deslizantes, menus suspensos e assim por diante. Na li&#231;&#227;o, ser&#225; projetada e implementada uma aplica&#231;&#227;o simples, consistindo num controlo deslizante que permite ao usu&#225;rio selecionar um intervalo de datas, que acionar&#225; algum c&#243;digo em R e exibir&#225; um conjunto de pontos correspondentes num mapa interativo. </p>
</div>
      <div type="2"><head>Objetivos da li&#231;&#227;o</head>
<p>Nesta li&#231;&#227;o, ir&#225; aprender:</p>
<ul>
<li>Como criar uma aplica&#231;&#227;o Shiny interativa b&#225;sica.</li>
<li>Os principais <emph>layouts</emph> e princ&#237;pios de design da UI Shiny.</li>
<li>O conceito e a pr&#225;tica de 'programa&#231;&#227;o reativa', conforme implementado por aplica&#231;&#245;es Shiny. Especificamente, aprender&#225; como usar Shiny para 'entender' informa&#231;&#245;es de <emph>input</emph> e como elas est&#227;o conectadas aos resultados a serem exibidos na sua aplica&#231;&#227;o.</li>
</ul>
<p class="alert alert-info" style="alert alert-info">
Saiba que esta li&#231;&#227;o n&#227;o ensina nenhuma codifica&#231;&#227;o em R, al&#233;m da suficiente para criar a aplica&#231;&#227;o, nem aborda a publica&#231;&#227;o da aplica&#231;&#227;o finalizada na Web. &#201; recomendado um conhecimento b&#225;sico em linguagem de programa&#231;&#227;o R, particularmente com o <link target="/pt/licoes/manipulacao-transformacao-dados-R">tidyverse</link>.
</p>
<div type="3"><head>Interfaces Gr&#225;ficas do Utilizador e Humanidades Digitais</head>
<p><link target="https://perma.cc/8SYH-TX26">Interfaces Gr&#225;ficas do Utilizador</link> (em ingl&#234;s) (GUI, na sigla em ingl&#234;s) e elementos interativos podem ajudar a tornar certos tipos de trabalhos acad&#233;micos baseados em dados mais acess&#237;veis ou leg&#237;veis. Para dar um exemplo simples, os historiadores que trabalham com um grande volume de dados (<emph>big data</emph>) podem querer demonstrar a mudan&#231;a numa vari&#225;vel ao longo do tempo. Um mapa interativo com uma linha do tempo ajust&#225;vel &#233;, em alguns casos, mais f&#225;cil de ler e permite mais granularidade do que uma s&#233;rie de mapas est&#225;ticos. Permitir que um usu&#225;rio defina os par&#226;metros da visualiza&#231;&#227;o pode ajudar a evitar alguns dos vieses frequentemente encontrados em visualiza&#231;&#245;es de dados usando s&#233;ries temporais (por exemplo, desenhar arbitrariamente um mapa por d&#233;cada).</p>
<p>Muitos projetos de pesquisa t&#234;m elementos interativos como resultados. Alguns exemplos incluem o <link target="https://tudornetworks.net/">Tudor Networks of Power</link> (em ingl&#234;s), uma visualiza&#231;&#227;o das redes nos Tudor State Papers, o <link target="https://livingwithmachines.ac.uk/press-tracer-visualise-newspaper-lineage/">Press Tracer</link> (em ingl&#234;s) interativo e (para dar um exemplo usando Shiny) o <link target="https://utrecht-university.shinyapps.io/GeoNewsMiner/">GeoNewsMiner</link> (em ingl&#234;s), que exibe men&#231;&#245;es geocodificadas num <emph>corpus</emph> de jornais. Aplica&#231;&#245;es interativas podem ser ferramentas &#250;teis para arquivistas: pesquisadores do National Archives UK <link target="https://perma.cc/C6U5-PYHF">criaram uma aplica&#231;&#227;o usando Shiny</link> (em ingl&#234;s) que avalia o n&#237;vel de risco numa cole&#231;&#227;o digital, por meio de uma s&#233;rie de perguntas respondidas por um usu&#225;rio.</p>
<p>Outro caso de uso t&#237;pico para aplica&#231;&#245;es interativas &#233; fornecer uma maneira mais f&#225;cil de explorar o seu pr&#243;prio conjunto de dados, sem nunca pretender que a pr&#243;pria aplica&#231;&#227;o seja disponibilizada publicamente. Pode-se simplesmente us&#225;-la para encontrar padr&#245;es interessantes ou como ponto de partida para pesquisas futuras. Dessa forma, a interatividade pode ser particularmente &#250;til para ajudar a explorar e encontrar padr&#245;es em conjuntos de dados de grande escala.</p>
</div><div type="3"><head>Op&#231;&#245;es para criar uma GUI</head>
<p>Existem v&#225;rias maneiras de abordar o desenvolvimento de visualiza&#231;&#245;es interativas semelhantes aos exemplos acima. Uma delas &#233; aprender a desenvolver uma ferramenta especializada projetada para manipular p&#225;ginas da Web em resposta a informa&#231;&#245;es de <emph>input</emph>, como a <link target="https://perma.cc/BG9S-KPJE">biblioteca Javascript D3</link> (em ingl&#234;s). Uma segunda op&#231;&#227;o seria usar ferramentas baseadas na Web existentes, sejam gerais, como <link target="https://perma.cc/M6Y9-9ZCP">Tableau</link> (em ingl&#234;s) e <link target="https://perma.cc/TAA2-W7WA">Rawgraphs</link> (em ingl&#234;s), ou com uma finalidade mais espec&#237;fica, como <link target="https://perma.cc/2W5A-PBJU">Palladio</link> (em ingl&#234;s) ou <link target="https://perma.cc/SS9Z-6DAG">Gephi</link> (em ingl&#234;s). Uma terceira abordagem pode ser usar <link target="https://perma.cc/CX23-VTAK">Jupyter notebooks</link> (em ingl&#234;s), que permitem compartilhar c&#243;digo interativo e at&#233; mesmo, com alguns <link target="https://perma.cc/ESA5-9MEJ">pacotes adicionais</link>, criar uma interface do usu&#225;rio.</p>
<p>Esta li&#231;&#227;o abrange uma quarta abordagem: fazer aplica&#231;&#245;es interativas com uma GUI usando uma biblioteca para uma linguagem de programa&#231;&#227;o de prop&#243;sito geral, como <link target="https://perma.cc/LXR5-BYC9">Bokeh</link> (em ingl&#234;s) ou <link target="https://perma.cc/J7T9-EHTJ">Dash</link> (em ingl&#234;s) para Python ou, conforme usado neste tutorial, <link target="https://perma.cc/CK9W-VRKN">Shiny</link> (em ingl&#234;s) para R. Tanto o Python quanto o R s&#227;o linguagens de programa&#231;&#227;o vers&#225;teis, de c&#243;digo aberto, amplamente usadas, com comunidades ativas e com uma enorme variedade de pacotes de terceiros. H&#225; muitas circunst&#226;ncias em que faz sentido us&#225;-las como base para aplica&#231;&#245;es interativas. Em ess&#234;ncia, esses pacotes atuam como interfaces interativas para a linguagem de programa&#231;&#227;o, permitindo a cria&#231;&#227;o de controlos deslizantes e outras funcionalidades, que podem ser usadas como informa&#231;&#227;o de <emph>input</emph> para alterar dinamicamente parcelas de c&#243;digo. Na maioria dos casos, estes pacotes n&#227;o exigem conhecimento t&#233;cnico do usu&#225;rio final. Como s&#227;o projetados para funcionar num navegador, funcionam em qualquer plataforma e s&#227;o f&#225;ceis de compartilhar.</p>
</div><div type="3"><head>Shiny e programa&#231;&#227;o reativa</head>
<p>Shiny &#233; baseada num conceito chamado <link target="https://perma.cc/SGQ8-BU48">reatividade</link>. Normalmente, ao codificar, definimos uma vari&#225;vel para um valor espec&#237;fico, digamos <code type="inline">x = 5</code>. Na <emph>programa&#231;&#227;o reativa</emph>, a vari&#225;vel depende de uma informa&#231;&#227;o de <emph>input</emph> vari&#225;vel, geralmente definida por um usu&#225;rio (de um controlo deslizante de texto ou lista suspensa, por exemplo). O c&#243;digo 'capta' as altera&#231;&#245;es nessas vari&#225;veis reativas e, sempre que essas vari&#225;veis especiais mudam, quaisquer resultados s&#227;o usados para gerar atualiza&#231;&#245;es automaticamente.</p>
<p>No entanto, essa atualiza&#231;&#227;o s&#243; acontece em <hi rend="bold">contextos reativos</hi>. Shiny tem tr&#234;s contextos reativos importantes: fun&#231;&#245;es <code type="inline">render*</code>, que s&#227;o usadas para criar objetos R e exibi-los na aplica&#231;&#227;o, <code type="inline">observe({})</code> e <code type="inline">reactive({})</code>. Neste tutorial, usar&#225; a reatividade para criar um <emph>dataframe</emph> resumido de t&#237;tulos de jornais e suas datas, que &#233; atualizado dinamicamente com base num <emph>input</emph> de datas do usu&#225;rio. Em outras partes da sua aplica&#231;&#227;o, usar&#225; uma fun&#231;&#227;o <code type="inline">render*</code> para exibir um mapa que captar&#225; as altera&#231;&#245;es nesse <emph>dataframe</emph> reativo e se atualizar&#225; quando qualquer uma for encontrada. </p>
</div><div type="3"><head>Vantagens e desvantagens de usar Shiny</head>
<p>A vantagem dessa abordagem &#233; que a cria&#231;&#227;o de aplica&#231;&#245;es Shiny &#233; <emph>relativamente</emph> simples se j&#225; conhece R, e toda a variedade de bibliotecas e recursos da R pode ser aproveitada pela Shiny. Em algumas circunst&#226;ncias, isso pode ser prefer&#237;vel a aprender uma nova linguagem do zero. Se tiver experi&#234;ncia com R e pouco conhecimento de Shiny, poder&#225; criar aplica&#231;&#245;es muito complexas e &#250;teis, abrangendo tudo, desde mapas, an&#225;lise de redes, <link target="https://perma.cc/YAX3-RZZP">modelos de aprendizado de m&#225;quina</link> (em ingl&#234;s) ou pain&#233;is de controlo completos com muitas funcionalidades. Se pode program&#225;-las com R, provavelmente pode torn&#225;-las interativas com Shiny. O processo de cria&#231;&#227;o de uma interface do usu&#225;rio Shiny &#233; muito flex&#237;vel e f&#225;cil de personalizar, o que significa que &#233; simples criar uma aplica&#231;&#227;o num formato que possa ser incorporado num site de projeto usando <emph>iframes</emph>: veja o projeto <link target="https://www.mappingthegayguides.org/map/">Mapping the Gay Guides</link> (em ingl&#234;s) como exemplo.</p>
<p>Existem algumas desvantagens que valem a pena considerar. Para aqueles que n&#227;o t&#234;m inten&#231;&#227;o de usar uma linguagem como R em outros aspectos do seu trabalho, aprend&#234;-la apenas para produzir aplica&#231;&#245;es Shiny pode ser um exagero. Shiny &#233; de c&#243;digo aberto e de uso gratuito, mas de longe a maneira mais f&#225;cil de publicar a sua aplica&#231;&#227;o finalizada na Web &#233; usando um servi&#231;o chamado shinyapps.io. Shinyapps.io &#233; um produto comercial com uma op&#231;&#227;o gratuita que oferece um n&#250;mero limitado de horas de uso (25 horas, depois disso precisar&#225; pagar uma taxa mensal). Pode executar a Shiny no seu pr&#243;prio servidor (ou atrav&#233;s de algo como <link target="https://perma.cc/DEA2-HCC7">Amazon Web Services</link> (em ingl&#234;s)), mas &#233; um processo bastante complicado e requer conhecimento avan&#231;ado de configura&#231;&#227;o de servidores Web. Deve ter isso em mente se estiver pensando em usar Shiny para uma sa&#237;da voltada para o p&#250;blico, principalmente se achar que pode ter muito tr&#225;fego e uso pesado.</p>
</div></div>
      <div type="2"><head>Contexto hist&#243;rico e dados</head>
<p>A biblioteca nacional do Reino Unido, a <link target="https://perma.cc/C7VP-VBTS">British Library</link> (em ingl&#234;s) possui, de longe, a maior cole&#231;&#227;o de jornais brit&#226;nicos e irlandeses do mundo. A primeira publica&#231;&#227;o de not&#237;cias em s&#233;rie na sua cole&#231;&#227;o &#233; de 1621 e continua a ser coletada at&#233; hoje. O cat&#225;logo da biblioteca cont&#233;m uma riqueza de informa&#231;&#245;es sobre os seus acervos jornal&#237;sticos, que foram disponibilizadas publicamente na forma de metadados estruturados. Esses metadados s&#227;o, essencialmente, uma lista de t&#237;tulos de jornais, contendo as datas e locais de publica&#231;&#227;o de cada um, mudan&#231;as e fus&#245;es de t&#237;tulos e informa&#231;&#245;es sobre substitutos de microfilmes e acervos digitais.</p>
<p>Esses metadados estruturados s&#227;o o recurso usado nesta li&#231;&#227;o. Rastrear os metadados dessa cole&#231;&#227;o &#233; uma forma dos historiadores mapearem o crescimento e as mudan&#231;as na imprensa ao longo do tempo e em diferentes regi&#245;es. Al&#233;m disso, pode ajudar a entender mais sobre o pr&#243;prio acervo da British Library, incluindo as suas lacunas, vieses, estrat&#233;gias de digitaliza&#231;&#227;o e pontos cegos. Os dados podem at&#233; indicar algo sobre a mudan&#231;a demogr&#225;fica e industrializa&#231;&#227;o da Gr&#227;-Bretanha, bem como desenvolvimentos nas tecnologias de comunica&#231;&#227;o (por exemplo, comboios e, depois, tel&#233;grafos tornaram poss&#237;vel ter imprensas regionais e locais).</p>
<p>A ind&#250;stria jornal&#237;stica (e, tamb&#233;m, a cole&#231;&#227;o) cresceu de um pequeno n&#250;mero de t&#237;tulos publicados em Londres no in&#237;cio do s&#233;culo XVII para uma florescente imprensa provincial semanal e di&#225;ria no s&#233;culo XVIII e, depois, para uma grande imprensa local nos s&#233;culos XIX e XX. Durante grande parte do s&#233;culo XVIII, um imposto foi adicionado a cada exemplar de jornal, tornando-o caro e dispon&#237;vel apenas para a elite. No s&#233;culo seguinte, este foi revogado e a imprensa come&#231;ou &#8212;ainda que lentamente&#8212; a refletir mais plenamente sobre as aspira&#231;&#245;es e a diversidade do pa&#237;s. A aplica&#231;&#227;o criada neste tutorial &#8212;um mapa interativo de t&#237;tulos publicados, com um controlo deslizante de tempo selecionado pelo usu&#225;rio&#8212; &#233; uma maneira &#250;til de visualizar essas mudan&#231;as.</p>
<div type="3"><head>Obtendo os dados</head>
<p>Para este tutorial, ser&#225; preciso descarregar dois ficheiros: primeiro, uma lista de t&#237;tulos de jornais brit&#226;nicos e irlandeses, depois disso chamada de 'lista de t&#237;tulos'; e, segundo, um conjunto de dados auxiliar com nomes de lugares e coordenadas, que permitir&#225; a correspond&#234;ncia dos lugares encontrados na lista de t&#237;tulos aos locais num mapa, a que chamaremos de 'lista de coordenadas'.</p>
<ul>
<li>
<p>Para obter a lista de t&#237;tulos, visite o <link target="https://bl.iro.bl.uk/concern/datasets/7da47fac-a759-49e2-a95a-26d49004eba8?locale=en">reposit&#243;rio da British Library</link> (em ingl&#234;s). A lista est&#225; dispon&#237;vel no reposit&#243;rio em dois formatos: um ficheiro <code type="inline">.zip</code> contendo um <code type="inline">.csv</code> e um readme, ou uma folha de c&#225;lculo do Excel. Para esta li&#231;&#227;o, trabalharemos com o formato <code type="inline">.csv</code>. Descarregue o ficheiro <code type="inline">.zip</code> e descompacte-o. Como alternativa, pode <link target="/assets/shiny-leaflet-newspaper-map-tutorial-data/newspaper_coordinates.csv">descarregar aqui</link> uma c&#243;pia do conjunto de dados usado neste tutorial. </p>
</li>
<li>
<p>A lista de coordenadas est&#225; <link target="/assets/shiny-leaflet-newspaper-map-tutorial-data/newspaper_coordinates.csv">dispon&#237;vel aqui</link>. Descarregue este ficheiro de coordenadas. N&#227;o importa onde o coloca agora, pois posteriormente na li&#231;&#227;o mover&#225; os dois ficheiros para uma nova pasta.</p>
</li>
</ul>
</div><div type="3"><head>Entender a lista de t&#237;tulos</head>
<p>Feito isto, d&#234; uma olhada no conjunto de dados da lista de t&#237;tulos (pode abri-lo no R, num programa de folha de c&#225;lculo ou um editor de texto). A lista de t&#237;tulos foi produzida pela British Library e publicada no seu reposit&#243;rio institucional. Cont&#233;m metadados retirados do cat&#225;logo da biblioteca, de todos os jornais publicados na Gr&#227;-Bretanha e Irlanda at&#233; o ano de 2019, um total de cerca de 24.000 t&#237;tulos. H&#225; mais informa&#231;&#245;es dispon&#237;veis num artigo de dados publicado.<ref type="footnotemark" target="#1"/> </p>
<p>O ficheiro <code type="inline">.csv</code> (<code type="inline">BritishAndIrishNewspapersTitleList_20191118.csv</code>) cont&#233;m v&#225;rios campos para cada t&#237;tulo, incluindo o nome da publica&#231;&#227;o, nomes de t&#237;tulos posteriores e anteriores, v&#225;rios campos para a cobertura geogr&#225;fica, a primeira e a &#250;ltima datas catalogadas e algumas outras informa&#231;&#245;es.</p>
<p>Vale a pena ler o ficheiro <code type="inline">README</code> que acompanha o ficheiro <code type="inline">.zip</code>. Este explica que existem v&#225;rios campos previstos para a cobertura geogr&#225;fica, pois os registros foram catalogados durante um longo per&#237;odo de tempo durante o qual os padr&#245;es e conven&#231;&#245;es de cataloga&#231;&#227;o mudaram. O objetivo aqui &#233; mapear os jornais num n&#237;vel de ponto geogr&#225;fico, ou seja, no n&#237;vel de povoado, vila ou cidade, em vez de regi&#227;o ou pa&#237;s. Existem dois campos onde podemos encontrar os pontos geogr&#225;ficos potencialmente relevantes para mapear: <code type="inline">place_of_publication</code> e <code type="inline">coverage_city</code>. Parecem coisas diferentes (um jornal poderia ser publicado num lugar, mas ter cobertura geogr&#225;fica noutro, talvez se o primeiro n&#227;o tivesse uma imprensa jornal&#237;stica adequada), mas n&#227;o &#233; assim que t&#234;m sido usados pelos catalogadores na pr&#225;tica. O ficheiro <code type="inline">README</code> diz que este &#250;ltimo (<code type="inline">coverage_city</code>) cont&#233;m dados mais completos, ent&#227;o &#233; esse que usar&#225; para mapear os t&#237;tulos.</p>
<p>Os outros dois campos de interesse s&#227;o a primeira e a &#250;ltima datas catalogadas. O readme tamb&#233;m nos diz que a biblioteca n&#227;o tem cobertura completa, embora tenha a maioria dos t&#237;tulos da d&#233;cada de 1840 em diante, e efetivamente todos os t&#237;tulos a partir de 1869, quando o Dep&#243;sito Legal<ref type="footnotemark" target="#2"/> foi introduzido. Isso significa que a cole&#231;&#227;o n&#227;o possui, necessariamente, todos os n&#250;meros de um jornal <emph>entre</emph> a primeira e a &#250;ltima data catalogadas pela Biblioteca. </p>
<p>Neste tutorial, ser&#225; criado um controlo deslizante interativo que permitir&#225; ao usu&#225;rio escolher uma data de in&#237;cio e de t&#233;rmino. Isso pode ser usado para filtrar os dados de duas maneiras: para todos os jornais publicados <emph>em algum momento</emph> entre essas duas datas, ou pode mapear todos os jornais publicados <emph>pela primeira vez</emph> entre duas datas espec&#237;ficas. Como o primeiro cen&#225;rio super-representaria as cole&#231;&#245;es da biblioteca, para simplificar as coisas, neste tutorial trabalhar&#225; na visualiza&#231;&#227;o dos jornais publicados dentro de um determinado per&#237;odo de tempo.</p>
</div></div>
      <div type="2"><head>Configurando o seu ambiente de codifica&#231;&#227;o e criando a aplica&#231;&#227;o Shiny</head>
<p>Para demonstrar como Shiny funciona, neste tutorial ser&#225; utilizado esse conjunto de dados de t&#237;tulos de jornais, locais de publica&#231;&#227;o e datas e o transformar&#225; numa aplica&#231;&#227;o interativa b&#225;sica. No total, h&#225; cinco tarefas curtas de codifica&#231;&#227;o que a sua aplica&#231;&#227;o precisa de realizar:</p>
<ul>
<li>Carregar os dois conjuntos de dados necess&#225;rios</li>
<li>Criar uma interface de usu&#225;rio</li>
<li>Criar um conjunto de dados "reativo" de lugares, uma contagem de ocorr&#234;ncias e as suas coordenadas geogr&#225;ficas</li>
<li>Transformar isto num conjunto de dados geogr&#225;fico especial chamado de objeto de recursos simples</li>
<li>Criar um mapa interativo usando outra biblioteca R chamada <link target="https://perma.cc/RW6M-ZCG2">Leaflet</link> (em ingl&#234;s)</li>
</ul>
<p>No entanto, antes de chegar a estes pontos &#233; preciso configurar o ambiente correto e criar uma nova aplica&#231;&#227;o Shiny.</p>
<div type="3"><head>Instalar o R e o RStudio</head>
<p>Instale as <link target="https://cran.rstudio.com/">&#250;ltimas vers&#245;es do R</link> (em ingl&#234;s) e do <link target="https://www.rstudio.com/products/rstudio/download/">RStudio</link> (em ingl&#234;s) na sua m&#225;quina local para concluir esta li&#231;&#227;o. O R tem uma IDE (Ambiente de Desenvolvimento Integrado) muito popular (embora separado) chamado RStudio, que &#233; frequentemente usado junto com o R, pois fornece um grande conjunto de recursos para tornar a codifica&#231;&#227;o na linguagem mais conveniente. Usaremos ao longo da li&#231;&#227;o. </p>
<p>Li&#231;&#245;es anteriores do <emph>Programming Historian</emph> abordaram como <link target="/pt/licoes/nocoes-basicas-R-dados-tabulares">trabalhar com R</link> e <link target="/pt/licoes/manipulacao-transformacao-dados-R">trabalhar com o tydeverse</link>. Seria &#250;til passar por essas li&#231;&#245;es primeiro, para aprender os fundamentos da instala&#231;&#227;o do R e usar o tydeverse para organizar os dados.</p>
</div><div type="3"><head>Criar um novo projeto no RStudio</head>
<p>Depois de instalar o R e o RStudio, abra o &#250;ltimo e crie um novo projeto para trabalhar na sua aplica&#231;&#227;o. Para fazer isto, abra a janela 'Create a Project' (em portugu&#234;s, criar um novo projeto) usando o menu (File-&gt;New Project) (em portugu&#234;s, Ficheiro-&gt;Novo Projeto). Selecione 'New Directory' (em portugu&#234;s, novo diret&#243;rio), e ent&#227;o 'New Project' (em portugu&#234;s, novo projeto). Nomeie o diret&#243;tio do seu projeto, marque a op&#231;&#227;o 'Use renv with the project' (em portugu&#234;s, use renv com o projeto), e clique em 'Create Project' (em portugu&#234;s, criar projeto).</p>
<p>Antes de continuar, instale os quatro pacotes necess&#225;rios para concluir o tutorial, caso ainda n&#227;o os tenha. Tr&#234;s deles podem ser instalados diretamente pelo RStudio. Na linha de comandos do R ou num script R separado, execute os seguintes comandos:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_0" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_0.txt"></code></pre>
<p>Dependendo da configura&#231;&#227;o do seu sistema, o quarto pacote, <code type="inline">sf</code>, pode exigir etapas adicionais antes de ser instalado. Detalhes sobre isso podem ser encontrados na <link target="https://github.com/r-spatial/sf">p&#225;gina do pacote no Github</link> (em ingl&#234;s). Verifique as instru&#231;&#245;es no cabe&#231;alho <hi rend="bold">Installing</hi> (em portugu&#234;s, instalar) no ficheiro Readme vinculado ao Github. Usu&#225;rios de Mac em particular podem precisar de instalar uma biblioteca de terceiros, <code type="inline">gdal</code>, antes que a instala&#231;&#227;o funcione, usando o <link target="https://brew.sh/pt/">Homebrew</link>.</p>
</div><div type="3"><head>Criar uma aplica&#231;&#227;o Shiny vazia</head>
<p>Uma aplica&#231;&#227;o Shiny consiste num ficheiro de script com um nome de ficheiro especial reservado, <code type="inline">app.R</code>, que diz ao RStudio para tratar esse script como uma aplica&#231;&#227;o e abri-lo num navegador Web quando for executado. Nesta primeira se&#231;&#227;o, ser&#225; criado um aplicativo que carregar&#225; as bibliotecas e conjuntos de dados relevantes e exibir&#225; uma mensagem de teste 'Ol&#225; mundo'. Para isso, execute os seguintes passos:</p>
<p>1. Configure uma pasta da aplica&#231;&#227;o</p>
<p>&#201; uma boa pr&#225;tica colocar todos os ficheiros necess&#225;rios para a aplica&#231;&#227;o numa pasta pr&#243;pria, dentro do projeto RStudio. Fa&#231;a isso criando uma nova pasta chamada 'jornal-app' dentro da pasta do projeto RStudio que acabou de criar. Coloque os ficheiros descarregados acima (<code type="inline">BritishAndIrishNewspapersTitleList_20191118.csv</code> e <code type="inline">newspaper_coordinates.csv</code>) nesta nova pasta.</p>
<p>2. Crie o ficheiro app.R</p>
<p>Com o RStudio aberto, clique em file-&gt; new file -&gt; R Script. Use o menu ou command/ctrl + s para salvar o ficheiro. Navegue at&#233; &#224; nova pasta que acabou de criar e salve o ficheiro l&#225;, digitando <code type="inline">app.R</code> como o nome do ficheiro. Agora deve ter os seguintes ficheiros na pasta 'jornal-app' que acabou de criar:</p>
<figure><desc>Figura 1. Captura de tela da pasta da aplica&#231;&#227;o mostrando os ficheiros necess&#225;rios.</desc><graphic url="pt-tr-aplicacao-web-interativa-r-shiny-leaflet-01.png" alt="Uma captura de tela do painel de ficheiros R, mostrando os ficheiros necess&#225;rios. H&#225; tr&#234;s ficheiros no total, App.R, o csv dos jornais brit&#226;nicos e irlandeses, e o csv das coordenadas do jornal."/></figure>
<p>3. Carregue as bibliotecas relevantes</p>
<p class="alert alert-warning" style="alert alert-warning">
&#201; importante notar que, ao contr&#225;rio de muitos tutoriais, o c&#243;digo que est&#225; prestes a inserir n&#227;o funcionar&#225; se for executado linha por linha, mas somente quando o script `app.R` for executado de dentro do RStudio.
</p>
<p>A primeira coisa que a aplica&#231;&#227;o precisar&#225; de fazer &#233; preparar e carregar os dados. Isto &#233; feito dentro do script <code type="inline">app.R</code>, mas fora da interface do usu&#225;rio e dos elementos do servidor que ser&#225; criado num momento. Primeiro, carregue todas as bibliotecas que precisa de usar digitando o seguinte:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_1" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_1.txt"></code></pre>
<p>4. Carregue os conjuntos de dados</p>
<p>Em seguida, a aplica&#231;&#227;o deve carregar a lista de t&#237;tulos e os ficheiros de lista de coordenadas como <emph>dataframes</emph> chamados <code type="inline">title_list</code> e <code type="inline">coordinates_list</code>, respectivamente. Adicione a seguinte linha ao seu script app.R, que deve ser exibido no painel superior esquerdo do RStudio. Observe que, como o diret&#243;rio de trabalho &#233; diferente do diret&#243;rio da sua aplica&#231;&#227;o, estes comandos s&#243; funcionar&#227;o quando executar a pr&#243;pria aplica&#231;&#227;o.</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_2" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_2.txt"></code></pre>
</div><div type="3"><head>Adicionar os elementos Shiny necess&#225;rios</head>
<p>Para transformar isto numa aplica&#231;&#227;o Shiny, este script <code type="inline">app.R</code> precisa de tr&#234;s elementos:</p>
<p>1.   A <hi rend="bold">UI</hi>, onde a apar&#234;ncia visual da aplica&#231;&#227;o ser&#225; armazenada.</p>
<p>2.   O <hi rend="bold">servidor</hi> com o c&#243;digo usado.</p>
<p>3.   O comando para executar a pr&#243;pria aplica&#231;&#227;o.</p>
<p>Em seguida, criar&#225; cada um deles de cada vez.</p>
<p>1. Crie um elemento de UI vazio</p>
<p>A interface do usu&#225;rio (UI) &#233; um elemento que conter&#225; v&#225;rios comandos especiais de Shiny para definir a apar&#234;ncia da aplica&#231;&#227;o. Examinaremos as op&#231;&#245;es espec&#237;ficas abaixo, mas geralmente voc&#234; define um tipo de p&#225;gina e os v&#225;rios componentes da interface do usu&#225;rio s&#227;o aninhados nesse primeiro elemento: primeiro, um tipo de <emph>layout</emph>, dentro deste, elementos de <emph>layout</emph> espec&#237;ficos; e, finalmente, dentro deles, os v&#225;rios componentes da pr&#243;pria aplica&#231;&#227;o.</p>
<p>O tipo que usar&#225; &#233; chamado <code type="inline">fluidPage()</code>, uma p&#225;gina &#8212;que redimensiona dinamicamente dependendo do tamanho da janela do navegador&#8212; contendo um <emph>layout</emph> fluido de linhas que, por sua vez, cont&#234;m colunas.</p>
<p>O primeiro passo &#233; criar todos os elementos b&#225;sicos necess&#225;rios para uma aplica&#231;&#227;o, antes de preench&#234;-los com os componentes necess&#225;rios. Para come&#231;ar, crie um elemento de UI em branco definindo a vari&#225;vel <code type="inline">ui</code> para o elemento <code type="inline">fluidPage()</code>. Para que saiba que sua aplica&#231;&#227;o est&#225; em execu&#231;&#227;o, quando test&#225;-la pela primeira vez, adicione uma mensagem simples 'Ol&#225; mundo' ao elemento de UI. Adicione o seguinte c&#243;digo em seu script <code type="inline">app.R</code>:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_3" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_3.txt"></code></pre>
<p>2. Crie um elemento do servidor</p>
<p>Em seguida &#233; a parte do servidor. O servidor &#233; criado como uma fun&#231;&#227;o R com dois argumentos, <code type="inline">input</code> e <code type="inline">output</code> (por enquanto, n&#227;o precisa se preocupar com o que os argumentos de <emph>input</emph> e <emph>output</emph> fazem, desde que estejam l&#225;).<ref type="footnotemark" target="#3"/> Em R, uma fun&#231;&#227;o &#233; feita usando o comando <code type="inline">function(){}</code>, especificando os argumentos entre par&#234;nteses e, em seguida, o c&#243;digo da fun&#231;&#227;o entre chaves. Todo o c&#243;digo para a l&#243;gica da aplica&#231;&#227;o ficar&#225; entre essas duas chaves. </p>
<p>Especifique a parte do servidor usando o seguinte c&#243;digo:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_4" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_4.txt"></code></pre>
<p>3. Adicione o comando para executar a aplica&#231;&#227;o</p>
<p>Por fim, adicione o comando para executar a pr&#243;pria aplica&#231;&#227;o. Este &#233; outro comando especial de Shiny, <code type="inline">shinyApp()</code>, com a UI e os itens do servidor que acabou de criar como argumentos.</p>
<p><code type="inline">shinyApp(ui, server)</code></p>
<p>O ficheiro <code type="inline">app.R</code> completo deve conter agora as seguintes linhas:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_5" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_5.txt"></code></pre>
</div><div type="3"><head>Teste a sua nova aplica&#231;&#227;o</head>
<p>Depois de criar estes itens, salve novamente o ficheiro <code type="inline">app.R</code>. Agora, o RStudio reconhecer&#225; como um aplicativo Shiny e os &#237;cones na parte superior do painel mudar&#227;o, aparecendo a op&#231;&#227;o 'Run App' (Figura 2). Se clicar, executar&#225; a aplica&#231;&#227;o numa nova janela usando o navegador embutido do RStudio.</p>
<figure><desc>Figura 2: Captura de tela do painel de controlo com o bot&#227;o Run App destacado.</desc><graphic url="pt-tr-aplicacao-web-interativa-r-shiny-leaflet-02.png" alt="Captura de tela do painel de controlo com o bot&#227;o Run App destacado com um ret&#226;ngulo vermelho."/></figure>
<p>Deve ver uma p&#225;gina da Web em branco com 'Ol&#225; mundo' exibido no canto superior esquerdo. Tamb&#233;m notar&#225; que, enquanto a aplica&#231;&#227;o est&#225; em execu&#231;&#227;o, n&#227;o pode executar nenhum c&#243;digo no RStudio: a consola de comandos do R surge como 'ocupado'. Para parar a aplica&#231;&#227;o, basta fechar a p&#225;gina do navegador apenas aberta. Tamb&#233;m pode usar a op&#231;&#227;o 'Open in Browser' para testar a aplica&#231;&#227;o no seu navegador padr&#227;o. </p>
</div></div>
      <div type="2"><head>Codificar a aplica&#231;&#227;o</head>
<div type="3"><head>Desenhar a Interface do Usu&#225;rio</head>
<p>A UI Shiny utiliza o formato <link target="https://perma.cc/BK3T-V6HP">Bootstrap</link> (em ingl&#234;s). A interface do usu&#225;rio &#233; constru&#237;da em torno de um sistema de grade de linhas e colunas, permitindo <emph>layouts</emph> personaliz&#225;veis. Consulte a <link target="https://perma.cc/9U3B-AHF6">documenta&#231;&#227;o oficial</link>(em ingl&#234;s)  para obter mais informa&#231;&#245;es sobre as v&#225;rias op&#231;&#245;es e como criar esses <emph>layouts</emph>. Para esta aplica&#231;&#227;o, usaremos um <emph>layout</emph> conhecido como <code type="inline">sidebarLayout</code>, que consiste num t&#237;tulo, uma coluna de barra lateral &#224; esquerda da p&#225;gina para informa&#231;&#227;o de <emph>input</emph> do usu&#225;rio e um painel principal para exibir os resultados. O diagrama de <emph>wireframe</emph> a seguir deve ajud&#225;-lo a visualizar o <emph>layout</emph>: </p>
<figure><desc>Figura 3. Diagrama de *wireframe* exibindo a estrutura do _layout_ de barra lateral.</desc><graphic url="pt-tr-aplicacao-web-interativa-r-shiny-leaflet-03.png" alt="Imagem que descreve o layout da interface a ser desenhada"/></figure>
<p>O pr&#243;ximo passo &#233; preencher o elemento <code type="inline">ui</code> com os componentes necess&#225;rios para apresentar este <emph>layout</emph> de barra lateral. Primeiro, use o elemento <code type="inline">titlePanel</code> para dar um t&#237;tulo &#224; sua aplica&#231;&#227;o e adicione o elemento da barra lateral. Dentro do objeto <code type="inline">fluidPage()</code>, exclua a mensagem 'Ol&#225; mundo' e substitua pelo seguinte: </p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_6" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_6.txt"></code></pre>
<p>Depois disso, preencha o <emph>layout</emph> com partes espec&#237;ficas da p&#225;gina Web, componentes chamados <code type="inline">sidebarPanel()</code> e <code type="inline">mainPanel()</code>. Fa&#231;a-o colocando-os dentro de <code type="inline">sidebarLayout()</code>.</p>
<p class="alert alert-info" style="alert alert-info">
Como o c&#243;digo da UI Shiny geralmente acaba com muitos par&#234;nteses aninhados, dividi-los em duas linhas, como no trecho de c&#243;digo abaixo, pode facilitar a leitura, mas n&#227;o &#233; necess&#225;rio para que o c&#243;digo funcione.
</p>
<p>Agora, o elemento completo da UI deve ter esta apar&#234;ncia:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_7" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_7.txt"></code></pre>
<p>Notar&#225; que estes comandos aninhados correspondem ao <emph>layout</emph> do diagrama de <emph>wireframe</emph> na Figura 3 acima.</p>
</div><div type="3"><head>Adicionar um 'Widget': o controlo sliderInput</head>
<p>Em Shiny, os usu&#225;rios atualizam os valores usando v&#225;rios controlos interativos e personaliz&#225;veis conhecidos como 'widgets'. A lista completa pode ser encontrada na <link target="https://perma.cc/GW78-FQEJ">Galeria de widgets Shiny</link> (em ingl&#234;s). O widget que vai usar chama-se <code type="inline">sliderInput()</code>. Este exibir&#225; uma barra deslizante interativa com um grande n&#250;mero de op&#231;&#245;es, como o(s) valor(es) m&#237;nimo(s), m&#225;ximo(s) e inicial(is). Tamb&#233;m pode definir os incrementos e o formato dos n&#250;meros (digite <code type="inline">?sliderInput</code> na linha de comandos para obter uma lista completa de op&#231;&#245;es e explica&#231;&#245;es). Aqui far&#225; um com um ano m&#237;nimo de 1620 (o ponto de dados mais antigo na lista de t&#237;tulos) e um m&#225;ximo de 2019 (o mais recente). </p>
<p>O valor inicial (padr&#227;o) pode ser um &#250;nico n&#250;mero ou um vetor de dois n&#250;meros. Se o &#250;ltimo for usado, o controlo deslizante ter&#225; duas extremidades, com um primeiro e um segundo valor. Este &#233; o que queremos usar, para que o usu&#225;rio possa especificar um intervalo de anos. </p>
<p>O c&#243;digo a seguir criar&#225; um controlo deslizante com duas extremidades arrast&#225;veis, definidas por padr&#227;o para 1700 e 1750:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_8" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_8.txt"></code></pre>
<p>Insira este c&#243;digo entre os par&#234;nteses do comando <code type="inline">sidebarPanel = sidebarPanel( )</code> no seu script. Se se perder ou precisar de identificar e corrigir erros, d&#234; uma olhada no <link target="#c%C3%B3digo-final">c&#243;digo final</link> fornecido no fim desta li&#231;&#227;o. </p>
<p>Agora, execute o aplicativo para ver a apar&#234;ncia do controlo deslizante. Ver&#225; um painel cinza &#224; esquerda (o painel da barra lateral), contendo o 'widget' deslizante. Se passar o rato sobre o controlo deslizante, notar&#225; que pode arrastar cada extremidade (para selecionar um tamanho de intervalo) e tamb&#233;m pode arrastar o meio (o que mover&#225; o controlo deslizante inteiro sobre uma janela do tamanho de intervalo selecionado). </p>
<figure><desc>Figura 4. Gif animado demonstrando a funcionalidade do 'widget' de _input_ do controlo deslizante.</desc><graphic url="pt-tr-aplicacao-web-interativa-r-shiny-leaflet-04.gif" alt="Gif animado demonstrando a funcionalidade do widget de input do controlo deslizante. Um cursor clica em cada extremidade do controlo deslizante para redimension&#225;-lo e depois o arrasta."/></figure>
</div><div type="3"><head>Colocar o leafletOutput no elemento mainPanel</head>
<p>Em Shiny, precisa de dar informa&#231;&#227;o &#224; interface do usu&#225;rio que deve exibir um resultado (algum tipo de elemento R, como uma tabela de dados ou um gr&#225;fico, ou algo t&#227;o simples quanto uma linha de texto) criada no c&#243;digo do servidor. Isso &#233; feito criando um elemento na interface do usu&#225;rio da fam&#237;lia de comandos <code type="inline">*Output</code>. Cada elemento R que pode exibir em Shiny tem seu pr&#243;prio comando <code type="inline">*Output</code>: aqui, usar&#225; <code type="inline">leafletOutput()</code>, que diz &#224; interface do usu&#225;rio para criar um mapa com leaflet. <code type="inline">leafletOutput</code> tem um argumento obrigat&#243;rio: seu ID do resultado. Esse r&#243;tulo ser&#225; usado para corresponder o elemento da interface do usu&#225;rio ao objeto do mapa real que, posteriormente, criar&#225; no c&#243;digo do servidor. Defina este r&#243;tulo como 'map'. Insira o seguinte c&#243;digo entre os par&#234;nteses de <code type="inline">mainPanel()</code>:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_9" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_9.txt"></code></pre>
</div></div>
      <div type="2"><head>Criar a l&#243;gica do servidor</head>
<p>Em seguida, precisa de escrever a l&#243;gica para criar um objeto que ser&#225; exibido na interface do usu&#225;rio. Isto tem duas partes. Primeiro, criar&#225; um <emph>elemento reativo</emph> que, como explicado acima, &#233; um objeto especial que captar&#225; as altera&#231;&#245;es no <emph>input</emph> do usu&#225;rio e se refaz conforme necess&#225;rio. Segundo, criar&#225; um <emph>resultado</emph> que conter&#225; o pr&#243;prio mapa interativo. </p>
<div type="3"><head>Criar o reativo para o mapa leaflet</head>
<p>Primeiro, crie o elemento reativo. Nesse caso, ser&#225; um tipo especial de conjunto de dados geogr&#225;ficos chamado <emph>objeto de recursos simples</emph>. Este formato foi abordado numa li&#231;&#227;o anterior do <emph>The Programming Historian</emph>, <link target="/en/lessons/geospatial-data-analysis">'Using Geospatial Data to Inform Historical Research in R'</link> (em ingl&#234;s). Sempre que o usu&#225;rio alterar as vari&#225;veis no controlo deslizante de data de alguma forma, seu aplicativo ser&#225; executado por meio de um conjunto de comandos:</p>
<ul>
<li>
<p>Filtrar a lista de t&#237;tulos para o conjunto de datas selecionadas pelo usu&#225;rio</p>
</li>
<li>
<p>Contar o n&#250;mero de vezes que cada lugar ocorre nesta lista filtrada</p>
</li>
<li>
<p>Associar os lugares a um conjunto de coordenadas usando uma jun&#231;&#227;o</p>
</li>
<li>
<p>Converter o resultado num objeto de recursos simples, uma estrutura de dados que armazena informa&#231;&#245;es geogr&#225;ficas</p>
</li>
</ul>
<p>Para criar um objeto reativo chamado <code type="inline">map_df</code>, adicione o seguinte c&#243;digo dentro das chaves do componente do servidor:</p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_10" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_10.txt"></code></pre>
<p>Este c&#243;digo executa as seguintes fun&#231;&#245;es:</p>
<ol>
<li>
<p>Filtra o conjunto de dados de jornais usando o comando <code type="inline">filter()</code>, usando os valores do widget <code type="inline">sliderInput</code>. Esses valores s&#227;o acedidos usando <code type="inline">input$&lt;LABELNAME&gt;</code>, que neste caso &#233; <code type="inline">input$years</code>, embora haja uma complica&#231;&#227;o adicional a ser observada. Anteriormente definiu o valor de <code type="inline">sliderInput</code> para um vetor de comprimento dois, para que um intervalo pudesse ser selecionado? Os dois n&#250;meros deste intervalo s&#227;o armazenados em <code type="inline">input$years[1]</code> e <code type="inline">input$years[2]</code>. Estes s&#227;o os valores a que precisa de aceder para filtrar os dados. A fun&#231;&#227;o <code type="inline">filter</code> retorna linhas de um <emph>dataframe</emph> onde um conjunto espec&#237;fico de condi&#231;&#245;es &#233; verdadeiro: neste caso, onde a coluna <code type="inline">first_date_held</code> &#233; maior que o primeiro valor e menor que o segundo. </p>
</li>
<li>
<p><code type="inline">count()</code> neste conjunto de dados filtrado para produzir um <emph>dataframe</emph> de cada cidade e uma contagem das vezes em que ocorrem. Especifica o nome da nova coluna que cont&#233;m as contagens com o argumento <code type="inline">name =</code>. </p>
</li>
<li>
<p>Faz uma jun&#231;&#227;o (um tipo de combina&#231;&#227;o de dois <emph>dataframes</emph> com base numa chave comum) para combinar o <emph>dataframe</emph> de coordenadas ao <emph>dataframe</emph> de contagem usando <code type="inline">left_join()</code>. Deve especificar a chave a partir da qual ser&#225; feita a jun&#231;&#227;o, que &#233; <code type="inline">coverage_city</code>. </p>
</li>
<li>
<p>H&#225; um pequeno n&#250;mero de t&#237;tulos de jornais sem coordenadas de latitude/longitude, o que causaria um erro ao criar o objeto geogr&#225;fico. Filtre-os com <code type="inline">filter(!is.na(lat) &amp; !is.na(lng))</code></p>
</li>
<li>
<p>Finalmente, transforme-os num objeto de recursos simples, usando <code type="inline">st_as_sf()</code>. Para faz&#234;-lo, especifique as colunas de coordenadas de latitude/longitude que devem ser adotadas usando <code type="inline">coords</code> e, em seguida, usa <code type="inline">st_set_crs</code> para definir um sistema de refer&#234;ncia de coordenadas.<ref type="footnotemark" target="#4"/></p>
</li>
</ol>
<p>Este <emph>dataframe</emph> de informa&#231;&#245;es geogr&#225;ficas pode ser acedido em qualquer contexto reativo por Shiny usando <code type="inline">map_df()</code> e pode ser usado por v&#225;rios resultados ao mesmo tempo: por exemplo, pode criar uma aplica&#231;&#227;o que exibe um mapa e um gr&#225;fico de barras, cada um usando o mesmo objeto reativo.</p>
</div><div type="3"><head>Criar o mapa leaflet</head>
<p>A &#250;ltima coisa a fazer &#233; criar o pr&#243;prio mapa. Isto &#233; feito usando a biblioteca <code type="inline">leaflet</code>, que permite produzir mapas interativos e com zoom. Funciona particularmente bem com Shiny. Adicione o seguinte c&#243;digo dentro do elemento <code type="inline">server()</code>, logo abaixo do elemento reativo <code type="inline">map_df</code>: </p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_11" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_11.txt"></code></pre>
<p>H&#225; algumas coisas bastante complexas acontecendo aqui, por isso &#233; importante analisar o c&#243;digo em detalhe. Em Shiny, cria reatividade conectando <hi rend="bold">inputs</hi> a <hi rend="bold">outputs</hi>. <hi rend="bold">Inputs</hi>, neste contexto, s&#227;o as vari&#225;veis ajustadas pelo usu&#225;rio. Recorda-se do <code type="inline">sliderInput()</code> que criou na interface do usu&#225;rio acima, com o r&#243;tulo 'years'? J&#225; vimos que o seu valor &#233; armazenado pela Shiny na vari&#225;vel <code type="inline">input$years</code>. <hi rend="bold">Outputs</hi> s&#227;o as express&#245;es R que dizem a Shiny o que exibir na interface do usu&#225;rio e s&#227;o criadas, no servidor, com o nome da vari&#225;vel <code type="inline">output$*</code>. Os <hi rend="bold">outputs</hi> precisam de corresponder a um elemento <code type="inline">*Output</code> da interface do usu&#225;rio. Nesta &#250;ltima criou um <hi rend="bold">output</hi> leaflet com o r&#243;tulo <code type="inline">map</code> usando o c&#243;digo <code type="inline">leafletOutput('map')</code>. Isto deve corresponder a um <hi rend="bold">output</hi> no servidor chamado <code type="inline">output$map</code>. </p>
<p>Por sua vez, esta vari&#225;vel <code type="inline">output$map</code> deve ser definida para uma fun&#231;&#227;o Shiny <code type="inline">render*</code>, que informa a Shiny que tipo de objeto deve ser apresentado na interface do usu&#225;rio. O que precisamos &#233; chamado <code type="inline">renderLeaflet</code>, que diz &#224; interface do usu&#225;rio para gerar um mapa criado pela biblioteca leaflet. O objeto <code type="inline">renderLeaflet</code> tem par&#234;nteses e chaves, assim como o objeto reativo que criamos acima. </p>
<p>O pr&#243;prio mapa leaflet ser&#225; criado dentro disto. Primeiro, adicione a fun&#231;&#227;o <code type="inline">leaflet()</code>. Em seguida, adicione os blocos padr&#227;o (as imagens de mapa com zoom) usando <code type="inline">addTiles()</code>. Depois, defina a posi&#231;&#227;o padr&#227;o do mapa e amplie para Gr&#227;-Bretanha e Irlanda usando o comando <code type="inline">setView(lng = -5, lat = 54, zoom = 5)</code>. </p>
</div><div type="3"><head>Desenhar pontos usando o <emph>dataframe</emph> reativo</head>
<p>Fa&#231;a uma pausa aqui e execute a aplica&#231;&#227;o novamente. Se tudo correr bem, dever&#225; ver um mapa interativo da Gr&#227;-Bretanha e da Irlanda &#224; direita do controlo deslizante. Pode ampliar e deslizar, mas n&#227;o mais do que isso. O mapa precisa de ser preenchido com pontos representando a contagem de t&#237;tulos de cada lugar. </p>
<figure><desc>Figura 5. Captura de tela da aplica&#231;&#227;o com mapa leaflet e widget de controlo deslizante.</desc><graphic url="pt-tr-aplicacao-web-interativa-r-shiny-leaflet-05.png" alt="Captura de tela da aplica&#231;&#227;o com mapa Leaflet e o widget de controlo deslizante."/></figure>
<p>Para fazer isso, use o comando <code type="inline">addCircleMarkers()</code>, que adiciona uma camada gr&#225;fica de c&#237;rculos ao mapa leaflet, com coordenadas retiradas de um objeto de dados geogr&#225;ficos. Usando o encadeamento de fun&#231;&#245;es <code type="inline">%&gt;%</code> (pipe), adicione o seguinte ap&#243;s a fun&#231;&#227;o <code type="inline">addCircleMarkers()</code> (veja o <link target="#c%C3%B3digo-final">c&#243;digo final</link> se n&#227;o tiver certeza de onde isto deve ir): </p>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_12" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_12.txt"></code></pre>
<p>Aqui est&#225; a parte crucial: em vez de uma fonte de dados fixa, o comando acima especifica que <code type="inline">addCircleMarkers</code> deve usar o <emph>dataframe</emph> reativo que cri&#225;mos anteriormente, com o argumento <code type="inline">data = map_df()</code>. Observe que, diferentemente das vari&#225;veis regulares em R, esta tem um par de par&#234;nteses depois, denotando que &#233; uma vari&#225;vel reativa especial. Cada vez que a aplica&#231;&#227;o percebe uma altera&#231;&#227;o nesse objeto reativo, ele redesenha o mapa com os novos dados. </p>
<p>Neste ponto, tamb&#233;m pode definir o raio dos c&#237;rculos para corresponder &#224; coluna que cont&#233;m a contagem de t&#237;tulos para cada lugar, usando <code type="inline">radius = ~sqrt(titles)</code>. Usamos a raiz quadrada, porque torna a &#225;rea dos c&#237;rculos corretamente proporcional &#224; contagem. </p>
</div><div type="3"><head>Teste a aplica&#231;&#227;o</head>
<p>&#201; hora de executar a aplica&#231;&#227;o novamente. Agora, deve haver c&#237;rculos de tamanhos variados espalhados pelo mapa. Tente mover ou arrastar os controlos deslizantes - o mapa deve ser atualizado a cada altera&#231;&#227;o. Parab&#233;ns, fez a sua primeira aplica&#231;&#227;o Shiny! </p>
<figure><desc>Figura 6. Gif animado monstrando a atualiza&#231;&#227;o do mapa leaflet quando os valores no widget do controlo deslizante s&#227;o alterados.</desc><graphic url="pt-tr-aplicacao-web-interativa-r-shiny-leaflet-06.gif" alt="Gif animado demonstrando a atualiza&#231;&#227;o do mapa Leaflet &#224; medida que os valores no widget de controlo deslizante s&#227;o alterados."/></figure>
</div></div>
      <div type="2"><head>Melhorar a aplica&#231;&#227;o</head>
<p>Para saber mais sobre Shiny e Leaflet, pode tentar adicionar alguns dos seguintes recursos &#224; sua aplica&#231;&#227;o:</p>
<p>Primeiro, adicione um <emph>input</emph> de usu&#225;rio adicional para filtrar os dados do mapa. Usando outro widget, <code type="inline">selectInput</code>, pode permitir que um usu&#225;rio exiba dados de apenas um dos quatro pa&#237;ses na lista de t&#237;tulos. Digite <code type="inline">?selectInput</code> na linha de comandos para obter ajuda sobre os par&#226;metros necess&#225;rios para fazer isto corretamente. <emph>Inputs</emph> adicionais podem ser colocados sob o <code type="inline">sliderInput</code> existente, separados por uma v&#237;rgula. </p>
<p>Em seguida, adicione alguns elementos ao mapa leaflet. Uma lista completa de op&#231;&#245;es pode ser encontrada usando <code type="inline">?circleMarkers</code> no RStudio. Por exemplo, pode adicionar um r&#243;tulo aos pontos com <code type="inline">label = coverage_city</code>. </p>
<p>Notar&#225; que sempre que move o controlo deslizante, o mapa inteiro redesenha e redefine a sua visualiza&#231;&#227;o, o que n&#227;o &#233; muito elegante. Isto pode ser corrigido usando outra fun&#231;&#227;o chamada <code type="inline">leafletProxy</code>. Resumidamente, crie um mapa leaflet vazio (sem os <code type="inline">circleMarkers</code>) como acima. De seguida, em outro contexto reativo, <code type="inline">observe</code>, adicionar&#225; o c&#243;digo para redesenhar as partes em mudan&#231;a do mapa, usando <code type="inline">leafletProxy</code>. As instru&#231;&#245;es de como fazer isto podem ser encontradas <link target="https://perma.cc/CZ84-CW9F">aqui</link> (em ingl&#234;s).</p>
</div>
      <div type="2"><head>Conclus&#227;o</head>
<p>Visualiza&#231;&#245;es interativas podem ajudar a trazer novas perspectivas para dados hist&#243;ricos. Neste tutorial, usamos alguns pacotes R vers&#225;teis e robustos, como o tydeverse e o leaflet, e pudemos us&#225;-los num ambiente interativo, em vez de ter que preparar todos os dados antecipadamente. Aprendemos como e porqu&#234; podemos usar programa&#231;&#227;o reativa, o que nos permite criar c&#243;digo R din&#226;mico onde os <emph>inputs</emph> do usu&#225;rio substituem as vari&#225;veis fixas. </p>
<p>Essa abordagem pode ser facilmente adaptada para atender a uma variedade de diferentes formatos de dados e modos de an&#225;lise. A dificuldade relativamente baixa de utiliza&#231;&#227;o destas ferramentas facilita a cria&#231;&#227;o de aplica&#231;&#245;es r&#225;pidas que podem tornar o trabalho com um grande volume de dados menos penoso. As aplica&#231;&#245;es Shiny tamb&#233;m s&#227;o uma maneira &#250;til de compartilhar alguns dos benef&#237;cios dos recursos de programa&#231;&#227;o do R com um p&#250;blico n&#227;o t&#233;cnico ou membros da equipe do projeto. &#201; relativamente f&#225;cil criar uma aplica&#231;&#227;o que permitir&#225; que um usu&#225;rio fa&#231;a sua pr&#243;pria an&#225;lise de dados com R, sem precisar codificar ou usar a linha de comandos. </p>
</div>
      <div type="2"><head>C&#243;digo final</head>
<pre><code xml:id="code_aplicacao-web-interativa-r-shiny-leaflet_13" type="block" corresp="code_aplicacao-web-interativa-r-shiny-leaflet_13.txt"></code></pre>
</div>
      <div type="2"><head>Notas de fim</head>
<p><note id="1"> Yann Ryan and Luke McKernan, "Converting the British Library's Catalogue of British and Irish Newspapers into a Public Domain Dataset: Processes and Applications," Journal of Open Humanities Data 7, no. 0 (January 22, 2021): 1, <link target="https://doi.org/10.5334/johd.23">https://doi.org/10.5334/johd.23</link>.</note></p>
<p><note id="2"> Dep&#243;sito Legal era um mecanismo pelo qual os editores eram obrigados a dar ao British Museum (e, posteriormente, &#224; British Library) uma c&#243;pia de qualquer livro produzido, incluindo jornais. </note></p>
<p><note id="3"> O objeto servidor &#233;, na verdade, uma lista R com todos os <emph>inputs</emph> armazenados no primeiro elemento, chamado <emph>input</emph>, e todos os resultados armazenados no segundo elemento, chamado <emph>output</emph>.</note></p>
<p><note id="4"> Como existem v&#225;rias maneiras de transformar um globo numa representa&#231;&#227;o 2D, a exibi&#231;&#227;o correta de dados geogr&#225;ficos requer a configura&#231;&#227;o de um sistema de refer&#234;ncia de coordenadas. 4326 &#233; comumente usado para dados geogr&#225;ficos mundiais.</note></p>
</div>
    </body>
  </text>
</TEI>
