<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Trabajar con archivos de texto en Python</title>
  <authors>William J. Turkel,Adam Crymble</authors>
  <date>2012-07-17</date>
  <translation_date>2017-03-15</translation_date>
  <editors>Miriam Posner</editors>
  <reviewers>Jim Clifford</reviewers>
  <translator>V&#237;ctor Gayol</translator>
  <translation-editor>Adam Crymble</translation-editor>
  <translation-reviewer>Jairo A. Melo,Maria Jos&#233; Afanador-Llach,Antonio Rojas Castro</translation-reviewer>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/40</review-ticket>
  <layout>lesson</layout>
  <next>reutilizacion-de-codigo-y-modularidad</next>
  <previous>ver-archivos-html</previous>
  <original>working-with-text-files</original>
  <python_warning>False</python_warning>
  <difficulty>2</difficulty>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>En esta lecci&#243;n aprender&#225;s a manipular archivos de texto utilizando Python.</abstract>
  <avatar_alt>Dibujo de un se&#241;or leyendo el abecedario.</avatar_alt>
  <doi>10.46430/phes0028</doi>
  <sequence>3</sequence>
  <series_total>15</series_total>
</metadata>
  <text xml:lang="es">
    <body>
      <div type="2"><head>Objetivos de la lecci&#243;n</head>
<p>En esta lecci&#243;n aprender&#225;s a manipular archivos de texto utilizando Python. Esto incluye abrir, cerrar, leer desde y escribir en archivos <code type="inline">.txt</code></p>
<p>Las siguientes lecciones incluir&#225;n descargar p&#225;ginas web desde Internet y reorganizar los contenidos en fragmentos de informaci&#243;n &#250;tiles para el an&#225;lisis. La mayor parte de todo este trabajo se har&#225; usando c&#243;digo escrito en Python mediante Komodo Edit.</p>
</div>
      <div type="2"><head>Trabajar con archivos de texto</head>
<p>Python hace muy sencillo el trabajo con archivos y texto. Empecemos por los archivos.</p>
</div>
      <div type="2"><head>Crear y escribir en un archivo de texto</head>
<p>Vamos a comenzar con una breve discusi&#243;n acerca de terminolog&#237;a. En una lecci&#243;n previa, dependiendo del sistema operativo de tu computadora: <link target="/es/lecciones/instalacion-mac">Mac</link>, <link target="/es/lecciones/instalacion-windows">Windows</link>, <link target="/es/lecciones/instalacion-linux">Linux</link>, viste c&#243;mo se env&#237;a informaci&#243;n a la ventana de "comando de salida" en tu editor de texto mediante la utilizaci&#243;n del comando <link target="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement">print</link> de Python.</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_0" type="block" corresp="code_trabajar-con-archivos-de-texto_0.txt"></code></pre>
<p>El lenguaje de programaci&#243;n Python es del tipo <emph>orientado a objetos</emph>. Esto quiere decir que est&#225; construido alrededor de un tipo especial de entidad, un <emph>objeto</emph>, que contiene a la vez <emph>datos</emph> as&#237; como una serie de <emph>m&#233;todos</emph> para acceder y alterar los datos. Una vez que se crea un objeto se puede interactuar con otros objetos.</p>
<p>En el ejemplo de arriba vimos un tipo de objeto, la cadena (<emph>string</emph>) &#8220;Hola Mundo&#8221;. La cadena es la secuencia de una serie de caracteres encerrados entre comillas. Puedes escribir una cadena de tres maneras distintas:</p>
<pre><code xml:id="code_trabajar-con-archivos-de-texto_1" type="block" corresp="code_trabajar-con-archivos-de-texto_1.txt"></code></pre>
<p>Lo que importa aqu&#237; es notar que, como se ve en los dos primeros ejemplos, se pueden utilizar comillas sencillas o dobles, pero nunca se debe mezclar los dos tipos en una misma cadena. En el tercer mensaje, las dobles comillas repetidas tres veces indican una cadena que se extiende por m&#225;s de una l&#237;nea.</p>
<p>Por lo tanto los siguientes mensajes contienen errores:</p>
<pre><code xml:id="code_trabajar-con-archivos-de-texto_2" type="block" corresp="code_trabajar-con-archivos-de-texto_2.txt"></code></pre>
<p>Cuenta el n&#250;mero de comillas sencillas en el mensaje3.  Para que esto trabaje correctamente tendremos que <emph>salvar</emph> el ap&#243;strofe.</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_3" type="block" corresp="code_trabajar-con-archivos-de-texto_3.txt"></code></pre>
<p>O reescribir la frase como:</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_4" type="block" corresp="code_trabajar-con-archivos-de-texto_4.txt"></code></pre>
<p><code type="inline">print</code> es un comando que imprime objetos en forma textual. Al combinar el comando <code type="inline">print</code> con una cadena de texto producimos una <emph>declaraci&#243;n</emph>.</p>
<p>Utilizar&#225;s el comando <code type="inline">print</code> de esta forma en los casos en los que se quiera generar informaci&#243;n que necesite ser manipulada inmediatamente. Algunas veces, sin embargo, crear&#225;s informaci&#243;n que necesita ser guardada, enviarla a otra persona, o utilizar como datos de entrada (<emph>input</emph>) para un procesamiento posterior por otro programa o conjunto de programas. En estos casos querremos enviar informaci&#243;n a archivos en el disco duro en vez de enviarla al panel de comando de salida. Escribe el siguiente programa en tu editor de texto y gu&#225;rdalo como <code type="inline">archivo-salida.py</code></p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_5" type="block" corresp="code_trabajar-con-archivos-de-texto_5.txt"></code></pre>
<p>En Python, cualquier l&#237;nea que inicia con un s&#237;mbolo de almohadilla o numeral (#) se llama <emph>comentario</emph> y es ignorada por el int&#233;rprete de Python. Los comentarios est&#225;n pensados para permitirle a los programadores comunicarse entre ellos (o para recordarse a s&#237; mismos qu&#233; es lo que hace el c&#243;digo cuando se sientan frente a &#233;l algunos meses despu&#233;s). En un sentido lato, los programas son escritos y formados de una manera que hace m&#225;s sencillo a los programadores trabajar en colectivo. El c&#243;digo que es m&#225;s cercano a los requerimientos de la m&#225;quina se denomina de <emph>bajo nivel</emph>, mientras que el c&#243;digo que es m&#225;s cercano al lenguaje propio de los seres humanos es llamado de <emph>alto nivel</emph>. Uno de los beneficios de utilizar un lenguaje de programaci&#243;n como Python es que es de mayor alto nivel, lo que hace m&#225;s sencillo que podamos comunicarnos contigo (claro que con cierto costo en t&#233;rminos de eficiencia inform&#225;tica).</p>
<p>En este programa <emph>f</emph> es un <emph>objeto</emph> mientras que <code type="inline">open</code>, <code type="inline">write</code> y <code type="inline">close</code> son <emph>m&#233;todos</emph>. En otras palabras, <emph>open</emph>, <emph>write</emph> y <emph>close</emph> act&#250;an sobre el objeto <emph>f</emph> que, en este caso, est&#225; definido como un archivo de texto <code type="inline">.txt</code>. Problamente, &#233;ste es un uso del t&#233;rmino &#8220;m&#233;todo&#8221; que podr&#237;as esperar y de vez en cuando encontrar&#225;s que las palabras utilizadas en el contexto de la programaci&#243;n tienen un significado ligeramente (o completamente) distinto al del habla de la vida cotidiana. En este caso, conviene recordar que &#8220;m&#233;todo&#8221; significa fragmentos de c&#243;digo que realizan acciones. Ejecutan algo sobre una cosa y regresan un resultado. Puedes intentar imaginar esto utilizando alg&#250;n referente del mundo real como, por ejemplo, dar &#243;rdenes a tu perro que ha sido educado previamente. Tu mascota (el objeto) entiende &#243;rdenes (i.e. tiene &#8220;m&#233;todos&#8221;) como "ladra", &#8220;sentado&#8221;, &#8220;echado&#8221; y as&#237;. Discutiremos y aprenderemos c&#243;mo usar muchos otros m&#233;todos en tanto vayamos avanzando.</p>
<p><emph>f</emph> es el nombre de una variable que hemos escogido nosotros. Podr&#237;amos haberlo llamado de cualquier manera que se nos hubiera ocurrido. En Python, los nombres de las variables pueden construirse con letras may&#250;sculas, min&#250;sculas o n&#250;meros. Pero no podemos utilizar los nombres de los comandos del lenguaje como variables. Por ejemplo, si intentamos nombrar a una variable &#8220;print&#8221;, el programa no responder&#225; porque esa es una <link target="https://docs.python.org/release/2.5.4/ref/keywords.html">palabra reservada</link> que es parte del lenguaje de programaci&#243;n.</p>
<p>Los nombres de las variables en Python son tambi&#233;n sensibles al uso de may&#250;sculas y min&#250;sculas, lo que significa que trapa, Trapa o TRAPA ser&#237;an representaciones de distintas variables.</p>
<p>Cuando ejecutas el programa que escribimos, el m&#233;todo <code type="inline">open</code> le dice a tu computadora que produzca un nuevo archivo de texto llamado <code type="inline">holamundo.txt</code> en la misma carpeta en la que creamos el programa <code type="inline">archivo-salida.py</code>. El <emph>par&#225;metro w</emph> indica que pretendemos escribir contenido en este nuevo archivo utilizando Python.</p>
<p>Ten en cuenta que tanto el nombre del archivo como el par&#225;metro est&#225;n encerrados entre comillas sencillas con lo cual sabes que ser&#225;n datos almacenados como cadenas. Si te olvidas de incluir las comillas el programa fallar&#225;.</p>
<p>En la l&#237;nea siguiente tu programa escribe el mensaje "hola mundo" (que es otra cadena) en el archivo y luego lo cierra. (Para mayor informaci&#243;n sobre estas declaraciones es importante ver la secci&#243;n de <link target="https://docs.python.org/2/library/stdtypes.html#bltin-file-objects">file objects</link> en las Referencias de la Biblioteca de Python).</p>
<p>Haz doble clic en el bot&#243;n "Ejecutar Python" que creaste en Komodo Edit para correr el programa (o el equivalente en cualquier editor de texto que hayas elegido usar: por ejemplo, haz clic en "#!" en TextWrangler). Y aunque nada estar&#225; escrito en el panel del comando de salida, ver&#225;s un mensaje de estado que dir&#225; algo como esto en Mac o Linux:</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_6" type="block" corresp="code_trabajar-con-archivos-de-texto_6.txt"></code></pre>
<p>Mientras que en Windows se ver&#225;:</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_7" type="block" corresp="code_trabajar-con-archivos-de-texto_7.txt"></code></pre>
<p>Esto significa que se ejecut&#243; el programa con &#233;xito. Si utilizas <emph>File -&gt; Open -&gt; File</emph> en el Komodo Edit, se puede abrir el archivo <code type="inline">holamundo.txt</code>. Este debe contener el mensaje de una sola linea:</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_8" type="block" corresp="code_trabajar-con-archivos-de-texto_8.txt"></code></pre>
<p>Dado que los archivos de texto plano incluyen la informaci&#243;n m&#237;nima, tienden a ser de peque&#241;o volumen, f&#225;ciles de intercambiar entre diferentes plataformas (por ejemplo, de Windows a Linux o Mac o viceversa), y f&#225;ciles de enviar de un programa inform&#225;tico a otro.  Tambi&#233;n pueden ser le&#237;dos en todos los editores de texto como Komodo Edit.</p>
<div type="3"><head>Leer desde un archivo de texto</head>
<p>Python tambi&#233;n tiene m&#233;todos que nos permiten obtener informaci&#243;n de los archivos. Escribe el siguiente programa en el editor de texto y gu&#225;rdalo como <code type="inline">archivo-entrada.py</code>. Cuando hagas clic en "Ejecutar Python", el programa abrir&#225; el archivo de texto que acabas de crear, leer&#225; el texto de una l&#237;nea que contiene e imprimir&#225; la informaci&#243;n en el panel de "comando de salida".</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_9" type="block" corresp="code_trabajar-con-archivos-de-texto_9.txt"></code></pre>
<p>En este caso, el par&#225;metro <emph>r</emph> se utiliza para indicar que est&#225;s abriendo un archivo para leer (<code type="inline">read</code>) la informaci&#243;n que contiene. Los par&#225;metros te permiten escoger entre una serie de diferentes opciones que permita un m&#233;todo en particular. Regresando al ejemplo de la mascota, el perro puede ser adiestrado para ladrar una vez si recibe un premio con sabor a res, y dos si recibe un premio con sabor a pollo. El sabor de la galleta de premio es el par&#225;metro. Cada m&#233;todo es diferente en t&#233;rminos de qu&#233; par&#225;metros aceptar&#225;. Por ejemplo, no puedes pedirle al perro que cante una &#243;pera italiana -al menos que tu perro sea particularmente talentoso.  Puedes encontrar la posibilidad de par&#225;metros para cada m&#233;todo en particular en el sitio web de Python, o incluso puedes descubrirlos t&#250; mismo en cualquier buscador tecleando el m&#233;todo espec&#237;fico acompa&#241;ado por la palabra "Python".</p>
<p><code type="inline">Read</code> es otro m&#233;todo de archivo. El contenido del archivo (el mensaje de una sola l&#237;nea) es copiado a <emph>message</emph>, que es como decidimos llamar a esa cadena de texto, y el comando <code type="inline">print</code> se utiliza para enviar el contenido recogido en <emph>message</emph> al panel de comando de salida.</p>
</div><div type="3"><head>Anexar texto a un archivo de texto preexistente</head>
<p>Una tercera opci&#243;n es abrir un archivo preexistente y a&#241;adirle m&#225;s informaci&#243;n. Ten en cuenta que si abres un archivo mediante <code type="inline">open</code> y usas el m&#233;todo <code type="inline">write</code>, el programa <emph>sobrescribir&#225; cualquier cosa que el archivo contenga</emph>. Por supuesto que esto no es ning&#250;n problema cuando se crea un nuevo archivo o cuando se desea sobre-escribir el contenido de un archivo existente, pero es totalmente indeseable cuando est&#225;s creando una lista larga de eventos o est&#225;s compilando una gran cantidad de datos en un archivo. As&#237; que, en vez de <code type="inline"> write</code>, vamos a usar el m&#233;todo <code type="inline"> append</code>, que es designado con una <code type="inline"> a</code> .</p>
<p>Escribe el siguiente programa en el editor de texto y gu&#225;rdalo con el nombre de <code type="inline"> archivo-apendice.py</code>. Cuando lo ejecutes, este programa abrir&#225; el mismo archivo de texto <code type="inline"> holamundo.txt</code> que creaste antes y a&#241;adir&#225; un segundo "Hola Mundo" al archivo. La sintaxis '\n' representa una nueva l&#237;nea de texto en el archivo.</p>
<pre><code class="language-python" xml:id="code_trabajar-con-archivos-de-texto_10" type="block" corresp="code_trabajar-con-archivos-de-texto_10.txt"></code></pre>
<p>Despu&#233;s de que hayas ejecutado el programa, ve al archivo <code type="inline">holamundo.txt</code> y &#225;brelo para ver qu&#233; sucedi&#243;. Cierra el archivo de texto y vuelve a ejecutar el programa <code type="inline">archivo-apendice.py</code> las veces que quieras. Cuando abras nuevamente el archivo <code type="inline">holamundo.txt</code> ver&#225;s que habr&#225; una serie de l&#237;neas con el mensaje "Hola Mundo" repetido tantas veces como las que ejecutaste el programa.</p>
<p>En la siguiente secci&#243;n discutiremos dos conceptos: modularidad y reutilizaci&#243;n de c&#243;digo.</p>
</div></div>
      <div type="2"><head>Lecturas recomendadas</head>
<ul>
<li><link target="http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_2.6/Hello,_World">Non-Programmer&#8217;s Tutorial for Python 2.6/Hello, World</link></li>
</ul>
</div>
    </body>
  </text>
</TEI>
