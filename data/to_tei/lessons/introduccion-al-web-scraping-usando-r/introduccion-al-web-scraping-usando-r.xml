<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Introducci&#243;n al web scraping usando R</title>
  <collection>lessons</collection>
  <layout>lesson</layout>
  <slug>introduccion-al-web-scraping-usando-r</slug>
  <authors>Riva Quiroga</authors>
  <editors>Joshua G. Ortiz Baco</editors>
  <reviewers>Nicole Larrondo,Luis Avil&#233;s Gonz&#225;lez</reviewers>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/493</review-ticket>
  <date>2022-12-29</date>
  <difficulty>2</difficulty>
  <activity>acquiring</activity>
  <topics>web-scraping</topics>
  <abstract>En esta lecci&#243;n conocer&#225;s la t&#233;cnica de adquisici&#243;n de datos conocida como web scraping y aprender&#225;s a extraer datos textuales publicados en una p&#225;gina web.</abstract>
  <avatar_alt>grabado de una m&#225;quina utilizada en el proceso de miner&#237;a de oro.</avatar_alt>
  <doi>10.46430/phes0061</doi>
</metadata>
  <text xml:lang="es">
    <body><p>En esta lecci&#243;n introduciremos la t&#233;cnica de adquisici&#243;n de datos conocida como rascado web o web scraping, la cual nos permite extraer contenido publicado en una p&#225;gina web. Al tratarse de la primera lecci&#243;n de una serie sobre este tema, introduciremos algunos conceptos que son relevantes para aplicar mejor este procedimiento, as&#237; como el paso a paso para implementarlo.</p>
<p>Los objetivos de aprendizaje de esta primera lecci&#243;n son:</p>
<ul>
<li>
<p>Conocer los elementos b&#225;sicos de la estructura de un sitio web necesarios para extraer su contenido</p>
</li>
<li>
<p>Comprender qu&#233; es lo que caracteriza al web scraping &#233;tico</p>
</li>
<li>
<p>Aplicar estrategias para extraer desde una p&#225;gina web datos que est&#233;n en formato de bloque de texto</p>
</li>
</ul>
<p>Este tutorial se divide en tres secciones. En la primera, revisaremos algunas de las caracter&#237;sticas generales de una p&#225;gina web que es relevante conocer cuando hacemos web scraping. En la segunda, discutiremos algunas consideraciones respecto de la dimensi&#243;n &#233;tica de esta t&#233;cnica, es decir, c&#243;mo podemos determinar no solo si es viable extraer los datos de una p&#225;gina, sino tambi&#233;n si es algo que podemos hacer y qu&#233; condiciones debemos respetar. En la tercera, haremos un primer ejercicio de extracci&#243;n que nos permitir&#225; conocer el flujo de trabajo habitual en la aplicaci&#243;n de este tipo de t&#233;cnica. Para ello, extraeremos de la p&#225;gina oficial de la presidencia de Chile los discursos de asunci&#243;n al cargo de los dos &#250;ltimos presidentes de ese pa&#237;s.</p>
<div type="2"><head>Prerrequisitos</head>
<p>En esta lecci&#243;n mostraremos c&#243;mo hacer web scraping usando <link target="https://perma.cc/7ZDM-J8GF">R</link>. Las explicaciones que daremos asumen que ya tienes cierto grado de familiaridad con este lenguaje de programaci&#243;n. Por ejemplo, sabes c&#243;mo ejecutar el c&#243;digo, c&#243;mo instalar y activar paquetes, y c&#243;mo guardar un script y un archivo con datos en tu directorio de trabajo. Si no has utilizado R antes, te sugerimos revisar primero los tutoriales <link target="/es/lecciones/datos-tabulares-en-r">Datos tabulares en R</link> y <link target="/es/lecciones/administracion-de-datos-en-r">Administraci&#243;n de datos en R</link>, que te permitir&#225;n adquirir la base necesaria.</p>
<p>Para poder completar los distintos pasos que ilustraremos necesitar&#225;s:</p>
<ul>
<li>Al menos la versi&#243;n 4.1 de R, ya que utilizaremos el operador pipe de R base (<code type="inline">|&gt;</code>) que est&#225; disponible desde mayo de 2021. Puedes ejecutar <code type="inline">R.version</code> para revisar cu&#225;l es la versi&#243;n que tienes instalada (o fijarte en el mensaje que se imprime en la consola cuando inicias R). De todos modos, deber&#237;as obtener los mismos resultados si utilizas el pipe del paquete magrittr (<code type="inline">%&gt;%</code>)</li>
<li>Los paquetes <hi rend="bold">rvest</hi>, <hi rend="bold">stringr</hi> y <hi rend="bold">readr</hi></li>
</ul>
<p>Si bien no es necesario utilizar <link target="https://perma.cc/K4A9-TWA2">RStudio</link> para completar la lecci&#243;n, las capturas de pantalla que se incluyen provienen de ese programa. Algo similar ocurre respecto del navegador. Si bien puedes usar cualquiera, para las capturas de pantalla se utiliz&#243; Firefox.</p>
<p>Los datos que extraeremos los guardaremos en una carpeta llamada "discursos", por lo que es necesario que la crees en tu directorio de trabajo (por ejemplo, con la funci&#243;n <code type="inline">dir.create("discursos")</code>).</p>
</div><div type="2"><head>&#191;Qu&#233; es el rascado web o web scraping?</head>
<p>Web scraping es una t&#233;cnica que nos permite extraer datos publicados en un sitio web. A trav&#233;s de ella "rascamos" el c&#243;digo html de una p&#225;gina para obtener aquellas secciones que nos interesan, por ejemplo, tablas, p&#225;rrafos con texto, enlaces, im&#225;genes, etc.</p>
<p>Para poder entender mejor c&#243;mo funciona este procedimiento, es necesario que revisemos algunos aspectos b&#225;sicos acerca de c&#243;mo est&#225; construida una p&#225;gina web. Ten en cuenta que esta ser&#225; una explicaci&#243;n simplificada, que busca destacar solo aquellos elementos que resultan relevantes cuando hacemos web scraping. Si ya tienes claro qu&#233; es un elemento html, una clase o un id, quiz&#225;s prefieras saltarte esta secci&#243;n y pasar a la siguiente.</p>
<div type="3"><head>Una p&#225;gina web = archivo de texto etiquetado</head>
<p>Una p&#225;gina web es un archivo de texto plano que utiliza la extensi&#243;n <code type="inline">.html</code>. Al contenido de ese archivo se le agregan ciertas etiquetas para indicar a qu&#233; corresponde cada uno de sus elementos, lo que permite darle la estructura necesaria para que se visualice correctamente en un navegador.</p>
<p>Para ilustrar esta idea, revisemos el siguiente ejemplo de c&#243;digo html:</p>
<pre><code class="language-html" xml:id="code_introduccion-al-web-scraping-usando-r_0" type="block" corresp="code_introduccion-al-web-scraping-usando-r_0.txt"></code></pre>
<p>En el ejemplo anterior, el contenido est&#225; delimitado por distintos tipos de etiquetas. Por ejemplo, en la primera l&#237;nea el texto "Este es el t&#237;tulo m&#225;s grande" est&#225; rodeado de etiquetas que indican el inicio (<code type="inline">&lt;h1&gt;</code>) y el t&#233;rmino (<code type="inline">&lt;/h1&gt;</code>) de un encabezado (header) de nivel 1 (el m&#225;s grande posible). Tenemos tambi&#233;n otras etiquetas:</p>
<ul>
<li><code type="inline">&lt;h2&gt; ... &lt;/h2&gt;</code> para t&#237;tulos de nivel 2 (que son un poco m&#225;s peque&#241;os que los de nivel 1)</li>
<li><code type="inline">&lt;p&gt; ... &lt;/p&gt;</code> para p&#225;rrafos</li>
<li><code type="inline">&lt;ol&gt; ... &lt;/ol&gt;</code> para una lista ordenada en que cada uno de sus elementos est&#225; a su vez etiquetado con <code type="inline">&lt;li&gt; ... &lt;/li&gt;</code>
Este conjunto de etiquetas permite que al abrir el documento en un navegador, este interprete el contenido de lo que est&#225; entre las etiquetas como un elemento con ciertas caracter&#237;sticas, tal como se observa en la siguiente imagen. Si quieres probar c&#243;mo funciona, puedes guardar el bloque de c&#243;digo en un archivo de texto, cambiarle la extensi&#243;n por .html y luego abrirlo en tu navegador.</li>
</ul>
<figure><desc>Visualizaci&#243;n del documento html en el navegador" alt="Captura de pantalla de c&#243;mo se visualiza el documento html anterior en un navegador. En &#233;l los t&#237;tulos etiquetados como h1 son de mayor tama&#241;o que los de h2, y los elementos etiquetados como li dentro la etiqueta ol se muestran como una lista numerada</desc><graphic url="introduccion-al-web-scraping-usando-r-01.png"/></figure>
<p>Las etiquetas que hemos agregado permiten, por ejemplo, que lo que est&#225; etiquetado como <code type="inline">h1</code> se vea m&#225;s grande que lo que est&#225; como <code type="inline">h2</code> y que nuestra lista est&#233; numerada. Como se observa en la imagen anterior, todas estas etiquetas nos permiten definir la estructura del contenido de nuestro documento html. Pero &#191;qu&#233; pasa con el estilo? &#191;C&#243;mo se indica, por ejemplo, que lo que est&#225; etiquetado como <code type="inline">h1</code> debe tener una determinada fuente tipogr&#225;fica o un tama&#241;o y color particular? Todo eso podemos indicarlo con <link target="https://perma.cc/W433-5YJG">las hojas de estilo en cascada</link>, conocidas como CSS por sus siglas en ingl&#233;s (Cascading Style Sheets). A trav&#233;s de ellas definimos las reglas de estilo que hay que aplicar a cada elemento de nuestro documento html.</p>
<p>No profundizaremos ac&#225; acerca de c&#243;mo y d&#243;nde se escriben y aplican estas reglas, sino que solo nos referiremos a aquellos aspectos que inciden cuando hacemos web scraping. El m&#225;s importante es que podemos crear "clases". Para explicar qu&#233; es una clase, volvamos a nuestro ejemplo anterior. En &#233;l tenemos dos encabezados de nivel 2 (<code type="inline">&lt;h2&gt;</code>). Si queremos que ambos se vean igual, bastar&#237;a con indicar en nuestro archivo CSS las caracter&#237;sticas que deben tener todos los encabezados <code type="inline">h2</code>. &#191;Pero qu&#233; pasa si no queremos que sean todos iguales? Por ejemplo, como el primero es el encabezado de una lista, podr&#237;amos querer que algo en su formato sea distinto. Para distinguir ambos encabezados <code type="inline">h2</code> lo que podemos hacer es asignarle una clase distinta a cada uno y luego definir las caracter&#237;sticas de cada clase en nuestra hoja de estilo. Eso nos permitir&#237;a, por ejemplo, hacer que los encabezados de una lista tengan una fuente tipogr&#225;fica distinta a los que encabezan un p&#225;rrafo. Para asignar la clase de un determinado elemento, lo que hacemos es agregar <code type="inline">class="nombre-de-la-clase"</code> dentro de la etiqueta de inicio, tal como se muestra en esta versi&#243;n actualizada de nuestro ejemplo:</p>
<pre><code class="language-html" xml:id="code_introduccion-al-web-scraping-usando-r_1" type="block" corresp="code_introduccion-al-web-scraping-usando-r_1.txt"></code></pre>
<p>Ahora, cada uno de los encabezados de nivel 2 corresponde a una clase diferente, lo que nos permite distinguirlos. A diferencia de las etiquetas html, <link target="https://perma.cc/95F8-PRLD">que son una lista cerrada</link>, el nombre de la clase es algo que define quien crea el sitio web.</p>
<p>&#191;Por qu&#233; es relevante entender qu&#233; son los elementos y las clases? Cuando hacemos web scraping lo que hacemos es importar el c&#243;digo html de un sitio web a nuestro computador (usando R, por ejemplo) y extraer aquellas partes espec&#237;ficas que nos interesan. Como el contenido de un archivo html se encuentra etiquetado, podemos utilizar esas mismas etiquetas para especificar cu&#225;les son las partes de la p&#225;gina que nos interesa extraer. Por esa raz&#243;n, entender la diferencia entre un "elemento" del documento html y una "clase" nos va a permitir precisar mejor cu&#225;l es el contenido exacto que queremos de una p&#225;gina. Si en nuestro ejemplo anterior quisi&#233;ramos extraer todos los encabezados de nivel 2, bastar&#237;a con indicar que queremos todo el contenido etiquetado como <code type="inline">&lt;h2&gt;</code>. Pero si solo nos interesan los encabezados <code type="inline">&lt;h2&gt;</code> de las secciones que corresponden a una lista, entonces saber que su clase es <code type="inline">"encabezado-lista"</code> nos permitir&#225; seleccionar solo esa parte del contenido y no los <code type="inline">h2</code> de la clase <code type="inline">"encabezado-parrafo"</code>. Es decir, podemos hacer una b&#250;squeda y extracci&#243;n m&#225;s precisa.</p>
<p>Adem&#225;s de los elementos y las clases, existen los <link target="https://perma.cc/Z6XM-ZHHX">id</link>, que son la forma que tenemos de identificar de manera &#250;nica un elemento dentro de un documento html. A diferencia de las clases, que se pueden aplicar a m&#225;s de una instancia de un mismo elemento (por ejemplo, todos los encabezados <code type="inline">&lt;h2&gt;</code>), un id puede ser utilizado una sola vez por documento.
Hay varias razones por las que se utilizan. Por ejemplo, cumplen una funci&#243;n importante cuando el sitio web utiliza JavaScript (un tema que excede los objetivos de esta lecci&#243;n). Pero quiz&#225;s una de las m&#225;s conocidas es que nos permiten crear marcadores (bookmarks) que sirven para que quien lea la p&#225;gina pueda saltar a una parte espec&#237;fica de la misma. Por ejemplo, si revisas la p&#225;gina "Acerca de" en el sitio web de <link target="/es/acerca-de">Programming Historian</link>, ver&#225;s que al pasar el cursor por sobre los subt&#237;tulos de la p&#225;gina aparece un s&#237;mbolo de enlace a la derecha, tal como se muestra en la siguiente imagen:</p>
<figure><desc>Cuando pasamos el cursor sobre alguno de los subt&#237;tulos en la p&#225;gina de Programming Historian aparece un &#237;cono de enlace a la derecha" alt="Captura de pantalla de la p&#225;gina 'Acerca de' del sitio de Programming Historian. En ella se muestra que a la derecha de los subt&#237;tulos aparece un &#237;cono que representa un enlace </desc><graphic url="introduccion-al-web-scraping-usando-r-02.png"/></figure>
<p>Eso ocurre porque cada subt&#237;tulo tiene asignado un id, que identifica de forma &#250;nica esa secci&#243;n de la p&#225;gina. Si revisamos el enlace asociado veremos que a la url base de la p&#225;gina (<code type="inline">https://programminghistorian.org/es/acerca-de</code>) se le agrega un <code type="inline">#</code> y el nombre del id (que coincide en este caso con el nombre del subt&#237;tulo): <code type="inline">https://programminghistorian.org/es/acerca-de#revisi&#243;n-por-pares</code>. Esto sirve, por ejemplo, para crear un &#237;ndice de contenido en la p&#225;gina que permita a sus visitantes acceder a secciones espec&#237;ficas. Y tambi&#233;n si queremos compartir un enlace a una secci&#243;n particular de una p&#225;gina web.</p>
<p>El hecho de que los id solo se puedan utilizar una vez es muy &#250;til cuando hacemos web scraping, porque si los datos que queremos est&#225;n etiquetados con un id, cuando tratemos de recuperarlos usando R u otra herramienta tendremos seguridad de que obtendremos exactamente el elemento espec&#237;fico que nos interesa.</p>
<p>A modo de resumen de esta primera secci&#243;n, podemos decir que una p&#225;gina web es un documento de texto plano con extensi&#243;n .html, en que su contenido se encuentra etiquetado. Estas etiquetas sirven para distinguir elementos, clases y, en algunos casos, el id de sus distintos componentes. Cuando hacemos web scraping, esas etiquetas nos servir&#225;n para seleccionar el contenido exacto que nos interesa extraer de una p&#225;gina.</p>
</div></div><div type="2"><head>Poder/deber</head>
<p>Ahora que ya tenemos una idea general de c&#243;mo est&#225; compuesto un archivo html y sus implicancias a la hora de hacer web scraping, podr&#237;amos empezar con un primer ejercicio de extracci&#243;n. Sin embargo, es importante que discutamos brevemente las cuestiones &#233;ticas del uso de esta t&#233;cnica. &#191;Qu&#233; quiere decir esto? Que cuando queremos extraer contenido de un sitio web no solo tenemos que preguntarnos si es viable hacerlo (en t&#233;rminos de si tenemos el conocimiento y herramientas necesarias), sino tambi&#233;n si podemos o debemos extraer esos datos. Esta pregunta supone averiguar dos cosas:</p>
<ol>
<li>Si los datos tienen alguna restricci&#243;n de uso, producto de la licencia con que han sido publicados</li>
<li>C&#243;mo el sitio web espera que interactuemos con &#233;l (sobre todo si lo haremos a trav&#233;s de un medio automatizado, como el web scraping)</li>
</ol>
<p>&#191;C&#243;mo podemos averiguar esto? Usualmente esta informaci&#243;n se encuentra en la secci&#243;n relativa a las condiciones de uso del sitio web. Adem&#225;s, existe un archivo llamado <code type="inline">robots.txt</code> que nos entrega pistas adicionales sobre c&#243;mo interactuar con el sitio. A continuaci&#243;n explicaremos c&#243;mo obtener esta informaci&#243;n y c&#243;mo interpretarla.</p>
<div type="3"><head>Revisar los t&#233;rminos o condiciones de uso</head>
<p>La mayor&#237;a de los sitios web incluyen una secci&#243;n en la que se indica cu&#225;les son los t&#233;rminos o condiciones de uso. Usualmente esa informaci&#243;n la encontramos en la parte inferior de la p&#225;gina, ya sea porque hay un mensaje que expl&#237;citamente dice lo que podemos hacer con el sitio, o bien, porque hay un enlace que nos lleva a un documento m&#225;s detallado. Por ejemplo, si vas a la parte inferior de cualquier p&#225;gina de Programming Historian, encontrar&#225;s el siguiente mensaje: "Programming Historian en espa&#241;ol (ISSN: 2517-5769) se publica con una licencia CC-BY".</p>
<figure><desc>Declaraci&#243;n sobre la licencia de publicaci&#243;n del contenido de Programming Historian" alt="Captura de pantalla del pie de p&#225;gina del sitio de Programming Hisorian en el que se explicita la licencia con que se publican los contenidos</desc><graphic url="introduccion-al-web-scraping-usando-r-03.png"/></figure>
<p>En este caso, la explicitaci&#243;n de la licencia utilizada nos permite saber que podemos compartir y adaptar el material publicado, siempre que se sigan los t&#233;rminos de atribuci&#243;n que <link target="https://perma.cc/D9YE-HXCJ">este tipo de licencia</link> exige.
En otros casos, en particular cuando se trata de sitios web cuyo contenido no est&#225; pensado para ser compartido, nos encontraremos con una explicaci&#243;n m&#225;s larga y detallada de lo que se puede y no puede hacer. Por ejemplo, un sitio web que es muy expl&#237;cito respecto de esto es Amazon. Si vas hasta la parte de m&#225;s abajo de su p&#225;gina de inicio, encontrar&#225;s <link target="https://www.amazon.es/gp/help/customer/display.html?nodeId=201909000">un enlace a las condiciones de uso</link>. En esa secci&#243;n se describen de forma extensa los t&#233;rminos de uso del sitio. &#191;C&#243;mo encontrar la informaci&#243;n que nos interesa cuando la secci&#243;n es as&#237; de larga? Algo que usualmente resulta &#250;til es buscar palabras como "robot", "extracci&#243;n", "extraer" o "autom&#225;tico/a". En este caso, esa b&#250;squeda nos llevar&#225; al siguiente p&#225;rrafo:</p>
<blockquote>
<p>"No est&#225; permitida la extracci&#243;n sistem&#225;tica ni la reutilizaci&#243;n de
parte alguna del contenido de ninguno de los servicios de Amazon sin
nuestro expreso consentimiento por escrito. En particular, no se
permite el uso de herramientas o robots de b&#250;squeda y extracci&#243;n de
datos para la extracci&#243;n (ya sea en una o varias ocasiones) de partes
sustanciales de los servicios de Amazon para su reutilizaci&#243;n sin
nuestro expreso consentimiento por escrito. Tampoco le est&#225; permitido
al usuario crear ni publicar sus propias bases de datos cuando &#233;stas
contengan partes sustanciales de cualquiera de los servicios de Amazon
(por ejemplo, nuestras listas de productos y listas de precios) sin
nuestro expreso consentimiento por escrito.<ref type="footnotemark" target="#1"/>"</p>
</blockquote>
<p>Es decir:</p>
<ol>
<li>Necesitamos la autorizaci&#243;n de Amazon por escrito para extraer o reutilizar el contenido de su sitio web</li>
<li>No est&#225; permitido utilizar herramientas de extracci&#243;n de datos (&#161;como el web scraping!)</li>
<li>No est&#225; permitido crear una base de datos a partir del contenido extra&#237;do de este sitio web</li>
</ol>
<p>Por lo tanto, seg&#250;n lo que el propio sitio nos indica, por mucho que sepamos c&#243;mo extraer los datos de &#233;l, no es algo que debi&#233;semos hacer si queremos respetar los t&#233;rminos de uso que la empresa ha definido.</p>
</div><div type="3"><head>Revisar el archivo robots.txt</head>
<p>Existe otro lugar en el que podemos encontrar informaci&#243;n sobre c&#243;mo interactuar con un sitio web: el archivo robots.txt. Este archivo explicita algo que se conoce como "protocolo de exclusi&#243;n de robots", es decir, en &#233;l se dan instrucciones de qu&#233; puede y no puede hacer un mecanismo automatizado de extracci&#243;n de datos al interactuar con ese sitio en particular. Lamentablemente no todos los sitios web lo incluyen, por lo que no siempre encontraremos esta informaci&#243;n disponible.</p>
<p>Este archivo est&#225; pensado principalmente para robots que hacen extracciones masivas del contenido de algunas p&#225;ginas. Sin embargo, en &#233;l encontraremos informaci&#243;n relevante para tareas m&#225;s discretas, como las que realizaremos en esta serie de lecciones.</p>
<p>El documento robots.txt se encuentra en el directorio ra&#237;z de un sitio web, por lo tanto, en caso de estar disponible, podemos acceder a su contenido agregando "robots.txt" luego de la url principal. Por ejemplo, si quisi&#233;ramos revisar la versi&#243;n de este archivo del sitio web del proyecto <link target="http://www.memoriachilena.gob.cl/">Memoria Chilena</link> de la Biblioteca Nacional de Chile, tendr&#237;amos que escribir: <code type="inline">http://www.memoriachilena.gob.cl/robots.txt</code>. Eso nos llevar&#225; a <link target="https://perma.cc/37MD-HP8Y">una p&#225;gina</link> con el siguiente contenido:</p>
<pre><code xml:id="code_introduccion-al-web-scraping-usando-r_2" type="block" corresp="code_introduccion-al-web-scraping-usando-r_2.txt"></code></pre>
<p>&#191;Qu&#233; significa este mensaje? Revisemos cada l&#237;nea:</p>
<ul>
<li><code type="inline">User-agent: *</code>: Indica a qui&#233;n se aplican estas instrucciones. A veces aparece el nombre de alg&#250;n robot en particular. En este caso, el asterisco explicita que estas instrucciones aplican a todos.</li>
<li><code type="inline">Allow: /</code>: Indica cu&#225;les son las rutas dentro del sitio desde las que es posible extraer datos. En este caso la barra <code type="inline">/</code> indica que es posible hacerlo de todas.</li>
<li><code type="inline">Disallow: /*/alt-*.html</code> y <code type="inline">Disallow: /*/aux-*.html</code> explicitan aquellas rutas dentro del sitio web desde las que no se da autorizaci&#243;n para hacer una extracci&#243;n de forma automatizada. En este caso, son todas aquellas p&#225;ginas cuya url incluye <code type="inline">alt-</code> o <code type="inline">aux-</code>. Es decir, ac&#225; se est&#225; poniendo una restricci&#243;n a la autorizaci&#243;n general que nos dieron en la l&#237;nea anterior.</li>
<li><code type="inline">Crawl-Delay: 2</code>: Explicita la cantidad de segundos que es necesario esperar entre cada petici&#243;n (request) de datos al sitio. Esto es importante tenerlo en cuenta cuando extraemos datos de varias p&#225;ginas dentro de un sitio web al mismo tiempo, ya que esos segundos de espera permiten que el funcionamiento del sitio no se vea afectado. Por el momento no es algo que necesitemos tener en consideraci&#243;n para esta lecci&#243;n en particular, pero s&#237; ser&#225; relevante en la tercera parte de esta serie.</li>
</ul>
<p>Como se&#241;alamos anteriormente, es importante tener en cuenta que no todos los sitios web tienen un archivo robots.txt o una secci&#243;n espec&#237;fica sobre cu&#225;les son las condiciones de uso. A veces este tipo de informaci&#243;n est&#225; contenida dentro de otras secciones (por ejemplo, "Preguntas frecuentes" o "Acerca de") y en otras simplemente no se menciona nada. En esos casos tendr&#225;s que aplicar tu criterio y evaluar qu&#233; es lo m&#225;s adecuado.</p>
</div></div><div type="2"><head>Ejercicio pr&#225;ctico: extraer el texto contenido en un sitio web</head>
<p>Ahora que tenemos clara la forma de funcionamiento de un sitio web y c&#243;mo averiguar de qu&#233; forma podemos interactuar con &#233;l, haremos un primer ejercicio de extracci&#243;n de datos. En &#233;l mostraremos c&#243;mo extraer texto contenido en una p&#225;gina. Este m&#233;todo resulta particularmente &#250;til cuando, por ejemplo, necesitamos compilar un corpus de textos disponibles en l&#237;nea.
En esta ocasi&#243;n, usaremos como ejemplos los discursos de asunci&#243;n de los dos &#250;ltimos presidentes de Chile. Los discursos que extraeremos se encuentran disponibles en <link target="https://prensa.presidencia.cl/">la p&#225;gina de prensa de la presidencia Chile</link>. Este podr&#237;a ser el paso inicial para compilar, por ejemplo, un corpus de discursos de asunci&#243;n al cargo que posteriormente podr&#237;amos analizar con alguna t&#233;cnica de miner&#237;a de textos. Veamos ahora el paso a paso para realizar la extracci&#243;n.</p>
<div type="3"><head>Paso 1. Revisar los t&#233;rminos de uso del sitio web</head>
<p>Si revisamos la parte inferior <link target="https://perma.cc/83EB-9NYL">del sitio web</link>, encontraremos un mensaje en el que se se&#241;ala de forma expl&#237;cita que podemos utilizar los contenidos publicados ah&#237;.</p>
<figure><desc>Declaraci&#243;n de la licencia con que se publican los contenidos en el sitio web de prensa de la Presidencia de Chile" alt="Captura de pantalla del pie de p&#225;gina en que se indica la licencia. El texto dice 'Todos los derechos liberados. Se pueden reproducir, usar y descargar todos los contenidos, sin alterarlos y citando la fuente. Direcci&#243;n de prensa, Presidencia de la Rep&#250;blica de Chile'</desc><graphic url="introduccion-al-web-scraping-usando-r-04.png"/></figure>
<p>Como en esta ocasi&#243;n haremos solo una "llamada" al sitio web, no es necesario preocuparnos por los tiempos de espera (crawl delay) que podr&#237;an estar indicados en el archivo robots.txt (aunque en este caso en particular el sitio no contiene este archivo). As&#237; que con la informaci&#243;n de que los derechos est&#225;n liberados, ya tenemos todo lo necesario para continuar con el siguiente paso.</p>
</div><div type="3"><head>Paso 2. Identificar la etiqueta que contiene los datos que nos interesan</head>
<p>Como veremos a lo largo de esta serie de lecciones, los pasos para hacer web scraping suelen ser los mismos siempre. Lo que var&#237;a cada vez es el elemento, la clase o el id en el que se encuentra el contenido queremos extraer de una determinada p&#225;gina.
&#191;C&#243;mo podemos saber cu&#225;l es la etiqueta del contenido que nos interesa? Existen dos formas: la primera, utilizando las herramientas de desarrollo incluidas en el navegador; la segunda, utilizando alguna extensi&#243;n para nuestro navegador que nos ayude con este prop&#243;sito. En esta ocasi&#243;n ilustraremos el primer m&#233;todo, ya que es el que resulta &#243;ptimo para el sitio web con el que trabajaremos.</p>
<div type="4"><head>Las herramientas de desarrollo del navegador</head>
<p>Tanto en Firefox como en Chrome se puede acceder a las herramientas de desarrollo utilizando el comando abreviado Ctrl + Shift + i (o Cmd + Shift + i si est&#225;s en Mac). Eso abrir&#225; un panel que nos mostrar&#225; el c&#243;digo html de la p&#225;gina y las reglas de estilo (CSS). En el caso de Firefox el panel se encuentra en la parte inferior de la ventana (en Chrome lo ver&#225;s al lado derecho). Tambi&#233;n puedes llegar a las herramientas de desarrollo utilizando el bot&#243;n derecho del rat&#243;n (o Ctrl + hacer clic si usas Mac). En el men&#250; que se despliega debes seleccionar la opci&#243;n "Inspect" o "Inspeccionar", que es la que abrir&#225; el panel de desarrollo.</p>
<figure><desc>El panel de desarrollo en Firefox" alt="Captura de pantalla del sitio web en que estamos trabajando, una vez que se abre el panel de desarrollo. Este aparece en la parte inferior de la p&#225;gina y consta de tres subp&#225;neles. En la captura de pantalla est&#225; destacado el de la izquierda, que es el que contiene el c&#243;digo html</desc><graphic url="introduccion-al-web-scraping-usando-r-05.png"/></figure>
<p>En el caso de Firefox, lo que est&#225; al lado izquierdo del panel es el c&#243;digo html de la p&#225;gina. Si hacemos clic en las l&#237;neas que tienen una flecha al lado izquierdo, se ir&#225; desplegando el c&#243;digo de la p&#225;gina. Y si ponemos el cursor sobre alguna de las l&#237;neas de ese c&#243;digo, se destacar&#225; en la p&#225;gina la parte de la misma a la que corresponde esa l&#237;nea en particular.</p>
<figure><desc>Cuando ponemos el cursor sobre alguna de las l&#237;neas de c&#243;digo en el panel de desarrollo se destaca la parte correspondiente en la p&#225;gina" alt="Captura de pantalla del sitio web que muestra en la mitad de abajo el panel de desarrollo. En ese panel hay una l&#237;nea de c&#243;digo marcada y una flecha que muestra a qu&#233; elemento dentro de la p&#225;gina corresponde esa l&#237;nea. Sobre el elemento de la p&#225;gina aparece un recuadro con la etiqueta h3</desc><graphic url="introduccion-al-web-scraping-usando-r-06.png"/></figure>
<p>Por ejemplo, en la captura de pantalla anterior, pusimos el cursor sobre la l&#237;nea que dec&#237;a <code type="inline">h3</code> y eso destac&#243; el titular de la nota que aparece ah&#237; publicada.</p>
<p>Tambi&#233;n podemos hacerlo al rev&#233;s (que suele ser la forma m&#225;s &#250;til), es decir, poner el cursor sobre alg&#250;n elemento de la p&#225;gina para que el navegador nos muestre a qu&#233; parte del c&#243;digo corresponde ese fragmento en particular. Hay dos maneras de hacer esto. Si ya tienes abierto el panel con las herramientas de desarrollo, como en nuestro caso, puedes hacer clic en la esquina superior izquierda de ese panel, en el s&#237;mbolo que tiene un cursor. Al hacerle clic cambiar&#225; de color a azul para indicar que est&#225; activa esa opci&#243;n. Si no tienes abierto el panel, puedes utilizar el comando abreviado Ctrl/Cmd + Shift + C, que abrir&#225; las herramientas del navegador con esa opci&#243;n ya activa.</p>
<figure><desc>Cuando la opci&#243;n de seleccionar un elemento de la p&#225;gina se activa cambia de color" alt="Captura de pantalla de la esquina superior izquierda del panel de desarrollo. En ella se muestra el &#237;cono de la opci&#243;n para hacer clic sobre elementos de la p&#225;gina para que se destaquen en el c&#243;digo. Bajo el &#237;cono aparece un recuadro con el control abreviado de teclado para activar esta opci&#243;n, que es Ctrl+Shift+C</desc><graphic url="introduccion-al-web-scraping-usando-r-07.png"/></figure>
<p>Esta opci&#243;n te permitir&#225; mover el cursor por la p&#225;gina para que se destaque en el panel la parte del c&#243;digo correspondiente. Adem&#225;s, al igual que en el caso anterior, se desplegar&#225; un recuadro con informaci&#243;n sobre el elemento. Por ejemplo, si movemos el cursor hacia el nombre de la p&#225;gina en la parte superior, veremos que el recuadro nos indica que corresponde a <code type="inline">img.full</code>. En este caso, <code type="inline">img</code> indica el elemento html al que correponde esta parte de la p&#225;gina (una imagen) y <code type="inline">.full</code> nos indica la clase a la que corresponde. Si miramos el panel veremos que la l&#237;nea destacada es: <code type="inline">&lt;img src="lfi-content/themes/assets/img/logo_prensa.png" class="full"&gt;</code>. En ella se indica que es un elemento de tipo imagen, el lugar donde se encuentra alojada esa imagen en el directorio de la p&#225;gina y el nombre de la clase que describe las reglas de estilo con que esa imagen debe mostrarse.</p>
<figure><desc>Cuando pasamos el cursor sobre alguna secci&#243;n de la p&#225;gina se destaca en el panel de desarrollo la l&#237;nea de c&#243;digo que le corresponde" alt="Captura de pantalla de la p&#225;gina web con el panel de desarrollo activado. Al pasar el cursor sobre la imagen que dice 'Prensa Presidencia' se activa la l&#237;nea que corresponde al elemento img. Adem&#225;s, sobre la imagen en la p&#225;gina aparece un recuadro con el elemento y su clase.</desc><graphic url="introduccion-al-web-scraping-usando-r-08.png"/></figure>
<p>Ahora que ya sabemos c&#243;mo funciona esa opci&#243;n, busquemos la informaci&#243;n sobre el elemento que contiene el texto del discurso, tal como se muestra en la siguiente captura de pantalla.</p>
<figure><desc>Al pasar el cursor sobre el discurso se destaca la l&#237;nea correspondiente en el panel de desarrollo" alt="Captura de pantalla de la p&#225;gina con el panel de desarrollo abierto. En la p&#225;gina est&#225; la secci&#243;n del discurso destacada y una flecha muestra a qu&#233; l&#237;nea en el c&#243;digo corresponde</desc><graphic url="introduccion-al-web-scraping-usando-r-09.png"/></figure>
<p>Al poner el cursor sobre el discurso, vemos que el recuadro nos indica que corresponde a <code type="inline">div.texto-bloque</code>. En principio, pareciera que eso nos sirve. Sin embargo, si te fijas la clase "texto-bloque" no solo incluye el discurso, sino tambi&#233;n las dos l&#237;neas anteriores que, t&#233;cnicamente, no son parte de el. Es decir, no son parte de lo que <link target="https://perma.cc/73EN-ETLK">Gabriel Boric</link> dijo en ese momento, sino la presentaci&#243;n de lo que viene a continuaci&#243;n. Es importante eliminar esas dos oraciones en alg&#250;n momento del proceso, ya que en el futuro podr&#237;an alterar los resultados de nuestro an&#225;lisis. La primera opci&#243;n ser&#237;a revisar si existe alg&#250;n otro elemento, clase o id que capture solo el discurso. Si eso no funciona, entonces tenemos que recordar eliminar manualmente esas l&#237;neas cuando procesemos los textos de nuestro corpus.</p>
<p>Busquemos primero si hay alguna etiqueta que contenga solo el discurso. Una opci&#243;n es seguir moviendo el cursor para ver si en alg&#250;n momento se destaca solo la parte que nos interesa. Si eso no resulta, como en este caso, entonces podemos revisar el c&#243;digo de la p&#225;gina con mayor detalle.
Si vamos al panel con el c&#243;digo, podemos empezar a explorar lo que est&#225; dentro del <code type="inline">div</code> de la clase "texto-bloque", que es la que conten&#237;a el discurso y su presentaci&#243;n. Si movemos el cursor por sobre esas l&#237;neas, podemos ir revisando qu&#233; es lo que se destaca en cada una de ellas. Al llegar a la l&#237;nea <code type="inline">&lt;span id="main_ltContenido"&gt;</code> se destaca solo el texto del discurso y en la p&#225;gina aparece un recuadro que confirma que la etiqueta de esa secci&#243;n es <code type="inline">span#main_ltContenido</code>. A diferencia de las clases que se mostraban ah&#237; con un punto antes del nombre, los id tienen un signo <code type="inline">#</code>.</p>
<figure><desc>Al explorar las l&#237;neas de c&#243;digo encontramos la que corresponde solo al discurso" alt="Captura de pantalla de la p&#225;gina con el panel de desarrollo abierto. En &#233;l aparece marcada la l&#237;nea que corresponde al texto del discurso. En la p&#225;gina aparecen destacadas las l&#237;neas del discurso, sin el encabezado que lo introduc&#237;a.</desc><graphic url="introduccion-al-web-scraping-usando-r-10.png"/></figure>
<p>Ahora ya tenemos claro qu&#233; parte del c&#243;digo html es la que nos interesa (<code type="inline">#main_ltContenido</code>), as&#237; que podemos irnos a R a realizar el proceso de extracci&#243;n.</p>
</div></div><div type="3"><head>Paso 3. Importar el c&#243;digo html a R y extraer los datos</head>
<p>Ahora que tenemos claro c&#243;mo est&#225; etiquetado el contenido de la p&#225;gina que nos interesa, usaremos R para hacer la extracci&#243;n.</p>
<p>Lo primero que haremos ser&#225; cargar los paquetes que utilizaremos en el proceso. Todos est&#225;n disponibles en <link target="https://perma.cc/R3F3-KWXE">CRAN</link>, por lo que se pueden instalar con la funci&#243;n <code type="inline">install.packages()</code>:</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_3" type="block" corresp="code_introduccion-al-web-scraping-usando-r_3.txt"></code></pre>
<ul>
<li><hi rend="bold">rvest</hi> es el paquete que nos sirve para importar el c&#243;digo html a R y extraer los elementos de la p&#225;gina que nos interesan</li>
<li><hi rend="bold">stringr</hi> est&#225; enfocado en el manejo de cadenas de texto (conocidas en ingl&#233;s como strings); nos servir&#225; para hacer algunas modificaciones en el formato del texto</li>
<li><hi rend="bold">readr</hi> se utiliza para importar y guardar archivos de texto plano (como csv y txt) y lo usaremos para guardar localmente en nuestro computador el resultado de nuestra extracci&#243;n</li>
</ul>
<p>Como mencionamos anteriormente, en este tutorial utilizaremos el operador pipe de R Base (<code type="inline">|&gt;</code>). Si prefieres utilizar <code type="inline">%&gt;%</code>, tendr&#237;as que cargar tambi&#233;n el paquete <hi rend="bold">magrittr</hi> o <hi rend="bold">dplyr</hi><ref type="footnotemark" target="#2"/>.</p>
<p>Ahora que tenemos cargados los paquetes, importaremos el c&#243;digo html de la p&#225;gina que nos interesa y lo guardaremos en un objeto. Para ello, utilizaremos la funci&#243;n <code type="inline">read_html()</code> del paquete <hi rend="bold">rvest</hi>:</p>
<pre><code xml:id="code_introduccion-al-web-scraping-usando-r_4" type="block" corresp="code_introduccion-al-web-scraping-usando-r_4.txt"></code></pre>
<p>El objeto <code type="inline">html_boric</code> contiene todo el c&#243;digo html de la p&#225;gina. Para seleccionar de su interior solo la parte que nos interesa (en este caso, el id "#main_ltContenido") usamos la funci&#243;n <code type="inline">html_element()</code>. Si te fijas, cuando empezamos a escribir el nombre de esa funci&#243;n, RStudio nos ofrece dos opciones: <code type="inline">html_element()</code> y <code type="inline">html_elements()</code>.</p>
<figure><desc>La opci&#243;n de autocompletar de RStudio muestra que existe tanto html_element() como html_elements()" alt="Captura de pantalla del bloque de c&#243;digo que estamos escribiendo, en el que se muestran las sugerencias que entrega RStudio cuando escribimos la funci&#243;n html_element</desc><graphic url="introduccion-al-web-scraping-usando-r-11.png"/></figure>
<p>La diferencia est&#225; en si queremos capturar una o m&#225;s instancias de un determinado elemento de la p&#225;gina. En esta ocasi&#243;n, como nos interesa un id que solo aparece una vez, <code type="inline">html_element()</code> har&#225; el trabajo que queremos. Pero si nos interesaran todas las ocurrencias de un elemento (por ejemplo, todos los encabezados <code type="inline">&lt;h2&gt;</code>), es muy importante que usemos la versi&#243;n en plural (<code type="inline">html_elements()</code>) para extraerlos todos. De lo contrario, solo obtendremos su primera aparici&#243;n.</p>
<p>Utilizaremos, entonces, <code type="inline">html_element()</code> para indicar el id que nos interesa y guardaremos el resultado en un nuevo objeto:</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_5" type="block" corresp="code_introduccion-al-web-scraping-usando-r_5.txt"></code></pre>
<p>Con esas l&#237;neas de c&#243;digo le estamos pidiendo a R que tome nuestro objeto <code type="inline">html_boric</code> y que extraiga de &#233;l el contenido etiquetado con el id <code type="inline">#main_ltContenido</code>. Si ejecut&#225;ramos nuestro c&#243;digo hasta este momento, lo que obtendr&#237;amos ser&#237;an las l&#237;neas del c&#243;digo html etiquetadas con ese id. Es decir, el texto del discurso nos aparecer&#237;a con todo el c&#243;digo html que permite darle estructura en la p&#225;gina. Si lo imprimi&#233;semos en la consola, ver&#237;amos algo como esto:</p>
<pre><code xml:id="code_introduccion-al-web-scraping-usando-r_6" type="block" corresp="code_introduccion-al-web-scraping-usando-r_6.txt"></code></pre>
<p>Para poder obtener solo el texto, necesitamos un paso m&#225;s: indicarle a R en qu&#233; formato queremos el contenido. En este caso lo queremos como texto (si estuvi&#233;semos extrayendo una tabla, por ejemplo, nos interesar&#237;a que mantuviese la estructura de filas y columnas). Para lograr esto, agregaremos una funci&#243;n m&#225;s a nuestro bloque de c&#243;digo: la funci&#243;n <code type="inline">html_text()</code>. Al escribir el nombre de la funci&#243;n, RStudio nos ofrecer&#225; dos opciones: <code type="inline">html_text()</code> y <code type="inline">html_text2()</code>.</p>
<figure><desc>La opci&#243;n de autocompletar de RStudio muestra que existe tanto html_text() como html_text2()" alt="Captura de pantalla del bloque de c&#243;digo que estamos escribiendo, en el que se muestran las sugerencias que entrega RStudio cuando escribimos la funci&#243;n html_text</desc><graphic url="introduccion-al-web-scraping-usando-r-12.png"/></figure>
<p>En el recuadro amarillo se ofrece una breve descripci&#243;n de las diferencias. La principal es que <code type="inline">html_text2()</code> tratar&#225; de resolver algunas cosas de formato para que el texto se asemeje lo m&#225;s posible a lo que se ve en la p&#225;gina. En este caso usaremos esa opci&#243;n. Si us&#225;semos la otra (<code type="inline">html_text()</code>) el texto nos quedar&#237;a como un solo p&#225;rrafo (si quieres, puedes probar para ver qu&#233; es lo que ocurre). &#191;Cu&#225;l nos conviene utilizar? La decisi&#243;n va a depender de lo que nos interese hacer posteriormente con nuestro corpus. Si queremos mantener la estructura de p&#225;rrafos, entonces nos convendr&#237;a utilizar <code type="inline">html_text2()</code>. Incluso si no tenemos muy claro si los p&#225;rrafos ser&#225;n de utilidad para nuestro corpus en el futuro, es necesario tener en cuenta que si los descartamos ahora no hay manera de recuperarlos (tendr&#237;as que volver a extraer el texto de la p&#225;gina). En esta ocasi&#243;n tomaremos la opci&#243;n precavida y usaremos <code type="inline">html_text2()</code>. Agregaremos, entonces, esta funci&#243;n a nuestro bloque de c&#243;digo, que ahora queda as&#237;:</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_7" type="block" corresp="code_introduccion-al-web-scraping-usando-r_7.txt"></code></pre>
<p>En la secci&#243;n "Values" del panel "Environment" aparecer&#225; ahora <code type="inline">discurso_boric</code> como un objeto tipo caracter. Si lo imprimes en la consola podr&#225;s chequear que el texto est&#225; completo.</p>
<figure><desc>El objeto que creamos qued&#243; en nuestro ambiente global" alt="Captura de pantalla del panel 'Environment' en RStudio, al que ahora se ha agregado el objeto 'discurso_boric'</desc><graphic url="introduccion-al-web-scraping-usando-r-13.png"/></figure>
<p>Ya tenemos el primer documento para nuestro corpus. Nuestro siguiente paso ser&#225; guardarlo para un futuro uso.</p>
</div><div type="3"><head>Paso 4. Procesar y guardar los datos</head>
<p>Ahora que tenemos el primer texto, lo guardaremos localmente en nuestro computador. Para eso crearemos una carpeta llamada "discursos". Puedes crearla como mejor te parezca: ejecutando <code type="inline">dir.create("discursos")</code> en la consola, usando la opci&#243;n "+ Folder" de la esquina superior izquierda del panel Files de RStudio, o directamente en el explorador de archivos de tu computador.</p>
<p>Es importante detenerse un momento a pensar qu&#233; metadatados es necesario incluir en el nombre del archivo al guardarlo. Por ejemplo, al leer el nombre del archivo, ser&#237;a relevante saber qui&#233;n emiti&#243; ese discurso y cu&#225;ndo: <code type="inline">2022_boric.txt</code>. Pero si nuestro corpus eventualmente incluir&#225; discursos de otros pa&#237;ses, entonces necesitar&#237;amos integrar esa variable en el nombre del archivo, por ejemplo, utilizando el c&#243;digo ISO 2 para nombres de pa&#237;ses: <code type="inline">cl_2022_boric.txt</code>. Y si en alg&#250;n momento quisi&#233;ramos incorporar otros tipos de discursos, habr&#237;a que indicar de alguna forma que este archivo corresponde al que se emiti&#243; luego de asumir el cargo: <code type="inline">cl_2022_boric_asuncion-cargo.txt</code>. Si te fijas, usamos guiones bajos (<code type="inline">_</code>) para separar las cuatro variables incluidas en el nombre del archivo (pa&#237;s, a&#241;o, presidente, tipo de discurso) y un gui&#243;n para separar las palabras cuando una variable ten&#237;a m&#225;s de una ("asuncion-cargo"). Es importar prestar atenci&#243;n a estos detalles, ya que en el futuro nos pueden ayudar a hacer m&#225;s f&#225;cil el proceso de trabajo con nuestros datos.  </p>
<p>En esta ocasi&#243;n agregaremos esas cuatro variables a nuestro nombre de archivo: el c&#243;digo para guardar el discurso quedar&#237;a as&#237;:</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_8" type="block" corresp="code_introduccion-al-web-scraping-usando-r_8.txt"></code></pre>
<p>Esa l&#237;nea de c&#243;digo le est&#225; pidiendo a R que escriba el contenido del objeto <code type="inline">discurso_boric</code> en un archivo txt dentro de la carpeta "discursos".</p>
<p>&#161;Listo! Si abrimos la carpeta "discursos" en nuestro panel "Files" y hacemos doble clic sobre el nombre del archivo, se abrir&#225; en una nueva pesta&#241;a en RStudio.</p>
<figure><desc>As&#237; se ve el texto en el archivo que acabamos de guardar" alt="Captura de pantalla de RStudio. En el panel superior izquierdo est&#225; abierto el archivo en el que acabamos de guardar el discurso. En el panel 'Files' abajo a la derecha se ve el archivo guardado</desc><graphic url="introduccion-al-web-scraping-usando-r-14.png"/></figure>
<p>Podemos observar que el texto tiene dos saltos de l&#237;neas entre los p&#225;rrafos. Si bien eso no es un problema que afecte alg&#250;n an&#225;lisis posterior del texto, quiz&#225;s podr&#237;amos querer que quedara solo un salto de l&#237;nea entre los p&#225;rrafos porque nos interesa hacer una edici&#243;n digital de estos discursos en el que ese es el formato requerido. Para resolver esta situaci&#243;n, podemos usar el paquete <hi rend="bold">stringr</hi>, que est&#225; enfocado en el trabajo con cadenas de textos. La funci&#243;n <code type="inline">str_replace_all()</code> (remplazar todo) nos permite buscar un patr&#243;n en una cadena de texto y remplazarlo por otro.</p>
<p>Para saber qu&#233; patr&#243;n buscar, imprimamos el objeto <code type="inline">discurso_boric</code> en la consola. Como es largo, lo primero que veremos ser&#225; el final. Compar&#233;moslo con la parte final del texto del archivo que tenemos en el panel superior.</p>
<figure><desc>Comparaci&#243;n entre el texto en la cosola y el texto en el archivo" alt="Captura de pantalla de la consola y el panel con el archivo abierto. En ambos se muestra el mismo fragmento del texto (los &#250;ltimos p&#225;rrafos).</desc><graphic url="introduccion-al-web-scraping-usando-r-15.png"/></figure>
<p>Si miramos el texto de la consola veremos que los saltos de l&#237;neas son representados en nuestro computador como <code type="inline">\n</code>. Esta es la forma que los sistemas operativos representan los saltos de l&#237;nea y es la que se utiliza tambi&#233;n en las expresiones regulares (un tema sobre el que volveremos en la segunda lecci&#243;n de esta serie). Como en nuestro caso hay dos saltos de l&#237;nea seguidos, entonces lo que vemos es <code type="inline">\n\n</code>.</p>
<p>Lo que haremos ahora ser&#225; pedirle a R que con la funci&#243;n <code type="inline">str_replace_all()</code>  busque en nuestro objeto <code type="inline">discurso_boric</code> el patr&#243;n "<code type="inline">\n\n</code>" (dos saltos de l&#237;nea seguidos) y los remplace por un solo salto de l&#237;nea "<code type="inline">\n</code>". El c&#243;digo quedar&#237;a as&#237;:</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_9" type="block" corresp="code_introduccion-al-web-scraping-usando-r_9.txt"></code></pre>
<p>El paquete "stringr" tiene una funci&#243;n que se llama <code type="inline">str_replace()</code> que solo hace el remplazo en el primer elemento que encuentra. Procura escoger <code type="inline">str_replace_all</code> para que haga el cambio todas las veces que encuentre el patr&#243;n que nos interesa.
Luego de ejecutar la modificaci&#243;n, volveremos a guardar nuestro objeto para que la versi&#243;n del archivo txt refleje estos &#250;ltimos cambios.</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_10" type="block" corresp="code_introduccion-al-web-scraping-usando-r_10.txt"></code></pre>
<p>&#161;Listo! Ya tenemos el primer texto de nuestro corpus.</p>
</div></div><div type="2"><head>Repetir el proceso para el segundo discurso</head>
<p>Quiz&#225;s te est&#233;s preguntando si acaso no era m&#225;s r&#225;pido copiar el discurso directamente del sitio web y pegarlo en un archivo txt. Si solo nos interesa un texto de un sitio, probablemente eso sea lo m&#225;s r&#225;pido. Pero si necesitamos m&#225;s de un texto, lo conveniente es hacerlo de forma program&#225;tica. No solo por tiempo, sino porque as&#237; podemos evitar posibles errores humanos en el proceso. Adem&#225;s, incluso si se trata de un solo texto, tener el c&#243;digo para extraerlo permite que otras personas puedan repetir el proceso y obtener el mismo resultado, lo que favorece la reproducibilidad de nuestros flujos de trabajo.</p>
<p>El mismo c&#243;digo que escribimos para extraer el discurso de Gabriel Boric, deber&#237;a servirnos para extraer el de <link target="https://perma.cc/3A8U-SGED">Sebasti&#225;n Pi&#241;era</link>. As&#237; que lo que haremos ahora ser&#225; tomar el bloque de c&#243;digo que escribimos anteriormente y modificar tres cosas:</p>
<ul>
<li>El nombre de los objetos que creamos</li>
<li>La url desde la que haremos la extracci&#243;n</li>
<li>El nombre del archivo en que guardaremos el texto procesado</li>
</ul>
<p>El c&#243;digo quedar&#237;a as&#237;:</p>
<pre><code class="language-r" xml:id="code_introduccion-al-web-scraping-usando-r_11" type="block" corresp="code_introduccion-al-web-scraping-usando-r_11.txt"></code></pre>
<p>&#161;Listo! Si ejecutas esas l&#237;neas de c&#243;digo, deber&#237;a aparecer el archivo en tu directorio de trabajo con el texto ya procesado.</p>
<p>Esto nos muestra que una vez que resolvemos c&#243;mo extraer datos de un sitio, podemos luego reutilizar el c&#243;digo para otras secciones que nos interesen. Con este mismo bloque de c&#243;digo, por ejemplo, podr&#237;as extraer todos los discursos que se encuentran en este sitio web.</p>
<p>En <link target="/assets/introduccion-al-web-scraping-usando-r/script-extraccion-discursos.R">este archivo</link> puedes revisar la versi&#243;n final de nuestro script.</p>
</div><div type="2"><head>S&#237;ntesis</head>
<p>En esta lecci&#243;n conocimos cu&#225;les son las caracter&#237;sticas centrales de una p&#225;gina web que nos permiten extraer su contenido usando t&#233;cnicas como el web scraping. Discutimos tambi&#233;n acerca de c&#243;mo podemos resguardar que el procedimiento que implementamos se ajuste a las condiciones de uso del sitio del que nos interesa extraer datos. Finalmente, hicimos un primer ejercicio en el que seguimos el flujo de trabajo completo y revisamos las ventajas que tiene trabajar de este modo cuando necesitamos repetir una tarea de extracci&#243;n.</p>
</div><div type="2"><head>Pr&#243;ximos pasos</head>
<p>Esta es la primera lecci&#243;n de la serie sobre web scraping usando R. En la pr&#243;xima, aprenderemos a extraer tablas, y a partir de la tercera, veremos c&#243;mo crear funciones que nos permitan extraer datos de varias p&#225;ginas al mismo tiempo.</p>
</div><div type="2"><head>Notas</head>
<p><note id="1"> Amazon.es. "Condiciones de Uso y Venta", <link target="https://www.amazon.es/gp/help/customer/display.html?nodeId=201909000">https://www.amazon.es/gp/help/customer/display.html?nodeId=201909000</link>.</note></p>
<p><note id="2"> En el men&#250; Tools &gt; Global Options &gt; Code puedes configurar RStudio para que utilice el nuevo pipe como opci&#243;n por defecto. Esto te permitir&#225; incluirlo en tu c&#243;digo con el atajo de teclado Ctrl/Cmd + Shift + m.</note></p>
</div></body>
  </text>
</TEI>
