<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Manipular strings com Python</title>
  <layout>lesson</layout>
  <slug>manipular-strings-python</slug>
  <date>2012-07-17</date>
  <translation_date>2021-09-10</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Mariana Affonso Penna</translator>
  <translation-editor>Jimmy Medeiros</translation-editor>
  <translation-reviewer>Joana Vieira Paulino,Felipe Lamarca</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/403</review-ticket>
  <activity>transforming</activity>
  <topics>python</topics>
  <abstract>Esta li&#231;&#227;o &#233; uma breve introdu&#231;&#227;o &#224;s t&#233;cnicas de manipula&#231;&#227;o de strings com Python</abstract>
  <original>manipulating-strings-in-python</original>
  <avatar_alt>Um homem a tocar guitarra</avatar_alt>
  <doi>10.46430/phpt0016</doi>
</metadata>
  <text xml:lang="pt">
    <body>
      <div type="2"><head>Objetivos da li&#231;&#227;o</head>
<p>Esta li&#231;&#227;o &#233; uma breve introdu&#231;&#227;o &#224;s t&#233;cnicas de manipula&#231;&#227;o de <link target="https://pt.wikipedia.org/wiki/Cadeia_de_caracteres">strings</link> (cadeia de caracteres) com
Python. &#201; essencial saber manipular strings para desenvolver a maioria das tarefas de processamento de textos. Se quiser experimentar as li&#231;&#245;es a seguir, voc&#234; pode escrever e executar programas curtos, como fizemos nas li&#231;&#245;es anteriores da s&#233;rie, ou pode abrir um shell (terminal) Python para test&#225;-los na linha de comandos.</p>
</div>
      <div type="2"><head>Manipula&#231;&#227;o de Strings com Python</head>
<p>Se j&#225; foi exposto a outra linguagem de programa&#231;&#227;o antes, pode ter aprendido que precisa <emph>declarar</emph> ou <emph>especificar os tipos das vari&#225;veis</emph> antes de armazenar qualquer coisa nelas. Isso n&#227;o &#233; necess&#225;rio ao trabalhar com strings no Python. Podemos criar uma string simplesmente colocando o conte&#250;do entre aspas com um sinal de igual (=):</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_0" type="block" corresp="code_manipular-strings-python_0.txt"></code></pre>
</div>
      <div type="2"><head>Operadores de string: somar e multiplicar</head>
<p>String &#233; um tipo de objeto que consiste numa s&#233;rie de caracteres. O Python j&#225; sabe como lidar com v&#225;rias representa&#231;&#245;es de uso geral e poderosas, incluindo strings. Uma maneira de manipular strings &#233; usar <emph>operadores de string</emph>.
Esses operadores s&#227;o representados por s&#237;mbolos que voc&#234;, provavelmente, associa &#224; matem&#225;tica, como +, -, *, / e =. Quando usados com strings, eles executam a&#231;&#245;es semelhantes, mas n&#227;o iguais, &#224;s suas contrapartes matem&#225;ticas. </p>
<div type="3"><head>Concatenar</head>
<p>Este termo significa unir strings. O processo &#233; conhecido como <emph>concatena&#231;&#227;o</emph> de strings e isso &#233; feito usando o operador mais (+).
Observe que voc&#234; deve explicitar onde deseja que os espa&#231;os em branco ocorram, colocando-os tamb&#233;m entre aspas simples.</p>
<p>Nesse exemplo, a vari&#225;vel "message1" recebe o conte&#250;do "ol&#225; mundo".</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_1" type="block" corresp="code_manipular-strings-python_1.txt"></code></pre>
</div><div type="3"><head>Multiplicar</head>
<p>Se quiser uma concatena&#231;&#227;o repetida de uma mesma string, use o operador de multiplica&#231;&#227;o (*). Nesse exemplo, a string <emph>message2a</emph> receber&#225; o conte&#250;do "ol&#225;" tr&#234;s vezes; a string <emph>message2b</emph> receber&#225; o conte&#250;do "mundo"; a seguir imprimimos ambas as strings.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_2" type="block" corresp="code_manipular-strings-python_2.txt"></code></pre>
</div><div type="3"><head>Ap&#234;ndice</head>
<p>E se quiser adicionar material no final de uma string sucessivamente?
Existe um operador especial para isso (+=).</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_3" type="block" corresp="code_manipular-strings-python_3.txt"></code></pre>
</div></div>
      <div type="2"><head>M&#233;todos de String: Encontrar, Modificar</head>
<p>Al&#233;m dos operadores, dezenas de m&#233;todos de string permitem manipular as strings no Python. Usados sozinhos ou em combina&#231;&#227;o, esses m&#233;todos podem fazer praticamente qualquer coisa que possa imaginar com elas.
A boa not&#237;cia &#233; que pode consultar uma lista de M&#233;todos de String no site do Python, <link target="https://docs.python.org/2/library/stdtypes.html#string-methods">Python website</link>, incluindo informa&#231;&#245;es sobre como usar cada um de maneira adequada. Para garantir que tenha uma compreens&#227;o b&#225;sica dos m&#233;todos de string, segue um panorama acerca de alguns dos mais comumente usados: </p>
<div type="3"><head>Comprimento (Length)</head>
<p>Pode determinar o n&#250;mero de caracteres numa string usando <code type="inline">len</code>. Observe que o espa&#231;o em branco conta como um caractere separado.
Nota da tradutora: 'len' n&#227;o &#233; um m&#233;todo de string, como indicado na li&#231;&#227;o original, mas uma fun&#231;&#227;o built-in do Python que se aplica a qualquer tipo de objeto que possua comprimento.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_4" type="block" corresp="code_manipular-strings-python_4.txt"></code></pre>
</div><div type="3"><head>Encontrar</head>
<p>Pode procurar uma string para uma <emph>substring</emph> e o seu programa retornar&#225; a posi&#231;&#227;o de &#237;ndice inicial dessa substring. Isso &#233; &#250;til para o processamento posterior. Observe que os &#237;ndices s&#227;o numerados da esquerda para a direita e que a contagem come&#231;a com a posi&#231;&#227;o 0, n&#227;o 1.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_5" type="block" corresp="code_manipular-strings-python_5.txt"></code></pre>
<p>Se a substring n&#227;o estiver presente, o programa retornar&#225; o valor -1.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_6" type="block" corresp="code_manipular-strings-python_6.txt"></code></pre>
</div><div type="3"><head>Min&#250;scula</head>
<p>&#192;s vezes, &#233; &#250;til converter uma string em min&#250;sculas. Por exemplo, se padronizarmos a caixa, ser&#225; mais f&#225;cil para o computador reconhecer que "Ocasionalmente" e "ocasionalmente" s&#227;o a mesma palavra. </p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_7" type="block" corresp="code_manipular-strings-python_7.txt"></code></pre>
<p>O efeito oposto, elevando os caracteres para mai&#250;sculas, pode ser obtido alterando <code type="inline">.lower()</code> para <code type="inline">.upper()</code>.</p>
</div><div type="3"><head>Substituir</head>
<p>Se precisar substituir uma substring em toda a string, pode faz&#234;-lo com o m&#233;todo <code type="inline">replace</code>.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_8" type="block" corresp="code_manipular-strings-python_8.txt"></code></pre>
</div><div type="3"><head>Recortar</head>
<p>Se deseja recortar (<code type="inline">slice</code>) partes indesejadas do in&#237;cio ou do fim de uma string, pode faz&#234;-lo criando uma substring. O mesmo tipo de t&#233;cnica tamb&#233;m permite dividir uma string longa em componentes mais gerenci&#225;veis.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_9" type="block" corresp="code_manipular-strings-python_9.txt"></code></pre>
<p>Pode substituir as vari&#225;veis pelos n&#250;meros inteiros usados neste exemplo.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_10" type="block" corresp="code_manipular-strings-python_10.txt"></code></pre>
<p>Isto torna muito mais f&#225;cil usar este m&#233;todo em conjunto com o m&#233;todo <code type="inline">find</code> (encontrar) como no pr&#243;ximo exemplo, que verifica a letra "d" nos primeiros seis caracteres de "Ol&#225; Mundo" e nos diz corretamente que n&#227;o est&#225; l&#225; (-1). Essa t&#233;cnica &#233; muito mais &#250;til em strings mais longas - documentos completos, por exemplo. Observe que a aus&#234;ncia de um n&#250;mero inteiro antes dos dois pontos significa que queremos come&#231;ar no in&#237;cio da string. Poder&#237;amos usar a mesma t&#233;cnica para dizer ao programa para ir at&#233; ao fim, n&#227;o colocando nenhum n&#250;mero inteiro ap&#243;s os dois pontos. E lembre-se, as posi&#231;&#245;es do &#237;ndice come&#231;am a contar a partir de 0 em vez de 1.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_11" type="block" corresp="code_manipular-strings-python_11.txt"></code></pre>
<p>Existem muitos mais m&#233;todos de string, mas os supracitados s&#227;o um bom come&#231;o. Observe que, neste &#250;ltimo exemplo, usamos aspas em vez de par&#234;nteses. Essa diferen&#231;a na <emph>sintaxe</emph> sinaliza uma distin&#231;&#227;o importante.
No Python, os par&#234;nteses s&#227;o geralmente usados para <emph>passar um argumento</emph> para uma fun&#231;&#227;o. Ent&#227;o, quando vemos algo como</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_12" type="block" corresp="code_manipular-strings-python_12.txt"></code></pre>
<p>significa passar a string <emph>message7</emph>  para a fun&#231;&#227;o <code type="inline">len</code> e, ent&#227;o, enviar o valor retornado dessa fun&#231;&#227;o para a instru&#231;&#227;o <code type="inline">print</code> a ser impressa. Se uma fun&#231;&#227;o pode ser chamada sem um argumento, geralmente precisa de incluir um par de par&#234;nteses vazios ap&#243;s o nome da fun&#231;&#227;o de qualquer maneira. Vimos, tamb&#233;m, um exemplo disso:</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_13" type="block" corresp="code_manipular-strings-python_13.txt"></code></pre>
<p>Esta instru&#231;&#227;o diz ao Python para aplicar a fun&#231;&#227;o caixa baixa, <code type="inline">lower</code>, &#224; string <emph>message7</emph> e armazenar o valor retornado na string <emph>message7a</emph>.</p>
<p>As aspas t&#234;m um prop&#243;sito diferente. Se pensa numa string como uma sequ&#234;ncia de caracteres e deseja acessar o conte&#250;do da string por sua localiza&#231;&#227;o dentro da sequ&#234;ncia, ent&#227;o precisa de alguma forma de dar ao Python uma localiza&#231;&#227;o dentro de uma sequ&#234;ncia. Isso &#233; o que as aspas fazem: indicam uma localiza&#231;&#227;o inicial e final dentro de uma sequ&#234;ncia, como vimos ao usar o m&#233;todo <code type="inline">slice</code>.</p>
</div></div>
      <div type="2"><head>Sequ&#234;ncias de Escape</head>
<p>O que faz quando precisa de incluir aspas dentro de uma string?
N&#227;o quer que o interpretador Python entenda errado e termine a string quando encontrar um desses caracteres. Para evitar o problema, pode colocar uma barra invertida (\) antes das aspas para que ela n&#227;o termine a string. Estas s&#227;o conhecidas como sequ&#234;ncias de escape.</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_14" type="block" corresp="code_manipular-strings-python_14.txt"></code></pre>
<pre><code class="language-python" xml:id="code_manipular-strings-python_15" type="block" corresp="code_manipular-strings-python_15.txt"></code></pre>
<p>Duas outras sequ&#234;ncias de escape permitem imprimir tabula&#231;&#245;es e novas linhas:</p>
<pre><code class="language-python" xml:id="code_manipular-strings-python_16" type="block" corresp="code_manipular-strings-python_16.txt"></code></pre>
</div>
      <div type="2"><head>Leitura Sugerida</head>
<ul>
<li>
Lutz, <emph>Learning Python</emph><ul>
<li>Ch. 7: Strings</li>
<li>Ch. 8: Lists and Dictionaries</li>
<li>Ch. 10: Introducing Python Statements</li>
<li>Ch. 15: Function Basics</li>
</ul>
</li>
</ul>
</div>
      <div type="2"><head>Sincroniza&#231;&#227;o do C&#243;digo</head>
<p>Para acompanhar li&#231;&#245;es futuras, &#233; importante ter os ficheiros e programas corretos no seu diret&#243;rio &#8220;programming-historian&#8221;. No final de cada li&#231;&#227;o, &#233; poss&#237;vel fazer o download do ficheiro zip &#8220;programming-historian&#8221; para ter a certeza de que o ficheiro correto est&#225; a ser utilizado. Observe que removemos os ficheiros desnecess&#225;rios das li&#231;&#245;es anteriores. Seu diret&#243;rio pode conter mais ficheiros e n&#227;o h&#225; problema!</p>
<ul>
<li>programming-historian-1 (<link target="/assets/python-lessons1.zip">zip</link>)</li>
</ul>
</div>
    </body>
  </text>
</TEI>
