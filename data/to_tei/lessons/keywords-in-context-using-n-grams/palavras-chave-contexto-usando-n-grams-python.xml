<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Palavras-chave em Contexto (Usando n-gramas) com Python</title>
  <layout>lesson</layout>
  <slug>palavras-chave-contexto-usando-n-grams-python</slug>
  <date>2012-07-17</date>
  <translation_date>2022-10-31</translation_date>
  <authors>William J. Turkel,Adam Crymble</authors>
  <reviewers>Jim Clifford,Frederik Elwert</reviewers>
  <editors>Miriam Posner</editors>
  <translator>Felipe Lamarca</translator>
  <translation-editor>Jimmy Medeiros</translation-editor>
  <translation-reviewer>Ana Carolina Erthal,Gariela Kucuruza</translation-reviewer>
  <difficulty>2</difficulty>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/464</review-ticket>
  <activity>presenting</activity>
  <topics>python</topics>
  <abstract>Esta li&#231;&#227;o usa os pares de frequ&#234;ncia criados na li&#231;&#227;o 'Contar Frequ&#234;ncias de Palavras com Python' e os apresenta em formato HTML.</abstract>
  <original>keywords-in-context-using-n-grams</original>
  <avatar_alt>Uma figura deixando cair duas garrafas de &#225;lcool</avatar_alt>
  <doi>10.46430/phpt0031</doi>
</metadata>
  <text xml:lang="pt">
    <body>
      <div type="2"><head>Objetivos da Li&#231;&#227;o</head>
<p>Como em <link target="/pt/licoes/saida-dados-ficheiro-html-python">Sa&#237;da de Dados como um Ficheiro HTML com Python</link>, esta li&#231;&#227;o toma os pares de frequ&#234;ncia criados na li&#231;&#227;o <link target="/pt/licoes/contar-frequencias-palavras-python">Contar Frequ&#234;ncias de Palavras com Python</link> e os apresenta em um ficheiro HTML. Dessa vez o foco est&#225; nas palavras-chave em contexto, ou <emph>keywords in context</emph> (KWIC) no ingl&#234;s, que criam n-gramas a partir do conte&#250;do do documento original - nesse caso, uma transcri&#231;&#227;o do julgamento do <emph>Old Bailey Online</emph>. Pode usar o seu programa para selecionar uma palavra-chave e o computador retornar&#225; todas as inst&#226;ncias dessa palavra-chave, junto com as palavras &#224; esquerda e &#224; direita dela, tornando mais f&#225;cil visualizar rapidamente como a palavra-chave &#233; usada.</p>
<p>Uma vez que as KWICs forem criadas, elas s&#227;o envolvidas em HTML (isto &#233;, passam pelo <emph>HTML wrapper</emph>) e s&#227;o enviadas ao navegador, onde podem ser visualizadas. Isso refor&#231;a o que foi aprendido em <link target="/pt/licoes/saida-dados-ficheiro-html-python">Sa&#237;da de Dados como um Ficheiro HTML com Python</link>, optando por uma sa&#237;da ligeiramente diferente.</p>
<p>No final dessa li&#231;&#227;o, ser&#225; capaz de extrair todos os n-gramas poss&#237;veis de um texto. Na pr&#243;xima li&#231;&#227;o, aprender&#225; como gerar todos os n-gramas de uma determinada palavra-chave em um documento baixado da Internet e exibi-los claramente na janela do navegador.</p>
</div>
      <div type="2"><head>Ficheiros Necess&#225;rios para esta Li&#231;&#227;o</head>
<ul>
<li><code type="inline">obo.py</code></li>
</ul>
<p>Caso n&#227;o possua esses ficheiros da li&#231;&#227;o anterior, pode fazer o <emph>download</emph> do programming-historian-7, um <link target="/assets/python-lessons7.zip">ficheiro zip da li&#231;&#227;o anterior</link>. </p>
</div>
      <div type="2"><head>De Texto para N-gramas e para KWIC</head>
<p>Agora que j&#225; sabe como coletar o conte&#250;do textual de uma p&#225;gina <emph>web</emph> automaticamente com Python e come&#231;ou a usar strings, listas e dicion&#225;rios para processamento de texto, h&#225; muitas outras coisas que pode fazer com texto al&#233;m de contar frequ&#234;ncias. Pessoas que estudam propriedades estat&#237;sticas da linguagem descobriram que estudar sequ&#234;ncias lineares de unidades lingu&#237;sticas pode nos dizer muito a respeito de um texto. Essas sequ&#234;ncias lineares s&#227;o conhecidas como bigramas (2 unidades), trigramas (3 unidades) e de forma geral como n-gramas.</p>
<p>Provavelmente j&#225; viu n-gramas muitas vezes antes. Eles s&#227;o comumente utilizados em p&#225;ginas de resultados de pesquisa para oferecer uma pr&#233;via de onde a sua palavra-chave aparece em um documento e qual &#233; o contexto ao redor da palavra-chave. Essa aplica&#231;&#227;o de n-gramas &#233; conhecida como palavras-chave em contexto (<emph>keywords in context</emph>, &#224;s vezes abreviada como KWIC). Por exemplo, se a string em quest&#227;o fosse "<emph>it was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness</emph>", ent&#227;o o 7-grama para a palavra-chave "<emph>wisdom</emph>" seria:</p>
<pre><code xml:id="code_palavras-chave-contexto-usando-n-grams-python_0" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_0.txt"></code></pre>
<p>Um n-grama poderia conter qualquer tipo de unidade lingu&#237;stica desejada. Para historiadores, &#233; mais prov&#225;vel que use caracteres como no bigrama "qu" ou palavras como no trigrama "o c&#227;o ladrou"; no entanto, tamb&#233;m poderia utilizar fonemas, s&#237;labas, ou qualquer n&#250;mero de outras unidades dependendo da sua pergunta de investiga&#231;&#227;o.</p>
<p>O que faremos a seguir &#233; desenvolver a habilidade de exibir KWIC para qualquer palavra-chave em um corpo de texto, mostrando-a no contexto de um n&#250;mero fixo de palavras em cada um dos lados. Como antes, envolveremos a sa&#237;da de modo que ela possa ser visualizada no Firefox e adicionada ao Zotero facilmente.</p>
</div>
      <div type="2"><head>De Texto para N-gramas</head>
<p>Uma vez que desejamos trabalhar com palavras ao inv&#233;s de caracteres ou fonemas, ser&#225; muito mais f&#225;cil criar um n-grama usando uma lista de palavras em vez de strings. Como j&#225; sabe, o Python pode facilmente transformar strings em uma lista usando a opera&#231;&#227;o <code type="inline">split</code>. Uma vez dividida, torna-se simples recuperar uma subsequ&#234;ncia de palavras adjacentes na lista usando um <code type="inline">slice</code>, representado por dois &#237;ndices separados por dois pontos. Isso foi introduzido ao trabalhar com strings em <link target="/pt/licoes/manipular-strings-python">Manipular strings com Python</link>:</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_1" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_1.txt"></code></pre>
<p>No entanto, tamb&#233;m podemos utilizar essa t&#233;cnica para obter um n&#250;mero pr&#233;-determinado de palavras vizinhas em uma lista com pouqu&#237;ssimo esfor&#231;o. Estude os exemplos a seguir, os quais voc&#234; pode testar em um Python <emph>shell</emph>:</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_2" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_2.txt"></code></pre>
<p>Nesses exemplos usamos o m&#233;todo <code type="inline">slice</code> para retornar partes da nossa lista. Note que h&#225; dois lados para os dois pontos em um <code type="inline">slice</code>. Se o lado direito dos dois pontos for deixado em branco, como no &#250;ltimo exemplo acima, o programa sabe que deve continuar at&#233; o final automaticamente - nesse caso, at&#233; o fim da lista. O pen&#250;ltimo exemplo acima mostra que podemos come&#231;ar no in&#237;cio deixando vazio o espa&#231;o antes dos dois pontos. Este &#233; um atalho &#250;til dispon&#237;vel para manter seu c&#243;digo mais curto.</p>
<p>Tamb&#233;m pode usar vari&#225;veis para representar a posi&#231;&#227;o dos &#237;ndices. Usado conjuntamente com um <code type="inline">for</code> <emph>loop</emph>, pode facilmente criar todos os n-gramas poss&#237;veis a partir da sua lista. O exemplo a seguir retorna todos os 5-gramas da nossa string do exemplo acima.</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_3" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_3.txt"></code></pre>
<p>Mantendo a nossa abordagem modular, criaremos e armazenaremos no m&#243;dulo <code type="inline">obo.py</code> uma fun&#231;&#227;o que ser&#225; capaz de criar n-gramas para n&#243;s. Estude e digite ou copie o seguinte c&#243;digo:</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_4" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_4.txt"></code></pre>
<p>Essa fun&#231;&#227;o pode parecer um pouco confusa, pois h&#225; muita coisa acontecendo aqui em pouco c&#243;digo. Ela usa uma <link target="https://pt.wikipedia.org/wiki/Compreens%C3%A3o_de_lista">compreens&#227;o de lista</link> para manter o c&#243;digo compacto. O exemplo a seguir faz exatamente a mesma coisa:</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_5" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_5.txt"></code></pre>
<p>Use a op&#231;&#227;o que fizer mais sentido.</p>
<p>Um conceito que ainda pode ser confuso &#233; a fun&#231;&#227;o de dois argumentos. Observe que a nossa fun&#231;&#227;o possui dois nomes de vari&#225;veis entre par&#234;nteses depois do seu nome quando a declaramos: <code type="inline">wordlist</code>, <code type="inline">n</code>. Essas duas vari&#225;veis s&#227;o os argumentos da fun&#231;&#227;o. Quando chama (executa) a fun&#231;&#227;o, essas vari&#225;veis ser&#227;o usadas pela fun&#231;&#227;o para a sua solu&#231;&#227;o. Sem esses argumentos n&#227;o h&#225; informa&#231;&#227;o suficiente para que os c&#225;lculos sejam feitos. Nesse caso, as duas informa&#231;&#245;es s&#227;o a lista de palavras que voc&#234; deseja transformar em n-gramas (<code type="inline">wordlist</code>) e o n&#250;mero de palavras que voc&#234; deseja em cada n-grama (<code type="inline">n</code>). Para a fun&#231;&#227;o funcionar ela precisa das duas informa&#231;&#245;es, que s&#227;o chamadas da seguinte forma (armazene o c&#243;digo a seguir como <code type="inline">useGetNGrams.py</code> e execute-o):</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_6" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_6.txt"></code></pre>
<p>Observe que os argumentos que inseriu n&#227;o precisam possuir os mesmos nomes dos argumentos nomeados na declara&#231;&#227;o da fun&#231;&#227;o. O Python sabe utilizar a vari&#225;vel <code type="inline">allMyWords</code> em todos os lugares da fun&#231;&#227;o em que <code type="inline">wordlist</code> aparece, j&#225; que ela &#233; dada como o primeiro argumento. Da mesma forma, todas as inst&#226;ncias de <code type="inline">n</code> ser&#227;o substitu&#237;das pelo inteiro 5 nesse caso. Tente mudar 5 para uma string, como "elefantes", e veja o que acontece quando executa o programa. Note que, j&#225; que <code type="inline">n</code> est&#225; sendo usado como um inteiro, precisa garantir que o argumento fornecido tamb&#233;m &#233; um inteiro. O mesmo vale para strings, pontos flutuantes ou qualquer outro tipo de vari&#225;vel fornecido como argumento.</p>
<p>Tamb&#233;m pode usar um Python <emph>shell</emph> para brincar com o c&#243;digo e entender melhor como ele funciona. Cole a declara&#231;&#227;o da fun&#231;&#227;o <code type="inline">getNGrams</code> (qualquer uma das duas fun&#231;&#245;es acima) no seu Python <emph>shell</emph>:</p>
<pre><code class="language-python" xml:id="code_palavras-chave-contexto-usando-n-grams-python_7" type="block" corresp="code_palavras-chave-contexto-usando-n-grams-python_7.txt"></code></pre>
<p>H&#225; dois conceitos que vemos nesse exemplo para os quais precisa estar atento. Primeiro, como a nossa fun&#231;&#227;o espera uma lista de palavras ao inv&#233;s de uma string, temos que converter as strings em listas antes que a nossa fun&#231;&#227;o possa manipul&#225;-las. N&#243;s poder&#237;amos ter feito isso adicionando outra linha de c&#243;digo acima da chamada da fun&#231;&#227;o, mas em vez disso usamos o m&#233;todo <code type="inline">split</code> diretamente no argumento da fun&#231;&#227;o como um atalho.</p>
<p>Em segundo lugar, por que o primeiro exemplo retornou uma lista vazia em vez dos n-gramas que est&#225;vamos procurando? Em <code type="inline">test1</code>, tentamos pedir um n-grama maior que o n&#250;mero de palavras em nossa lista. Isso resultou em uma lista em branco. Em <code type="inline">test2</code> n&#227;o temos esse problema e recebemos todos os 5-gramas poss&#237;veis para a lista de palavras mais longa. Se desejasse, poderia adaptar a sua fun&#231;&#227;o para exibir uma mensagem de aviso (<emph>warning message</emph>) ou para retornar a string completa em vez de uma lista vazia.</p>
<p>Agora temos uma maneira de extrair todos os n-gramas poss&#237;veis de um corpo textual. Na pr&#243;xima li&#231;&#227;o, poderemos concentrar a nossa aten&#231;&#227;o em isolar aqueles n-gramas que forem do nosso interesse.</p>
</div>
      <div type="2"><head>Sincroniza&#231;&#227;o de C&#243;digo</head>
<p>Para acompanhar li&#231;&#245;es futuras, &#233; importante ter os ficheiros e programas corretos no seu diret&#243;rio &#8220;programming-historian&#8221;. Ao final de cada cap&#237;tulo pode fazer o <emph>download</emph> do ficheiro zip "programming-historian" para garantir que possui o c&#243;digo correto. Caso esteja acompanhando com a vers&#227;o para Mac / Linux, deve ter que abrir o ficheiro <code type="inline">obo.py</code> e mudar "file:///Users/username/Desktop/programming-historian/" para o caminho at&#233; o diret&#243;rio no seu pr&#243;prio computador.</p>
<ul>
<li><link target="/assets/python-lessons8.zip">python-lessons8.py</link></li>
</ul>
</div>
    </body>
  </text>
</TEI>
