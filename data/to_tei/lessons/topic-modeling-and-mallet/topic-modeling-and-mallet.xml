<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Getting Started with Topic Modeling and MALLET</title>
  <layout>lesson</layout>
  <date>2012-09-02</date>
  <authors>Shawn Graham,Scott Weingart,Ian Milligan</authors>
  <reviewers>John Fink,Alan MacEachern</reviewers>
  <editors>Adam Crymble</editors>
  <difficulty>2</difficulty>
  <exclude_from_check>review-ticket</exclude_from_check>
  <activity>analyzing</activity>
  <topics>distant-reading</topics>
  <abstract>In this lesson you will first learn what topic modeling is and why you might want to employ it in your research. You will then learn how to install and work with the MALLET natural language processing toolkit to do so.</abstract>
  <redirect_from>/lessons/topic-modeling-and-mallet</redirect_from>
  <avatar_alt>A man striking an anvil with a large hammer</avatar_alt>
  <doi>10.46430/phen0017</doi>
</metadata>
  <text xml:lang="en">
    <body>
      <div type="2"><head>Editor's Note</head>
<p>This lesson requires you to use the command line. If you have no
previous experience using the command line you may find it helpful to
work through the Programming Historian <link target="/lessons/intro-to-bash">Bash Command Line</link> lesson.</p>
</div>
      <div type="2"><head>Lesson Goals</head>
<p>In this lesson you will first learn what <emph>topic modeling</emph> is and why you
might want to employ it in your research. You will then learn how to
install and work with the MALLET <emph>natural language processing</emph> toolkit
to do so. MALLET involves modifying an <emph>environment variable</emph>
(essentially, setting up a short-cut so that your computer always knows
where to find the MALLET program) and working with the <emph>command line</emph>
(ie, by typing in commands manually, rather than clicking on icons or
menus). We will run the topic modeller on some example files, and look
at the kinds of outputs that MALLET installed. This will give us a
good idea of how it can be used on a corpus of texts to identify topics
found in the documents without reading them individually.</p>
<p>Please see the MALLET users' <link target="http://mallet.cs.umass.edu/mailinglist.php">discussion list</link> for the full range of
things one can do with the software.</p>
<p>(We would like to thank Robert Nelson and Elijah Meeks for hints and
tips in getting MALLET to run for us the first time, and for their
examples of what can be done with this tool.)</p>
</div>
      <div type="2"><head>What is Topic Modeling And For Whom is this Useful?</head>
<p>A <emph>topic modeling</emph> tool takes a single text (or corpus) and looks for
patterns in the use of words; it is an attempt to inject semantic
meaning into vocabulary. Before you begin with topic modeling, you
should ask yourself whether or not it is likely to be useful for your
project. Matthew Kirschenbaum's <emph><link target="http://www.cs.umbc.edu/~hillol/NGDM07/abstracts/talks/MKirschenbaum.pdf">Distant Reading</link></emph>&#160;(a talk given at the
2009 National Science Foundation Symposium on the Next Generation of
Data Mining and Cyber-Enabled Discovery for Innovation)&#160;and Stephen
Ramsay's <emph><link target="http://www.worldcat.org/title/reading-machines-toward-an-algorithmic-criticism/oclc/708761605&amp;referer=brief_results">Reading Machines</link></emph> are good places for beginning to
understand in which circumstances a technique such as this could be most
effective. As with all tools, just because you can use it, doesn't
necessarily mean that you should. If you are working with a small number
of documents (or even a single document) it may well be that simple
frequency counts are sufficient, in which case something like <link target="http://voyant-tools.org">Voyant
Tools</link> might be appropriate. However, if you have hundreds of
documents from an archive and you wish to understand something of what
the archive contains without necessarily reading every document, then
topic modeling might be a good approach.</p>
<p>Topic models represent a family of computer programs that extract
<emph>topics</emph> from <emph>texts</emph>. A topic to the computer is a list of words that
occur in statistically meaningful ways. A text can be an email, a blog
post, a book chapter, a journal article, a diary entry &#8211; that is, any
kind of unstructured text. By unstructured we mean that there are no
computer-readable annotations that tell the computer the semantic
meaning of the words in the text.</p>
<p>Topic modeling programs do not know anything about the meaning of the
words in a text. Instead, they assume that any piece of text is composed
(by an author) by selecting words from possible baskets of words where
each basket corresponds to a topic. If that is true, then it becomes
possible to mathematically decompose a text into the probable baskets
from whence the words first came. The tool goes through this process
over and over again until it settles on the most likely distribution of
words into baskets, which we call topics.</p>
<p>There are many different topic modeling programs available; this
tutorial uses one called MALLET. If one used it on a series of
political speeches for example, the program would return a list of
topics and the keywords composing those topics. Each of these lists is a
topic according to the algorithm. Using the example of political
speeches, the list might look like:</p>
<ol>
<li>Job Jobs Loss Unemployment Growth</li>
<li>Economy Sector Economics Stock Banks</li>
<li>Afghanistan War Troops Middle-East Taliban Terror</li>
<li>Election Opponent Upcoming President</li>
<li><emph>et cetera</emph></li>
</ol>
<p>By examining the keywords we can discern that the politician who gave
the speeches was concerned with the economy, jobs, the Middle East, the
upcoming election, and so on.</p>
<p>As Scott Weingart warns, there are many <link target="http://www.scottbot.net/HIAL/?p=16713">dangers</link> that face those who
use topic modeling without fully understanding it. For instance, we
might be interested in word use as a proxy for placement along a
political spectrum. Topic modeling could certainly help with that, but
we have to remember that the proxy is not in itself the thing we seek to
understand &#8211; as Andrew Gelman demonstrates in his mock study of <link target="http://arxiv.org/abs/1003.6087/">zombies
using Google Trends</link>. Ted Underwood and Lisa Rhody (see Further
Reading) argue that we as historians would be better to think of these
categories as discourses; however for our purposes here we will continue
to use the word: topic.</p>
<p>Note: You will sometimes come across the term "<emph>LDA</emph>" when looking into
the bibliography of topic modeling. LDA and Topic Model are often used
synonymously, but the LDA technique is actually a special case of topic
modeling created by <link target="http://en.wikipedia.org/wiki/Latent_Dirichlet_allocation">David Blei and friends</link> in 2002. It was not the
first technique now considered topic modeling, but it is by far the most
popular. The myriad variations of topic modeling have resulted in an
alphabet soup of techniques and programs to implement them that might be
confusing or overwhelming to the uninitiated; ignore them for now. They
all work in much the same way. MALLET uses LDA.</p>
<div type="3"><head>Examples of topic models employed by historians:</head>
<ul>
<li>Rob Nelson, <emph><link target="http://dsl.richmond.edu/dispatch/">Mining the Dispatch</link></emph></li>
<li>Cameron Blevins, "<link target="http://historying.org/2010/04/01/topic-modeling-martha-ballards-diary/">Topic Modeling Martha Ballard's Diary</link>"
<emph>Historying</emph>, April 1, 2010.</li>
<li>David J Newman and Sharon Block, "Probabilistic topic decomposition
of an eighteenth century American newspaper," <emph>Journal of the
American Society for Information Science and Technology</emph> vol. 57,
no. 6 (April 1, 2006): 753-767.</li>
</ul>
</div></div>
      <div type="2"><head>Installing MALLET</head>
<p>There are many tools one could use to create topic models, but at the
time of this writing (summer 2017) the simplest tool to run your text
through is called MALLET. <link target="http://mallet.cs.umass.edu/index.php">MALLET</link> uses an implementation of
<link target="http://en.wikipedia.org/wiki/Gibbs_sampling"><emph>Gibbs sampling</emph></link>, a statistical technique meant to quickly construct
a sample distribution, to create its topic models. MALLET requires
using the command line &#8211; we'll talk about that more in a moment,
although you typically use the same few commands over and over.</p>
<p>The installation instructions are different for Windows and Mac. Follow
the instructions appropriate for you below:</p>
<figure><desc/><graphic url="windows-150x150.png"/></figure>
<div type="3"><head>Windows Instructions</head>
<ol>
<li>Go to the <link target="http://mallet.cs.umass.edu/index.php">MALLET</link> project page. You can <link target="http://mallet.cs.umass.edu/download.php">download MALLET here</link>.</li>
<li>You will also need the <link target="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java developer's kit</link> &#8211; that is, not the
regular Java that's on every computer, but the one that lets you
program things. Install this on your computer.</li>
<li>Unzip MALLET into your <code type="inline">C:</code> directory . This is important: it
cannot be anywhere else. You will then have a directory called
<code type="inline">C:\mallet-2.0.8</code> or similar. For simplicity's sake, rename this
directory just <code type="inline">mallet</code>.</li>
<li>MALLET uses an <emph>environment variable</emph> to tell the computer where to
find all the various components of its processes when it is running.
It's rather like a shortcut for the program. A programmer cannot
know exactly where every user will install a program, so the
programmer creates a variable in the code that will always stand in
for that location. We tell the computer, once, where that location
is by setting the environment variable. If you moved the program to
a new location, you'd have to change the variable.</li>
</ol>
<p>To create an environment variable in Windows 10, click Start (Windows icon) or press the Windows key on your keyboard then type 'Control Panel'. Within Control Panel, select System and Security.  In System and Security, type 'Advanced' into the search field (upper right) and choose 'View advanced system settings' from the results. In the pop-up dialogue box, click 'Environmental Variables'. Next, click 'New' and type <code type="inline">MALLET_HOME</code> in the variable name
box (Figures 1,2,3). It must be like this &#8211; all caps, with an underscore &#8211; since that is
the shortcut that the programmer built into the program and all of its
subroutines. Then type the exact path (location) of where you unzipped
MALLET in the variable value, e.g., <code type="inline">c:\mallet</code>. </p>
<p>To see if you have been successful, please read on to the next section.</p>
<figure><desc>Figure 1: Advanced System Settings on Windows</desc><graphic url="fig1-advanced-system-settings.png"/></figure>
<figure><desc>Figure 2: Environment Variables Location</desc><graphic url="fig2-environment-variables-location.png"/></figure>
<figure><desc>Figure 3: Environment Variable</desc><graphic url="fig3-environment-variable.png"/></figure>
<div type="4"><head>Running MALLET using the Command Line</head>
<p>MALLET is run from the command line, also known as <emph>Command Prompt</emph>
(Figure 4). If you remember MS-DOS, or have ever played with a Unix
computer Terminal, this will be familiar. The command line is where you
can type commands directly, rather than clicking on icons and menus.</p>
<figure><desc>Figure 4: Command Prompt on Windows</desc><graphic url="fig-4-command-prompt-window.png"/></figure>
<ol>
<li>Click on your
<code type="inline">Start Menu -&gt; All Programs -&gt; Accessories -&gt; Command Prompt</code>.<br/>
You'll get the command prompt window, which will have a cursor at
<code type="inline">c:\user\user&gt;</code> (or similar; see Figure 4).</li>
<li>Type <code type="inline">cd ..</code> (That is: cd-space-period-period) to <emph>change
directory</emph>. Keep doing this until you're at the <code type="inline">C:\</code> . (as in
Figure 5)</li>
</ol>
<figure><desc>Figure 5: Navigating to the C:\ Directory in Command Prompt</desc><graphic url="fig-5-command-prompt-window-getting-to-c.png"/></figure>
<ol>
<li>Then type <code type="inline">cd mallet </code>and you are in the MALLET directory. Anything
you type in the command prompt window is a <emph>command</emph>. There are
commands like <code type="inline">cd</code> (change directory) and <code type="inline">dir</code> (list directory
contents) that the computer understands. You have to tell the
computer explicitly that 'this is a MALLET command' when you want
to use MALLET. You do this by telling the computer to grab its
instructions from the MALLET <emph>bin</emph>, a subfolder in MALLET that
contains the core operating routines.</li>
<li>Type <code type="inline">bin\mallet</code> as in Figure 6. If all has gone well, you should
be presented with a list of MALLET commands &#8211; congratulations! If
you get an error message, check your typing. Did you use the wrong
slash? Did you set up the environment variable correctly? Is
MALLET located at <code type="inline">C:\mallet</code> ?</li>
</ol>
<figure><desc>Figure 6: Command Prompt MALLET Installed</desc><graphic url="fig-6command-prompt-mallet-installed.png"/></figure>
<p>You are now ready to skip ahead to the next section.</p>
<figure><desc/><graphic url="apple-150x150.png"/></figure>
</div></div><div type="3"><head>Mac Instructions</head>
<p>Many of the instructions for OS X installation are similar to Windows,
with a few differences. In fact, it is a bit easier.</p>
<ol>
<li>Download and <link target="http://mallet.cs.umass.edu/download.php">install MALLET</link>.</li>
<li>Download the <link target="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java Development Kit</link>.</li>
</ol>
<p>Unzip MALLET into a directory on your system (for ease of following
along with this tutorial, your <code type="inline">/user/</code> directory works but anywhere is
okay). Once it is unzipped, open up your Terminal window (in the
<code type="inline">Applications</code> directory in your Finder. Navigate to the directory where
you unzipped MALLET using the Terminal (it will be <code type="inline">mallet-2.0.8</code> . If
you unzipped it into your <code type="inline">/user/</code> directory as was suggested in this
lesson, you can navigate to the correct directory by typing
<code type="inline">cd mallet-2.0.8</code>). cd is short for "change directory" when working in
the Terminal.</p>
<p>The same command will suffice to run commands from this directory,
except you need to append <code type="inline">./</code> (period-slash) before each command. This
needs to be done before all MALLET commands when working on a Mac.</p>
<p>Going forward, the commands for MALLET on a Mac will be nearly
identical to those on Windows, except for the direction of slashes
(there are a few other minor differences that will be noted when they
arise). If on Windows a command would be <code type="inline">\bin\mallet</code>, on a Mac you
would instead type:</p>
<pre><code class="language-bash" xml:id="code_topic-modeling-and-mallet_0" type="block" corresp="code_topic-modeling-and-mallet_0.txt"></code></pre>
<p>A list of commands should appear. If it does, congratulations &#8211; you've
installed it correctly!</p>
</div></div>
      <div type="2"><head>Typing in MALLET Commands</head>
<p>Now that you have MALLET installed, it is time to learn what commands
are available to use with the program. There are nine MALLET commands
you can use (see Figure 6 above). Sometimes you can combine multiple
instructions. At the Command Prompt or Terminal (depending on your
operating system), try typing:</p>
<pre><code class="language-bash" xml:id="code_topic-modeling-and-mallet_1" type="block" corresp="code_topic-modeling-and-mallet_1.txt"></code></pre>
<p>You are presented with the error message that <code type="inline">import-dir</code> is not
recognized as an internal or external command, operable program, or
batch file. This is because we forgot to tell the computer to look in
the MALLET <code type="inline">bin</code> for it. Try again, with</p>
<pre><code xml:id="code_topic-modeling-and-mallet_2" type="block" corresp="code_topic-modeling-and-mallet_2.txt"></code></pre>
<p>Remember, the direction of the slash matters (See Figure 7, which
provides an entire transcript of what we have done so far in the
tutorial). We checked to see that we had installed MALLET by typing in
<code type="inline">bin\mallet</code>. We then made the mistake with <code type="inline">import-dir</code> a few lines
further down. After that, we successfully called up the help file, which
told us what <code type="inline">import-dir</code> does, and it listed all of the potential
<emph>parameters</emph> you can set for this tool.</p>
<figure><desc>Figure 7: The Help Menu in MALLET</desc><graphic url="fig-7-command-prompt-typing-help.png"/></figure>
<p>Note: there is a difference in MALLET commands between a single hyphen
and a double hyphen. A single hyphen is simply part of the name; it
replaces a space (e.g., <code type="inline">import-dir</code> rather than import dir), since
spaces offset multiple commands or parameters. These parameters let us
tweak the file that is created when we import our texts into MALLET. A
double hyphen (as with <code type="inline">&#8211;-help</code> above) modifies, adds a sub-command, or
specifies some sort of parameter to the command.</p>
<p>For Windows users, if you got the error <emph>'exception in thread "main"
java.lang.NoClassDefFoundError:'</emph> it might be because you installed
MALLET somewhere other than in the <code type="inline">C:\</code> directory. For instance,
installing MALLET at <code type="inline">C:\Program Files\mallet</code> will produce this error
message. The second thing to check is that your environment variable is
set correctly. In either of these cases, check the Windows installation
instructions and double check that you followed them properly.</p>
</div>
      <div type="2"><head>Working with data</head>
<p>MALLET comes pre-packaged with sample <code type="inline">.txt</code> files with which you can
practice. Type <code type="inline">dir</code> at the <code type="inline">C:\mallet&gt; prompt</code>, and you are given the
listing of the MALLET directory contents. One of those directories is
called <code type="inline">sample-data</code>. You know it is a directory because it has the word
&lt;dir&gt; beside it.</p>
<p>Type <code type="inline">cd sample-data</code>. Type <code type="inline">dir</code> again. Using what you know, navigate
to first the <code type="inline">web</code> then the <code type="inline">en</code> directories. You can look inside these
<code type="inline">.txt</code> files by typing the full name of the file (with extension).</p>
<p>Note that you cannot now run any MALLET commands from this directory.
Try it:</p>
<pre><code xml:id="code_topic-modeling-and-mallet_3" type="block" corresp="code_topic-modeling-and-mallet_3.txt"></code></pre>
<p>You get the error message. You will have to navigate back to the main
MALLET folder to run the commands. This is because of the way MALLET
and its components are structured.</p>
</div>
      <div type="2"><head>Importing data</head>
<p>In the <code type="inline">sample data</code> directory, there are a number of <code type="inline">.txt</code> files. Each
one of these files is a single document, the text of a number of
different web pages. The entire folder can be considered to be a corpus
of data. To work with this corpus and find out what the topics are that
compose these individual documents, we need to transform them from
several individual text files into a single MALLET format file.
MALLET can import more than one file at a time. We can import the
entire directory of text files using the <code type="inline">import</code> command. The commands
below import the directory, turn it into a MALLET file, keep the
original texts in the order in which they were listed, and strip out the
<emph>stop words</emph> (words such as <emph>and</emph>, <emph>the</emph>, <emph>but</emph>, and <emph>if</emph> that occur in
such frequencies that they obstruct analysis) using the default English
<code type="inline">stop-words</code> dictionary. Try the following, which will use sample data.</p>
<pre><code xml:id="code_topic-modeling-and-mallet_4" type="block" corresp="code_topic-modeling-and-mallet_4.txt"></code></pre>
<p>If you type <code type="inline">dir</code> now (or <code type="inline">ls</code> for Mac), you will find a file called
<code type="inline">tutorial.mallet</code>. (If you get an error message, you can hit the cursor
up key on your keyboard to recall the last command you typed, and look
carefully for typos). This file now contains all of your data, in a
format that MALLET can work with.</p>
<p>Try running it again now with different data. For example, let's imagine we wanted to use the German sample data instead. We would use:</p>
<pre><code xml:id="code_topic-modeling-and-mallet_5" type="block" corresp="code_topic-modeling-and-mallet_5.txt"></code></pre>
<p>And then finally, you could use your own data. Change <code type="inline">sample-data\web\de</code> to a directory that contains your own research files. Good luck!</p>
<p>If you are unsure how directories work, we suggest the <emph>Programming Historian</emph> lesson <link target="/lessons/intro-to-bash">"Introduction to the Bash Command Line"</link>.</p>
<div type="3"><head>For Mac</head>
<p>Mac instructions are similar to those above for Windows, but note some of the differences below:</p>
<pre><code class="language-bash" xml:id="code_topic-modeling-and-mallet_6" type="block" corresp="code_topic-modeling-and-mallet_6.txt"></code></pre>
</div></div>
      <div type="2"><head>Issues with Big Data</head>
<p>If you're working with large file collections &#8211; or indeed,
very large files &#8211; you may run into issues with your <emph>heap space</emph>, your
computer's working memory. This issue will initially arise during the
import sequence, if it is relevant. By default, MALLET allows for 1GB
of memory to be used. If you run into the following error message,
you've run into your limit:</p>
<pre><code xml:id="code_topic-modeling-and-mallet_7" type="block" corresp="code_topic-modeling-and-mallet_7.txt"></code></pre>
<p>If your system has more memory, you can try increasing the memory
allocated to your <emph>Java virtual machine</emph>. To do so, you need to edit the
code in the <code type="inline">mallet</code> file found in the <code type="inline">bin</code> subdirectory of your
MALLET folder. Using Komodo Edit, (See <link target="/lessons/mac-installation">Mac</link>,
<link target="/lessons/windows-installation">Windows</link>, <link target="/lessons/linux-installation">Linux</link> for installation instructions), open the
<code type="inline">Mallet.bat</code> file (<code type="inline">C:\Mallet\bin\mallet.bat</code>) if you are using Windows,
or the <code type="inline">mallet</code> file (<code type="inline">~/Mallet/bin/mallet</code>) if you are using Linux or OS X.</p>
<p>Find the following line:</p>
<p><code type="inline">MEMORY=1g</code></p>
<p>You can then change the 1g value upwards &#8211; to 2g, 4g, or even higher
depending on your system's RAM, which you can find out by looking up the
machine's system information.</p>
<p>Save your changes. You should now be able to avoid the error. If not,
increase the value again.</p>
</div>
      <div type="2"><head>Your first topic model</head>
<p>At the command prompt in the MALLET directory, type:</p>
<pre><code xml:id="code_topic-modeling-and-mallet_8" type="block" corresp="code_topic-modeling-and-mallet_8.txt"></code></pre>
<p>This command opens your <code type="inline">tutorial.mallet</code> file, and runs the topic model
routine on it using only the default settings. As it iterates through
the routine, trying to find the best division of words into topics, your
command prompt window will fill with output from each run. When it is
done, you can scroll up to see what it was outputting (as in Figure 8).</p>
<figure><desc>Figure 8: Basic Topic Model Output</desc><graphic url="fig-8-basic-topic-model-output.png"/></figure>
<p>The computer is printing out the key words, the words that help define a
statistically significant topic, per the routine. In Figure 8, the first
topic it prints out might look like this (your key words might look a
bit different):</p>
<pre><code xml:id="code_topic-modeling-and-mallet_9" type="block" corresp="code_topic-modeling-and-mallet_9.txt"></code></pre>
<p>If you are a fan of cricket, you will recognize that all of these words
could be used to describe a cricket match. What we are dealing with here
is a topic related to Australian cricket. If you go to
<code type="inline">C:\mallet\sample-data\web\en\hill.txt</code>, you will see that this file is
a brief biography of the noted Australian cricketer Clem Hill. The 0 and
the 5 we will talk about later in the lesson. Note that MALLET
includes an element of randomness, so the keyword lists will look
different every time the program is run, even if on the same set of
data.</p>
<p>Go back to the main MALLET directory, and type <code type="inline">dir</code>. You will see
that there is no output file. While we successfully created a topic
model, we did not save the output! At the command prompt, type</p>
<pre><code xml:id="code_topic-modeling-and-mallet_10" type="block" corresp="code_topic-modeling-and-mallet_10.txt"></code></pre>
<p>Here, we have told MALLET to create a topic model (<code type="inline">train-topics</code>) and
everything with a double hyphen afterwards sets different parameters</p>
<p>This command</p>
<ul>
<li>opens your <code type="inline">tutorial.mallet</code> file</li>
<li>trains MALLET to find 20 topics</li>
<li>outputs every word in your corpus of materials and the topic it
belongs to into a compressed file (<code type="inline">.gz</code>; see <link target="http://www.gzip.org">www.gzip.org</link> on how to
unzip this)</li>
<li>outputs a text document showing you what the top key words are for
each topic (<code type="inline">tutorial_keys.txt</code>)</li>
<li>and outputs a text file indicating the breakdown, by percentage, of
each topic within each original text file you imported
(<code type="inline">tutorial_composition.txt</code>). (To see the full range of possible
parameters that you may wish to tweak, type
<code type="inline">bin\mallet train-topics &#8211;-help</code> at the prompt.)</li>
</ul>
<p>Type <code type="inline">dir</code>. Your outputted files will be at the bottom of the list of
files and directories in <code type="inline">C:\Mallet</code>. Open <code type="inline">tutorial_keys.txt</code> in a word
processor (Figure 9). You are presented with a series of paragraphs. The
first paragraph is topic 0; the second paragraph is topic 1; the third
paragraph is topic 2; etc. (The output begins counting at 0 rather than
1; so if you ask it to determine 20 topics, your list will run from 0 to
19). The second number in each paragraph is the <emph>Dirichlet parameter</emph> for
the topic. This is related to an option which we did not run, and so its
default value was used (this is why every topic in this file has the
number 2.5).</p>
<figure><desc>Figure 9: Keywords Shown in a Word Processor</desc><graphic url="fig-9-tutorial-key-words-in-Word.png"/></figure>
<p>If when you ran the topic model routine you had included</p>
<pre><code xml:id="code_topic-modeling-and-mallet_11" type="block" corresp="code_topic-modeling-and-mallet_11.txt"></code></pre>
<p>as below</p>
<pre><code xml:id="code_topic-modeling-and-mallet_12" type="block" corresp="code_topic-modeling-and-mallet_12.txt"></code></pre>
<p>the output might look like this:</p>
<pre><code xml:id="code_topic-modeling-and-mallet_13" type="block" corresp="code_topic-modeling-and-mallet_13.txt"></code></pre>
<p>That is, the first number is the topic (topic 0), and the second number
gives an indication of the <emph>weight</emph> of that topic. In general, including
<code type="inline">-&#8211;optimize-interval</code> leads to better topics.</p>
<div type="3"><head>The composition of your documents</head>
<p>What topics compose your documents? The answer is in the
<code type="inline">tutorial_composition.txt</code> file. To stay organized, import the
<code type="inline">tutorial_composition.txt</code> file into a spreadsheet (Excel, Open Office,
etc). You will have a spreadsheet with a #doc, source, topic,
proportion columns. All subsequent columns run topic, proportion, topic,
proportion, etc., as in figure 10.</p>
<figure><desc>Figure 10: Topic Composition</desc><graphic url="fig-10-topic-composition.png"/></figure>
<p>This can be a somewhat difficult file to read. The topics begin in the third
column, in this case Column C, and continue until the last topic in Column V.
This is because we have trained 20 topics &#8211;&#160;if we trained 25, for example,
they would run until column AA.</p>
<p>From this, you can see that doc# 0 (ie, the first document loaded into MALLET),
<code type="inline">elizabeth_needham.txt</code> has topic 0 at a percentage of 0.43% (column C).
We can see that topic 17 is the principal topic, at 59.05%, by locating the highest
value. Your own topics may be different given the nature of MALLET.</p>
<p>If you have a corpus of text files that are arranged in chronological
order (e.g., <code type="inline">1.txt</code> is earlier than <code type="inline">2.txt</code>), then you can graph this
output in your spreadsheet program, and begin to see changes over time,
as Robert Nelson has done in <link target="http://dsl.richmond.edu/dispatch/">Mining the Dispatch</link>.</p>
<p>How do you know the number of topics to search for? Is there a <emph>natural</emph>
number of topics? What we have found is that one has to run the
train-topics with varying numbers of topics to see how the composition
file breaks down. If we end up with the majority of our original texts
all in a very limited number of topics, then we take that as a signal
that we need to increase the number of topics; the settings were too
coarse. There are computational ways of searching for this, including
using MALLETs <code type="inline">hlda command</code>, but for the reader of this tutorial, it is
probably just quicker to cycle through a number of iterations (but for
more see Griffiths, T. L., &amp; Steyvers, M. (2004). Finding scientific
topics. Proceedings of the National Academy of Science, 101, 5228-5235).</p>
</div><div type="3"><head>Getting your own texts into MALLET</head>
<p>The <code type="inline">sample data</code> folder in MALLET is your guide to how you should
arrange your texts. You want to put everything you wish to topic model
into a single folder within <code type="inline">c:\mallet</code>, ie <code type="inline">c:\mallet\mydata</code>. Your
texts should be in <code type="inline">.txt</code> format (that is, you create them with Notepad,
or in Word choose <code type="inline">Save As -&gt; MS Dos text</code>). You have to make some
decisions. Do you want to explore topics at a paragraph by paragraph
level? Then each <code type="inline">txt</code> file should contain one paragraph. Things like
page numbers or other identifiers can be indicated in the name you give
the file, e.g., <code type="inline">pg32_paragraph1.txt</code>. If you are working with a diary,
each text file might be a single entry, e.g., <code type="inline">april_25_1887.txt</code>. (Note
that when naming folders or files, do not leave spaces in the name.
Instead use underscores to represent spaces). If the texts that you are
interested in are on the web, you might be able to <link target="http://electricarchaeology.ca/2012/07/09/mining-a-day-of-archaeology/">automate this
process</link>.</p>
</div><div type="3"><head>Further Reading about Topic Modeling</head>
<p>To see a fully worked out example of topic modeling with a body of
materials culled from webpages, see <link target="http://electricarchaeology.ca/2012/06/08/mining-the-open-web-with-looted-heritage-draft/">Mining the Open Web with Looted
Heritage Draft</link>.</p>
<p>You can grab the data for yourself at <link target="https://ndownloader.figshare.com/files/90972">Figshare.com</link>, which includes a
number of <code type="inline">.txt</code> files. Each individual <code type="inline">.txt</code> file is a single news
report.</p>
<ul>
<li>For extensive background and bibliography on topic modeling you may
wish to begin with Scott Weingart's <link target="http://www.scottbot.net/HIAL/?p=19113">Guided Tour to Topic
Modeling</link></li>
<li>Ted Underwood's '<link target="http://tedunderwood.wordpress.com/2012/04/07/topic-modeling-made-just-simple-enough/">Topic modeling made just simple enough</link>' is an
important discussion on interpreting the meaning of topics.</li>
<li>Lisa Rhody's post on interpreting topics is also illuminating.
'<link target="http://web.archive.org/web/20160704150726/http://www.lisarhody.com:80/some-assembly-required/">Some Assembly Required</link>' <emph>Lisa @ Work</emph> August 22, 2012.</li>
<li>Clay Templeton, '<link target="http://mith.umd.edu/topic-modeling-in-the-humanities-an-overview/">Topic Modeling in the Humanities: An Overview |
Maryland Institute for Technology in the Humanities</link>', n.d.</li>
<li>David Blei, Andrew Ng, and Michael Jordan, '<link target="http://dl.acm.org/citation.cfm?id=944937">Latent dirichlet
allocation</link>,' The Journal of Machine Learning Research 3 (2003).</li>
<li>Finally, also consult David Mimno's <link target="http://mimno.infosci.cornell.edu/topics.html">bibliography of topic modeling
articles</link>. They're tagged by topic to make finding the right one
for a particular application that much easier. Also take a look at
his recent article on <link target="http://www.perseus.tufts.edu/publications/02-jocch-mimno.pdf">Computational Historiography</link> from ACM
Transactions on Computational Logic which goes through a hundred
years of Classics journals to learn something about the field. While
the article should be read as a good example of topic modeling, his
'Methods' section is especially important, in that it discusses
preparing text for this sort of analysis.</li>
</ul>
</div></div>
    </body>
  </text>
</TEI>
