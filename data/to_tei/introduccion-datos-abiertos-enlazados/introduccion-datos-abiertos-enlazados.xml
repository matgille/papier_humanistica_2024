<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="introduccion-datos-abiertos-enlazados">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Introducción a los Datos abiertos enlazados</title>
                <author role="original_author">Jonathan Blaney</author>
                <editor role="reviewers">
                    <persName>Tehri Nurmikko-Fuller</persName>
                    <persName>Matthew Lincoln</persName>
                </editor>
                <author role="translators">María-Jesús Colmenero-Ruiz</author>
                <editor role="translation-reviewers">
                    <persName>Maria Jose Afanador</persName>
                    <persName>Antonio Rojas Castro</persName>
                </editor>
                <editor role="editors">Adam Crymble</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <date type="translated">06/02/2018</date>
                <idno type="doi">10.46430/phes0038</idno>
                <date type="published">05/07/2017</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#intro-to-linked-data"/>.</p>
                <p>There are other translations: <ref target="#introducao-dados-abertos-conectados"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>Con este tutorial aprenderás los fundamentos (URIs, ontologías, formato RDF y, muy brevemente, SPARQL) de los Datos abiertos enlazados.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">lod</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="es">
        <body>
            <div type="2">
                <head>Introducción y contexto de la lección</head>
                <p>Esta lección ofrece una introducción breve y concisa a los <ref target="https://es.wikipedia.org/wiki/Datos_enlazados">datos abiertos enlazados</ref>    (<emph>Linked Open Data</emph>, LOD). No es necesario ningún conocimiento previo. Los lectores lograrán comprender de forma clara los conceptos que fundamentan los datos abiertos enlazados, cómo se utilizan y cómo se crean. El tutorial se divide en cinco partes, más una de lecturas adicionales:</p>
                <list type="ordered">
                    <item>Datos abiertos enlazados: ¿qué son?</item>
                    <item>El papel del <ref target="https://es.wikipedia.org/wiki/Identificador_de_recursos_uniforme">Identificador de Recursos Uniforme</ref> (URI)</item>
                    <item>Cómo los LOD organizan el conocimiento: <ref target="https://es.wikipedia.org/wiki/Ontolog%C3%ADa_(inform%C3%A1tica)">ontologías</ref>
                    </item>
                    <item>El <ref target="https://es.wikipedia.org/wiki/Resource_Description_Framework">Marco de descripción de recursos</ref> (RDF) y formatos de datos</item>
                    <item>Cómo interrogar los datos abiertos enlazados con <ref target="https://es.wikipedia.org/wiki/SPARQL">SPARQL</ref>
                    </item>
                    <item>Lecturas y recursos adicionales</item>
                </list>
                <p>El tutorial puede completarse en un par de horas, pero siempre es posible releer algunas secciones para reforzar la comprensión. Los términos técnicos se han enlazado con su página correspondiente en Wikipedia; te animamos a hacer una pausa y leer sobre los términos que encuentres más complejos. Después de haber aprendido algunos de los principios clave de LOD, la mejor manera de mejorar y consolidar ese conocimiento es practicar. Este tutorial ofrece oportunidades para hacerlo. Al final del curso deberías entender los fundamentos de LOD, incluyendo términos y conceptos clave.</p>
                <p>Si necesitas aprender a explorar los LOD usando el lenguaje de consulta <ref target="https://es.wikipedia.org/wiki/SPARQL">SPARQL</ref>, recomiendo la lección <ref target="/es/lecciones/sparql-datos-abiertos-enlazados">'Uso de SPARQL para acceder a datos abiertos enlazados'</ref> de Matthew Lincoln, que sigue de una forma práctica la perspectiva conceptual ofrecida en esta lección.</p>
                <p>Con el fin de proporcionar a los lectores una base sólida de los principios básicos de LOD, este tutorial no ofrecerá una cobertura completa de todos los conceptos LOD. Los siguientes dos conceptos de LOD <emph>no</emph> se explicarán en esta lección:</p>
                <list type="ordered">
                    <item>
                        <p>La <ref target="https://es.wikipedia.org/wiki/Web_sem%C3%A1ntica">web semántica</ref> y el <ref target="https://en.wikipedia.org/wiki/Semantic_reasoner">razonamiento semántico</ref> de <ref target="https://es.wikipedia.org/wiki/Conjunto_de_datos">conjuntos de datos</ref>. Un razonador semántico deduciría que Jorge VI es el hermano o medio hermano de Eduardo VIII, dado el hecho de que a) Eduardo VIII es el hijo de Jorge V y b) Jorge VI es el hijo de Jorge V. Este tutorial no se centra en este tipo de tareas.</p>
                    </item>
                    <item>
                        <p>La creación y subida de conjuntos de datos abiertos enlazados a la <ref target="http://linkeddatacatalog.dws.informatik.uni-mannheim.de/state/">nube de datos enlazados</ref>. Compartir tus LOD es un principio importante, al que se anima más adelante. Sin embargo, los aspectos prácticos de contribuir con tus LOD a la nube de datos enlazados está fuera del alcance de esta lección. Al final de este tutorial hay algunos recursos disponibles que pueden ayudarte a comenzar con esta tarea.</p>
                    </item>
                </list>
            </div>
            <head>Datos abiertos enlazados: ¿qué son?</head>
            <p>LOD es información estructurada en un formato destinado a las máquinas y, por tanto, no es necesariamente fácil de entender a primera vista. No te desanimes por esto, ya que una vez que entiendas los principios, puedes conseguir que una máquina los lea por ti.</p>
            <p>Si todos los conjuntos de datos se publicaran en abierto y se usara el mismo formato para estructurar la información, sería posible interrogar todos los conjuntos de datos a la vez. Analizar enormes volúmenes de datos es potencialmente mucho más efectivo que la publicación individual de los conjuntos de datos propios distribuidos por la web en lo que se conoce como <ref target="https://en.wikipedia.org/wiki/Information_silo">silos de información</ref>. Estos conjuntos de datos interoperables son el destino al que los profesionales de los LOD desean acercarse.</p>
            <p>Para lograr este objetivo, al trabajar con LOD, recuerda siempre los tres principios siguientes:</p>
            <list type="ordered">
                <item>
                    <p>
                        <hi rend="bold">Utiliza un formato estándar de LOD reconocido</hi>. Para que los LOD funcionen, los datos deben estar <ref target="https://es.wikipedia.org/wiki/Estructura_de_datos">estructurados</ref> usando estándares reconocidos para que los ordenadores que interrogan los datos puedan procesarlos de manera consistente. Existen varios formatos para LOD, algunos de los cuales se analizan más adelante.</p>
                </item>
                <item>
                    <p>
                        <hi rend="bold">Refiérete a una entidad de la misma forma que otras personas</hi>. Si tienes datos sobre la misma persona/lugar/cosa en dos o más sitios, asegúrate de referirte a la persona/lugar/cosa de la misma manera en todos los casos.</p>
                </item>
                <item>
                    <p>
                        <hi rend="bold">Publica tus datos en abierto</hi>. Con la expresión "en abierto" queremos decir que cualquier persona pueda usarlos sin pagar una cuota y en un formato que no requiera <ref target="https://en.wikipedia.org/wiki/Proprietary_software">programas de pago</ref>.</p>
                </item>
            </list>
            <p>Comencemos con un ejemplo de datos sobre una persona, usando un habitual <ref target="https://en.wikipedia.org/wiki/Attribute%E2%80%93value_pair">par atributo-valor</ref> típico en computación:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_0" corresp="code_introduccion-datos-abiertos-enlazados_0.txt" rend="block"/>
            </ab>
            <p>En este caso, el 'atributo' es una persona. Y el valor —o quien es esa persona— está representado por un número. El número podría ser asignado al azar o podrías utilizar un número que ya estaba asociado con ese individuo. Este último enfoque tiene grandes ventajas: si todo el mundo que crea un conjunto de datos que menciona esa persona utiliza <emph>exactamente el mismo número</emph> y en <emph>exactamente el mismo formato</emph>, entonces podemos encontrar de forma fiable a ese individuo en cualquier conjunto de datos que se adhiera a esas reglas.</p>
            <p>Vamos a crear un ejemplo con Jack Straw. Con este nombre propio podemos referirnos tanto a un rebelde inglés del siglo XIV como a un prominente ministro del gabinete británico de Tony Blair. Claramente es útil poder diferenciar a las dos personas que comparten un nombre común. Utilizando el modelo anterior en el que cada persona está representada por un número único, identifiquemos al ministro británico Jack Straw con el número <code rend="inline">64183282</code>. Su par de atributo-valor entonces se vería así:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_1" corresp="code_introduccion-datos-abiertos-enlazados_1.txt" rend="block"/>
            </ab>
            <p>A continuación, vamos a identificar al Jack Straw descrito por el <emph>
                    <ref target="http://www.oxforddnb.com">Oxford Dictionary of National Biography</ref>
                </emph> como 'el enigmático líder rebelde' con el número <code rend="inline">33059614</code>. En consecuencia, su par atributo-valor sería el siguiente:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_2" corresp="code_introduccion-datos-abiertos-enlazados_2.txt" rend="block"/>
            </ab>
            <p>Procurando que todo aquél que crea LOD use estos dos números para referirse al Jack Straw respectivo, podremos entonces buscar a la persona<code rend="inline"> 64183282</code> en un conjunto de datos abierto enlazado y estar seguros de que estamos obteniendo a la persona adecuada -en este caso, el ministro-.</p>
            <p>Los pares atributo-valor también pueden almacenar información sobre otros tipos de entidades, como, por ejemplo, lugares. Jack Straw el político moderno fue miembro del parlamento británico, representando a Blackburn. Hay más de un lugar en el Reino Unido llamado Blackburn, por no hablar de otros Blackburns en todo el mundo. Usando los mismos principios descritos anteriormente, podemos desambiguar entre los diferentes Blackburns asignando un identificador único al lugar correcto: Blackburn en Lancashire, Inglaterra.</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_3" corresp="code_introduccion-datos-abiertos-enlazados_3.txt" rend="block"/>
            </ab>
            <p>En este momento podrías estar pensando, "esto es lo que hace el catálogo de la biblioteca". Es cierto que la idea clave aquí es la de <ref target="https://es.wikipedia.org/wiki/Control_de_autoridades">control de autoridades</ref>, que es central en biblioteconomía (un fichero de autoridad es una lista cerrada de términos que pueden ser utilizados en un contexto particular, por ejemplo cuando se cataloga un libro). En ambos ejemplos mencionados anteriormente, hemos utilizado los ficheros de autoridad para asignar los números (los identificadores únicos) a los Jacks y a Blackburn. Los números que utilizamos para los dos Jack Straws provienen del <ref target="https://viaf.org">Virtual International Authority File - Archivo de Autoridades Internacional Virtual</ref> (VIAF), que es mantenido por un consorcio de bibliotecas de todo el mundo para tratar de abordar el problema de la miríada de formas en las que una misma persona podría ser nombrada. El identificador único que utilizamos para el distrito electoral de Blackburn provino de <ref target="http://www.geonames.org/">GeoNames</ref>, una base de datos geográfica gratuita.</p>
            <p>Pero intentemos ser más precisos por lo que entendemos por Blackburn en este caso. Jack Straw ejerció su cargo parlamentario en representación de Blackburn (que cuenta con un solo miembro en el parlamento británico). Los límites de Blackburn han cambiado con el paso del tiempo, así que en el proyecto '<ref target="https://repository.jisc.ac.uk/6544/">Digging Into Linked Parliamentary Data</ref>' (Dilipad) (en el que trabajé) se crearon identificadores únicos para las afiliaciones a partidos y para los distritos electorales de cada miembro del parlamento. En este ejemplo, Jack Straw representó a la circunscripción conocida como 'Blackburn' en su encarnación posterior a 1955:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_4" corresp="code_introduccion-datos-abiertos-enlazados_4.txt" rend="block"/>
            </ab>
            <p>Como VIAF es un archivo de autoridad reputado y bien mantenido de personas notables, fue un conjunto obvio de identificadores a usar para Jack Straw. Como el electorado representado por Straw estaba cubierto perfectamente por los archivos de autoridad creados por el proyecto Dilipad, también fue lógico usarlos. Por desgracia, no siempre es tan obvio cuál de las listas publicadas en línea es mejor utilizar. Una podría ser más usada que otra, pero quizás esta última ofrezca información más completa para un propósito particular. GeoNames funcionaría mejor que los identificadores Dilipad en algunos casos. También habrá casos en los que no puedas encontrar un conjunto de datos con esa información. Por ejemplo, imagina que quisieras escribir pares de atributo-valor sobre ti y tus relaciones familiares cercanas. En este caso, tendrías que inventar tus propios identificadores.</p>
            <p>La falta de archivos de autoridad consistentes es uno de los principales retos a los que los LOD se enfrentan en este momento. <ref target="https://es.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</ref>, quien ideó una forma de vincular documentos a través de una red creando así la World Wide Web, ha sido durante mucho tiempo uno de sus proponentes principales de los LOD. Para alentar un mayor uso de los LOD sugirió un '<ref target="https://www.w3.org/DesignIssues/LinkedData.html">sistema de calificación de cinco estrellas</ref>' que anime a todos a avanzar lo más posible hacia los LOD. En esencia, cree que es bueno publicar datos en abierto, especialmente si se utilizan formatos abiertos y estándares públicos, pero mejor si también se enlaza con los datos de otras personas.</p>
            <p>Una vez que se asignan identificadores únicos a todos los elementos, el siguiente paso es clave en la creación de LOD para tener una manera de <emph>describir</emph> la relación entre Jack Straw (<code rend="inline">64183282</code>) y Blackburn (<code rend="inline">blackburn1955-current</code>). En los LOD, las relaciones se expresan utilizando lo que se conoce como una '<ref target="https://en.wikipedia.org/wiki/Semantic_triple">tripleta</ref>'. Hagamos una tripleta que representa la relación entre Jack Straw y su circunscripción electoral:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_5" corresp="code_introduccion-datos-abiertos-enlazados_5.txt" rend="block"/>
            </ab>
            <p>La presentación (o <ref target="https://es.wikipedia.org/wiki/Sintaxis">sintaxis</ref>) de las tripletas, incluida la puntuación utilizada anteriormente, se analizará más adelante, en la sección sobre RDF y formatos de datos. Por ahora, concéntrate en la estructura básica. La tripleta, como es lógico, tiene tres partes. Éstas se conocen convencionalmente como sujeto, predicado y objeto:</p>
            <table>
                <row>
                    <cell role="label">sujeto</cell>
                    <cell role="label">predicado</cell>
                    <cell role="label">objeto</cell>
                </row>
                <row>
                    <cell>persona 64183282</cell>
                    <cell>representanteEnElParlamentoUK</cell>
                    <cell>"blackburn1955-current"</cell>
                </row>
            </table>
            <p>La forma tradicional de representar una tripleta en forma de diagrama es:</p>
            <figure>
                <desc>Manera clásica de representar una tripleta</desc>
                <graphic url="intro-a-datos-enlazados-fig5.png"/>
            </figure>
            <p>Así que nuestra tripleta de Jack Straw, en una forma más legible para los humanos, podría representarse así:</p>
            <figure>
                <desc>Diagrama triple que muestra que Jack Straw representó a Blackburn</desc>
                <graphic url="intro-a-datos-enlazados-fig6.png"/>
            </figure>
            <p>Por ahora hay tres puntos clave que recordar:</p>
            <list type="unordered">
                <item>Los LOD deben ser abiertos y estar disponibles para cualquier persona en Internet (de lo contrario, no son 'abiertos')</item>
                <item>Los impulsores de los LOD tienen como objetivo estandarizar las formas de referirse a entidades únicas</item>
                <item>Los LOD consisten en tripletas que describen relaciones entre entidades</item>
            </list>
            <div type="2">
                <head>El papel del Identificador Uniforme de Recursos (Uniform Resource Identifier - URI)</head>
                <p>Una parte esencial de los LOD es el <ref target="https://es.wikipedia.org/wiki/Identificador_de_recursos_uniforme">Identificador Uniforme de Recursos</ref> o URI. El URI es una manera unívoca y fiable de representar una entidad (una persona, un objeto, una relación, etc.) en una forma que es utilizable por todo el mundo.</p>
                <p>En la sección anterior usamos dos números distintos para identificar nuestros dos Jack Straws diferentes.</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_6" corresp="code_introduccion-datos-abiertos-enlazados_6.txt" rend="block"/>
                </ab>
                <p>El problema es que en todo el mundo hay muchas bases de datos que contienen personas con estos números, y probablemente sean personas diferentes. Fuera de nuestro contexto inmediato, estas cifras no identifican individuos únicos. Tratemos de arreglar eso. Aquí están estos mismos identificadores pero como URI:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_7" corresp="code_introduccion-datos-abiertos-enlazados_7.txt" rend="block"/>
                </ab>
                <p>Así como el número único desambiguó nuestros dos Jack Straws, el URI completo anterior nos ayuda a eliminar la ambigüedad entre todos los diferentes archivos de autoridad que existen. En este caso, está claro que estamos usando VIAF como nuestro archivo de autoridad. Ya has visto esta forma de desambiguación muchas veces en la web. Hay muchos sitios web alrededor del mundo con páginas llamadas <code rend="inline">/home</code> o <code rend="inline">/faq</code>. Pero no hay confusión porque el <ref target="https://es.wikipedia.org/wiki/Dominio_de_Internet">dominio</ref> (la primera parte del Localizador Uniforme de Recursos (URL) - por ejemplo,<code rend="inline">bbc.co.uk</code>) es único y, por lo tanto, todas las páginas que son parte de ese dominio son únicas, diferenciándose de otras páginas <code rend="inline">/faq</code> de otros sitios web. En la dirección <code rend="inline">http://www.bbc.co.uk/faqs</code>, es la parte <code rend="inline">bbc.co.uk</code> la que hace únicas las páginas siguientes. Esto es tan obvio para las personas que usan la web todo el tiempo que no piensan en ello. Probablemente también sepas que si quieres iniciar un sitio web llamado <code rend="inline">bbc.co.uk</code> no puedes hacerlo, porque ese nombre ya se ha registrado con la autoridad correspondiente, que es el <ref target="https://es.wikipedia.org/wiki/Sistema_de_nombres_de_dominio">Sistema de Nombres de Dominio</ref> (Domain Name System - DNS). El registro garantiza la unicidad. Los URIs también deben ser únicos.</p>
                <p>Si bien los ejemplos anteriores se parecen a las URLs, es posible también construir un URI que no se parezca en nada a una URL. Tenemos muchas maneras de identificar personas y cosas de manera única y rara vez lo pensamos o nos preocupamos de ello. Los códigos de barras, los números de pasaporte e incluso tu dirección postal están diseñados para ser únicos. En el mundo desarrollado los números de teléfono móvil se colocan con frecuencia en los carteles de las tiendas precisamente porque son únicos. Todos ellos podrían usarse como URIs.</p>
                <p>Cuando quisimos crear URIs para las entidades descritas por el proyecto '<ref target="http://www.history.ac.uk/projects/digital/tobias">Tobias</ref>', elegimos una estructura tipo URL y elegimos utilizar nuestro espacio web institucional, dejando de lado  <code rend="inline">data.history.ac.uk/tobias-project/</code> como un lugar dedicado a alojar estos URI. Al ponerlo en <code rend="inline">data.history.ac.uk</code> en lugar de en <code rend="inline">history.ac.uk</code>, hubo una separación clara entre los URI y las páginas del sitio web. Por ejemplo, uno de los URIs del proyecto Tobias era <ref target="http://data.history.ac.uk/tobias-project/person/15601">http://data.history.ac.uk/tobias-project/person/15601</ref>. Si bien el formato de los URI mencionados anteriormente es el mismo que el de una URL, no se vinculan a páginas web (intenta pegarlas en un navegador web). Muchas personas nuevas con los LOD encuentran esto confuso. Todas las URL son URI, pero no todas las URI son URL. Una URI puede describir cualquier cosa, mientras que una URL describe la ubicación de algo en la web. Es decir, una URL te dice la ubicación de una página web o un archivo o algo similar. Un URI simplemente hace el trabajo de identificar algo. Así como el Número Estándar Internacional de Libro, o <ref target="https://www.iso.org/standard/36563.html">ISBN</ref> 978-0-1-873354-6 identifica de manera única una edición de tapa dura de <emph>Bautismo, Hermandad y Creencias en la Reforma de Alemania</emph> por Kat Hill, pero no te dice dónde conseguir una copia. Para eso, necesitarías algo como una <ref target="https://www.upo.es/biblioteca/guia_loc_sig/signatura/index.html">signatura</ref>, que te da una ubicación exacta en un estante de una biblioteca específica.</p>
                <p>Hay un poco de jerga alrededor de los URIs. La gente habla de si son, o no, <ref target="https://es.wikipedia.org/wiki/Referencia_(inform%C3%A1tica)">desreferenciables</ref>. Eso solo significa que <emph>¿se puede pasar desde una referencia abstracta a otra cosa?</emph> Por ejemplo, si pegas un URI en la barra de direcciones de un navegador, ¿devolverá algo? El URI de VIAF para el historiador Simon Schama es:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_8" corresp="code_introduccion-datos-abiertos-enlazados_8.txt" rend="block"/>
                </ab>
                <p>Si lo pones en el navegador, obtendrás una página web sobre Simon Schama que contiene datos estructurados sobre él y su historial de publicaciones. Esto es muy útil, pero, por otro lado, no es obvio desde la URI a quién o incluso a qué se refiere. Del mismo modo, si tratamos un número de teléfono móvil (con código internacional) como URI para una persona, entonces debería ser desreferenciable. Alguien podría responder el teléfono, e incluso podría ser Schama.</p>
                <p>Pero esto no es esencial. Muchos de los URI no son desreferenciables, como en el ejemplo anterior del proyecto Tobias. No puedes encontrarlo en ningún sitio; es una convención.</p>
                <p>El ejemplo de VIAF nos lleva a otra cosa importante sobre los URIs: no debes crearlos a menos que sea necesario. Las personas y las organizaciones han estado haciendo esfuerzos concertados para construir listas de URIs adecuadas y los LOD no funcionarán de manera efectiva si la gente duplica ese trabajo creando nuevos URIs innecesariamente. Por ejemplo, VIAF cuenta con el apoyo de muchas bibliotecas a nivel internacional. Si deseas construir URI para personas, VIAF es una muy buena opción. Si no puedes encontrar a algunas personas en VIAF, u otras listas de autoridades, sólo entonces podrías necesitar hacer las tuyas propias.</p>
            </div>
            <head>Cómo organizan los LOD el conocimiento: ontologías</head>
            <p>Puede que no haya sido obvio por las tripletas individuales que vimos en la sección de apertura, pero los LOD pueden responder preguntas complejas. Cuando unes las tripletas forman un <ref target="https://en.wikipedia.org/wiki/Conceptual_graph">grafo</ref>, debido a la forma en que las tripletas se entrelazan. Supongamos que queremos encontrar una lista de todas las personas que fueron alumnos del compositor Franz Liszt. Si la información está en tripletas de datos enlazados sobre pianistas y sus profesores, podemos averigüarlo con una consulta (veremos este lenguaje de consulta, llamado SPARQL, en la sección final).</p>
            <p>Por ejemplo, el pianista Charles Rosen fue alumno del pianista Moriz Rosenthal, quien a su vez fue alumno de Franz Liszt. Ahora expresemos eso como dos tripletas (nos limitaremos a usar cadenas para los nombres en lugar de números de ID para que los ejemplos sean más legibles):</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_9" corresp="code_introduccion-datos-abiertos-enlazados_9.txt" rend="block"/>
            </ab>
            <p>Podríamos haber creado nuestras tripletas igualmente de esta manera:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_10" corresp="code_introduccion-datos-abiertos-enlazados_10.txt" rend="block"/>
            </ab>
            <p>Estamos poniendo ejemplos simplemente con el fin de ilustrar, pero si deseas enlazar tus datos a otros conjuntos de datos en la 'nube de datos vinculados' debes ver qué convenciones se utilizan en esos conjuntos de datos y hacer lo mismo. En realidad, esta es una de las características más útiles de los LOD porque gran parte del trabajo se ha realizado para ti. La gente ha dedicado mucho tiempo a desarrollar formas de modelar información dentro de un área particular de estudio y a pensar en cómo se pueden representar las relaciones dentro de esa área. Estos modelos generalmente se conocen como ontologías. Una ontología es una abstracción que permite que representar un conocimiento particular sobre el mundo. Las ontologías, en este sentido, son bastante nuevas y fueron diseñadas para hacer lo que hace una <ref target="https://es.wikipedia.org/wiki/Taxonom%C3%ADa">taxonomía</ref> jerárquica (como la clasificación de las especies del <ref target="https://es.wikipedia.org/wiki/Taxonom%C3%ADa_linneana">sistema de Linneo</ref>), pero de manera más flexible.</p>
            <p>Una ontología es más flexible porque no es jerárquica. Su objetivo es representar la fluidez del mundo real, donde las cosas se pueden relacionar entre sí de formas más complejas que las representadas por una estructura jerárquica de tipo arbóreo. En cambio, una ontología es más como una tela de araña.</p>
            <p>Sea lo que sea que desees representar con los LOD, te sugerimos que busques un vocabulario existente y lo uses, en lugar de intentar escribir el tuyo propio. Esta página principal incluye <ref target="http://semanticweb.org/wiki/Main_Page.html">una lista de algunos de los vocabularios más populares</ref>
            </p>
            <quote>
                <p>N.T.: desplázate hacia la zona derecha/abajo de la página: "Popular Vocabularies"</p>
            </quote>
            <p>Dado que nuestro anterior ejemplo se centra en los pianistas, sería una buena idea encontrar una ontología adecuada en lugar de crear nuestro propio sistema. De hecho, hay <ref target="http://web.archive.org/web/20170715094229/http://www.musicontology.com/">una ontología para la música</ref>. Además de una especificación bien desarrollada, tiene también algunos ejemplos útiles de su uso. Puedes echar un vistazo a las páginas de <ref target="http://web.archive.org/web/20170718143925/http://musicontology.com/docs/getting-started.html">Introducción</ref> para tener una idea de cómo puedes usar esa ontología particular.</p>
            <p>Lamentablemente, no encuentro nada que describa la relación entre un profesor y un alumno en Music Ontology. Pero la ontología se publica en abierto, así que puedo usarla para describir otras características de la música y luego crear mi propia extensión. Si luego publico mi extensión en abierto, otros pueden usarla si lo desean y puede convertirse en un estándar. Si bien el proyecto Music Ontology no tiene la relación que necesito, el proyecto <ref target="https://linkedjazz.org/">Linked Jazz</ref> permite el uso de 'mentorDe', que parece que podría funcionar bien en nuestro caso. Aunque esta no es la solución ideal, conviene esforzarse por usar lo que ya existe.</p>
            <p>Ahora bien, si estuvieras estudiando la historia de los pianistas, querrías identificar a muchos pianistas a quienes los alumnos de Liszt enseñaron, establecer una especie de árbol genealógico y ver si estos "nietos" de Liszt tienen algo en común. Podrías investigar a los alumnos de Liszt, hacer una gran lista de ellos, y luego investigar a cada uno de los alumnos e intentar hacer una lista de los alumnos que tuvieron. Con los LOD podrías (de nuevo, si es que las tripletas existen) hacer una consulta como:</p>
            <ab>
                <code xml:id="code_introduccion-datos-abiertos-enlazados_11" corresp="code_introduccion-datos-abiertos-enlazados_11.txt" rend="block"/>
            </ab>
            <p>La consulta devolvería todas las personas en el conjunto de datos que fueron alumnos de un alumno de Liszt. No nos entusiasmemos demasiado: esta consulta no nos dará a cada alumno de cada alumno de Liszt que haya existido alguna vez porque esa información probablemente no exista y no exista dentro de ningún grupo de tripletas existente. Lidiar con datos del mundo real muestra todo tipo de omisiones e inconsistencias que veremos cuando analicemos el mayor conjunto de LOD, <ref target="http://wiki.dbpedia.org">DBpedia</ref>, en la sección final.</p>
            <p>Si has utilizado <ref target="https://en.wikipedia.org/wiki/Relational_database">bases de datos relacionales</ref>, podrías pensar que pueden realizar la misma función. En el caso de Liszt, la información sobre pianistas descrita anteriormente podría organizarse en una <ref target="https://es.wikipedia.org/wiki/Base_de_datos_relacional">tabla</ref> de base de datos llamada algo así como 'Alumnos'.</p>
            <table>
                <row>
                    <cell role="label">alumnoID</cell>
                    <cell role="label">profesorID</cell>
                </row>
                <row>
                    <cell>31</cell>
                    <cell>17</cell>
                </row>
                <row>
                    <cell>35</cell>
                    <cell>17</cell>
                </row>
                <row>
                    <cell>49</cell>
                    <cell>28</cell>
                </row>
                <row>
                    <cell>56</cell>
                    <cell>28</cell>
                </row>
                <row>
                    <cell>72</cell>
                    <cell>40</cell>
                </row>
            </table>
            <p>Si no estás familiarizado con las bases de datos, no te preocupes. Pero probablemente aún puedas ver que algunos pianistas en esta tabla tenían el mismo profesor (números 17 y 28). Sin entrar en detalles, si Liszt está en esta tabla de la base de datos, sería bastante fácil extraer los alumnos de los alumnos de Liszt, utilizando la sentencia SQL <ref target="https://es.wikipedia.org/wiki/Join">join</ref>.</p>
            <p>De hecho, las bases de datos relacionales pueden ofrecer resultados similares a los LOD. La gran diferencia es que los LOD pueden ir más allá: puede enlazar conjuntos de datos creados sin intención explícita de ser enlazados. El uso de <ref target="https://es.wikipedia.org/wiki/Resource_Description_Framework">Resource Description Framework</ref> (RDF) y las URIs permite que esto suceda.</p>
            <div type="2">
                <head>RDF y formatos de datos</head>
                <p>Los LOD usan un estándar, definido por el <ref target="https://www.w3.org/">World Wide Web Consortium</ref>, o W3C, llamado <emph>
                        <ref target="https://es.wikipedia.org/wiki/Resource_Description_Framework">Resource Description Framework</ref>
                    </emph>, o simplemente RDF. Los estándares son útiles siempre que sean adoptados de forma generalizada -piensa en el metro o en los tamaños estándar de tornillo- incluso si son esencialmente arbitrarios. RDF ha sido adoptado como el estándar para los LOD.</p>
                <p>A menudo oirás que los LOD son denominados simplemente como RDF. Hemos retrasado hablar de RDF hasta ahora porque es bastante abstracto. RDF es un <ref target="https://es.wikipedia.org/wiki/Modelo_de_datos">modelo de datos</ref> que describe cómo se estructuran los datos en un nivel teórico. Así, la insistencia en usar tripletas (en lugar de cuatro partes, o dos o nueve, por ejemplo) es una regla de RDF. Pero cuando se trata de asuntos más prácticos, tienes algunas opciones de implementación. Por tanto, RDF te dice lo que tienes que hacer, pero no exactamente cómo tienes que hacerlo. Estas opciones se dividen en dos áreas: cómo escribes las cosas (serialización) y las relaciones que describen tus tripletas.</p>
                <div type="3">
                    <head>Serialización</head>
                    <p>La <ref target="https://es.wikipedia.org/wiki/Serializaci%C3%B3n">serialización</ref> es el término técnico para 'cómo escribes las cosas'. El chino estándar (mandarín) se puede escribir en caracteres tradicionales, caracteres simplificados o romanización Pinyin y el idioma en sí no cambia. Del mismo modo, RDF se puede escribir en diversas formas. Aquí veremos dos (hay otros, pero por simplicidad, nos centraremos en estos):</p>
                    <list type="ordered">
                        <item>
                            <p>
                                <ref target="https://es.wikipedia.org/wiki/Turtle_(sintaxis)">Turtle</ref>
                            </p>
                        </item>
                        <item>
                            <p>
                                <ref target="https://es.wikipedia.org/wiki/Extensible_Markup_Language">RDF/XML</ref>
                            </p>
                        </item>
                    </list>
                    <p>Reconocer qué serialización estás viendo significa que puedes elegir las herramientas adecuadas diseñadas para ese formato. Por ejemplo, RDF puede venir serializado en formato <ref target="https://es.wikipedia.org/wiki/Extensible_Markup_Language">XML</ref>. Luego puedes usar una herramienta o biblioteca de código diseñada para analizar ese formato en particular, lo que es útil si ya sabes cómo trabajar con él. El reconocimiento del formato también te brinda las palabras clave correctas para buscar ayuda en línea. Muchos recursos ofrecen sus bases de datos de LOD para su descarga y puedes elegir qué serialización deseas descargar.</p>
                    <div type="4">
                        <head>Turtle</head>
                        <p>'Turtle' (Tortuga en español) es un juego de palabras. 'Tur' es la abreviatura de 'terse' (conciso), y 'tle' -es la abreviatura de 'triple language' (lenguaje de tripletas)-. Turtle es una forma gratamente simple de escribir tripletas.</p>
                        <p>Turtle usa alias o atajos conocidos como <ref target="https://www.w3.org/TeamSubmission/turtle/#sec-tutorial">prefijos</ref>, lo que nos ahorra tener que escribir URIs completos todo el tiempo. Regresemos al URI que inventamos en la sección anterior:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_12" corresp="code_introduccion-datos-abiertos-enlazados_12.txt" rend="block"/>
                        </ab>
                        <p>No queremos escribir esto cada vez que nos referimos a esta persona (Jack Straw, como recordarás). Entonces sólo tenemos que anunciar nuestro atajo:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_13" corresp="code_introduccion-datos-abiertos-enlazados_13.txt" rend="block"/>
                        </ab>
                        <p>Así, Jack es <code rend="inline">toby:15601</code>, que reemplaza el URI largo y es más fácil de leer. He elegido 'toby', pero podría haber elegido cualquier cadena de letras con la misma facilidad.</p>
                        <p>Pasemos ahora de Jack Straw a William Shakespeare y usemos Turtle para describir algunos elementos sobre sus obras. Tendremos que decidir qué archivos de autoridad usar, un proceso que, como se mencionó anteriormente, se optimiza si consultamos otros conjuntos de LOD. Aquí usaremos <ref target="https://es.wikipedia.org/wiki/Dublin_Core">Dublin Core</ref>, un estándar de <ref target="https://es.wikipedia.org/wiki/Metadato">metadatos</ref> usado por las bibliotecas, como uno de nuestros prefijos, el archivo de autoridad del <ref target="https://es.wikipedia.org/wiki/Library_of_Congress_Control_Number">Número de control de la Biblioteca del Congreso</ref> para otro, y el último (VIAF) debería serte familiar. En conjunto, estos tres archivos de autoridad proporcionan identificadores únicos para todas las entidades que planeo usar en este ejemplo:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_14" corresp="code_introduccion-datos-abiertos-enlazados_14.txt" rend="block"/>
                        </ab>
                        <p>Ten en cuenta el espaciado del punto final después de la última línea. Esta es la forma de Turtle de indicar el final. Técnicamente no tiene que tener el espacio, pero lo hace más fácil de leer después de una larga cadena de caracteres.</p>
                        <p>En el ejemplo anterior, lccn: n82011242 representa a Macbeth; dc: creator vincula Macbeth a su autor; viaf: 96994048 representa a William Shakespeare.</p>
                        <p>Turtle también te permite listar tripletas sin molestarte en repetir cada URI cuando acabas de usarlo. Agreguemos la fecha en la que los expertos creen que Macbeth fue escrita utilizando el par atributo-valor de Dublin Core:<code rend="inline">dc: created 'YYYY'</code> :</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_15" corresp="code_introduccion-datos-abiertos-enlazados_15.txt" rend="block"/>
                        </ab>
                        <p>¿Recuerdas la estructura de la tripleta, discutida en la sección 1? Allí pusimos este ejemplo:</p>
                        <p>
                            <code rend="inline">1 persona 15601 (el sujeto) 2  representanteEnElParlamentoUK (el predicado) 3 "Blackburn" (el objeto)</code>
                        </p>
                        <p>La clave es que el predicado conecta el sujeto y el objeto. Describe la relación entre ellos. El sujeto ocupa el primer lugar en la tripleta, pero eso es una cuestión de elección propia, como comentamos en el ejemplo de las personas a quienes Liszt enseñó piano.</p>
                        <p>Puedes usar un punto y coma si el sujeto es el mismo pero el predicado y el objeto son diferentes, o una coma si el sujeto y el predicado son iguales y solo el objeto es diferente.</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_16" corresp="code_introduccion-datos-abiertos-enlazados_16.txt" rend="block"/>
                        </ab>
                        <p>Aquí estamos diciendo que Shakespeare (96994048) y John Fletcher (12323361) fueron los creadores de la obra <emph>Los dos nobles caballeros</emph>.</p>
                        <p>Cuando anteriormente vimos las ontologías, sugerí que le echaras un vistazo a los ejemplos de la <ref target="http://web.archive.org/web/20170718143925/http://musicontology.com/docs/getting-started.html">Music Ontology</ref>. Espero que no te decepcionaran. Echa un vistazo de nuevo ahora. Todavía es algo complicado, pero ¿tiene más sentido ahora?</p>
                        <p>Una de las ontologías más accesibles es Friend of a Friend, o <ref target="https://es.wikipedia.org/wiki/FOAF">FOAF</ref>. Está diseñada para describir personas y es, quizás por esa razón, bastante intuitiva. Si, por ejemplo, deseas escribirme para decirme que este tutorial es lo mejor que has leído, aquí está mi dirección de correo electrónico expresada como tripletas en FOAF:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_17" corresp="code_introduccion-datos-abiertos-enlazados_17.txt" rend="block"/>
                        </ab>
                    </div>
                    <div type="4">
                        <head>RDF/XML</head>
                        <p>En contraste con Turtle, RDF/XML puede parecer un poco pesado. Para empezar, convirtamos una tripleta del Turtle anterior, la que dice que Shakespeare fue el creador de <emph>Los dos parientes nobles</emph>:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_18" corresp="code_introduccion-datos-abiertos-enlazados_18.txt" rend="block"/>
                        </ab>
                        <p>En RDF/XML, con los prefijos declarados dentro del fragmento XML, es así:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_19" corresp="code_introduccion-datos-abiertos-enlazados_19.txt" rend="block"/>
                        </ab>
                        <p>El formato RDF/XML tiene la misma información básica que Turtle, pero se escribe de forma muy diferente, basándose en los principios de las etiquetas XML anidadas.</p>
                        <p>Pasemos a un ejemplo diferente para mostrar cómo RDF/XML combina tripletas y, al mismo tiempo, presentamos <ref target="https://es.wikipedia.org/wiki/Simple_Knowledge_Organization_System">SKOS</ref> (Simple Knowledge Organization System - Sistema Simple de Organización del Conocimiento), que está diseñado para codificar tesauros o taxonomías.</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_20" corresp="code_introduccion-datos-abiertos-enlazados_20.txt" rend="block"/>
                        </ab>
                        <p>Aquí estamos diciendo que el concepto SKOS <code rend="inline">21250</code>, abdicación, tiene una etiqueta preferida de "abdicación". La forma en que funciona es que el elemento sujeto (incluida la parte de abdicación, que es un valor de atributo en términos XML) tiene el predicado y el objeto anidados dentro de él. El elemento anidado es el predicado y el nodo hoja <ref target="https://es.wikipedia.org/wiki/%C3%81rbol_(inform%C3%A1tica)#Terminolog.C3.ADa">(<emph>the leaf node</emph>)</ref>, es el objeto. Este ejemplo está tomado de un proyecto para publicar un <ref target="http://www.history.ac.uk/projects/digital/tobias">tesauro de historia británica e irlandesa</ref>.</p>
                        <p>Al igual que con Turtle, podemos agregar más tripletas. Entonces, declaremos que el término más restringido en nuestra jerarquía de temas, uno más abajo de <emph>Abdicación</emph> será <emph>Crisis de la abdicación (1936)</emph>.</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_21" corresp="code_introduccion-datos-abiertos-enlazados_21.txt" rend="block"/>
                        </ab>
                        <p>¿Recuerdas cómo los predicados y los objetos están anidados dentro del sujeto? Aquí lo hemos hecho dos veces con el mismo sujeto, por lo que podemos hacer esto menos detallado al anidar ambos conjuntos de predicados y objetos dentro de un sujeto:</p>
                        <ab>
                            <code xml:id="code_introduccion-datos-abiertos-enlazados_22" corresp="code_introduccion-datos-abiertos-enlazados_22.txt" rend="block"/>
                        </ab>
                        <p>Si estás familiarizado con XML, esto será muy fácil para ti. Si no lo estás, podrías preferir un formato como Turtle. Pero la ventaja aquí es que creando tu RDF/XML puedes usar las herramientas habituales disponibles para XML, como editores y analizadores XML, para verificar que tu RDF/XML esté formateado correctamente. Si no tienes experiencia con XML, recomiendo Turtle, para lo que puedes usar una herramienta <ref target="http://www.easyrdf.org/converter">en línea</ref> para verificar que tu sintaxis sea correcta.</p>
                    </div>
                </div>
            </div>
            <div type="2">
                <head>Consultas RDF con SPARQL</head>
                <p>Para esta sección final, interrogaremos algunos LOD y veremos qué podemos hacer con ellos.</p>
                <p>El lenguaje de consulta que utilizamos para los LOD se llama <ref target="https://es.wikipedia.org/wiki/SPARQL">SPARQL</ref>. Es uno de esos acrónimos recursivos amados por los tecnólogos: <emph>Protocolo y lenguaje de consulta SPARQL</emph> .</p>
                <p>Como mencioné al principio, <emph>The Programming Historian en español</emph> tiene <ref target="/es/lecciones/sparql-datos-abiertos-enlazados">una lección completa</ref>, por Matthew Lincoln, sobre el uso de SPARQL. Esta última sección sólo proporciona una descripción general de los conceptos básicos y, si SPARQL despierta tu interés, puedes obtener una base sólida con el tutorial de Lincoln.</p>
                <p>Vamos a ejecutar nuestras consultas SPARQL en <ref target="https://es.wikipedia.org/wiki/SPARQL">DBpedia</ref>, que es un gran conjunto de LOD derivado de Wikipedia. Además de estar lleno de información que es muy difícil de encontrar a través de la interfaz habitual de Wikipedia, tiene varios "puntos finales" SPARQL: interfaces donde puedes escribir consultas SPARQL y obtener resultados de las tripletas de DBpedia.</p>
                <p>El punto de entrada (<emph>endpoint</emph>) de consulta SPARQL que yo uso se llama <ref target="http://dbpedia.org/snorql/">snorql</ref>. Estos puntos de entrada a veces parecen desconectarse, por lo que, si ese fuera el caso, busca <emph>dbpedia sparql</emph> en internet para encontrar un reemplazo similar.</p>
                <p>Si vas a la URL snorql indicada antes, verás que al principio ya están declarados varios prefijos, lo cual te será útil. También reconocerás ya algunos de los prefijos.</p>
                <figure>
                    <desc>cuadro de consulta predeterminado de snorql, con algunos prefijos declarados para ti</desc>
                    <graphic url="intro-to-linked-data-fig1.png"/>
                </figure>
                <p>En el cuadro de consulta, debajo de las declaraciones de prefijo, deberías ver:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_23" corresp="code_introduccion-datos-abiertos-enlazados_23.txt" rend="block"/>
                </ab>
                <p>Si alguna vez ha escrito una consulta de base de datos en <emph>Structured Query Language</emph>, <ref target="https://es.wikipedia.org/wiki/SQL">más conocido como SQL</ref>, esto te resultará bastante familiar y te ayudará a aprender SPARQL. Si no, no te preocupes. Las palabras clave utilizadas aquí, SELECT y WHERE no distinguen entre mayúsculas y minúsculas, pero algunas partes de una consulta SPARQL lo pueden hacer (ver a continuación), por lo que te recomiendo que sigas fielmente los ejemplos mostrados a lo largo de las consultas en este curso.</p>
                <p>Aquí  <code rend="inline">SELECT</code> significa <emph>devolver algo</emph> y <code rend="inline">*</code>  significa <emph>darme todo</emph>. <code rend="inline">WHERE</code>introduce una condición, que es donde pondremos los detalles de qué clase de cosas queremos que nos devuelva la consulta.</p>
                <p>Comencemos con algo simple para ver cómo funciona esto. Pega esto (o, mejor, escríbelo) en el cuadro de consulta:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_24" corresp="code_introduccion-datos-abiertos-enlazados_24.txt" rend="block"/>
                </ab>
                <p>Haz clic en "Go!"(ir) y, si dejaste el cuadro desplegable como "Browse" (navegar), deberías obtener dos columnas con la etiqueta "b" y "c". (Ten en cuenta que aquí, buscando una cadena, las mayúsculas y minúsculas sí importan: lyndal_roper no te dará ningún resultado).</p>
                <figure>
                    <desc>Parte inicial de la lista de resultados de una consulta para todas las tripletas con 'Lyndal_Roper' como sujeto</desc>
                    <graphic url="intro-to-linked-data-fig2.png"/>
                </figure>
                <p>Recapitulando, ¿qué acaba de pasar? ¿Y cómo sé qué escribir?</p>
                <p>En realidad no lo sabía y ese es uno de los problemas con los puntos de entrada SPARQL. Al conocer un conjunto de datos, debes probar y descubrir qué términos se usan. Como este proviene de Wikipedia y me interesaba saber qué información sobre historiadores podía encontrar, fui a la página de Wikipedia del historiador <ref target="https://en.wikipedia.org/wiki/Lyndal_Roper">Lyndal Roper</ref>.</p>
                <p>La parte al final de la URL es <code rend="inline">Lyndal_Roper</code> y llegué a la conclusión de que esta cadena es probablemente la forma en que se hace referencia a Roper en DBpedia. Como no sé qué más podría haber en las tripletas que mencionen a Roper, usé <code rend="inline">?a</code> y <code rend="inline">?b</code>. Estos son comodines: podría haber escrito igualmente  <code rend="inline">?en_cualquier_sitio</code> y <code rend="inline">?como_gustes</code> y las columnas tendrían esos títulos. Cuando desees ser más preciso sobre lo que estás  obteniendo, será más importante etiquetar las columnas de forma significativa.</p>
                <p>Prueba ahora tu propia consulta SPARQL ahora: elije una página de Wikipedia y copia la parte final de la URL, lo que aparece después de la barra diagonal final, y colócalo en lugar de Lyndal_Roper. Luego presiona 'Go!'.</p>
                <p>A partir de la información que obtienes de estos resultados, es posible generar consultas más precisas. Esto puede ser un tanto impredecible, al menos para mí, así que no te preocupes si algunos no funcionan.</p>
                <p>Volvamos a los resultados de la consulta que ejecuté hace un momento:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_25" corresp="code_introduccion-datos-abiertos-enlazados_25.txt" rend="block"/>
                </ab>
                <p>Puedo ver una larga lista en la columna etiquetada como <emph>c</emph> . Estos son todos los atributos que Roper tiene en la DBpedia y nos ayudarán a encontrar otras personas con estos atributos. Por ejemplo, puedo ver <code rend="inline">http://dbpedia.org/class/yago/Historian110177150</code>. ¿Puedo usar esto para obtener una lista de historiadores? Voy a poner esto en mi consulta pero en tercer lugar (porque ahí es donde estaba cuando lo encontré en los resultados de Lyndal Roper). Mi consulta se ve así:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_26" corresp="code_introduccion-datos-abiertos-enlazados_26.txt" rend="block"/>
                </ab>
                <p>He hecho un pequeño cambio aquí. Si esta consulta funciona entonces espero que mis historiadores estén en la primera columna, porque "historiador" no parece ser un predicado: no funciona como un verbo en una oración; así que voy a llamar a mi primera columna de resultados 'nombre_historiador' y a mi segunda (de la que no sé nada) 'predicado'.</p>
                <p>Ejecuta la consulta. ¿Te funciona? Yo obtuve una gran lista de historiadores.</p>
                <figure>
                    <desc>historiadores, según DBpedia</desc>
                    <graphic url="intro-to-linked-data-fig3.png"/>
                </figure>
                <p>Así que esto funciona para crear listas, lo cual es útil, pero sería mucho más potente combinar listas, para obtener intersecciones de conjuntos. Encontré un par de cosas más que podrían ser interesantes para consultar en los atributos de DBpedia de Lyndal Roper: <ref target="http://dbpedia.org/class/yago/WikicatBritishHistorians">http://dbpedia.org/class/yago/WikicatBritishHistorians</ref> y <ref target="http://dbpedia.org/class/yago/WikicatWomenHistorians">http://dbpedia.org/class/yago/WikicatWomenHistorians</ref>. Es muy fácil combinarlos pidiendo una variable que retornará (en nuestro caso, esta es <code rend="inline">?name</code>) y luego usar eso en múltiples líneas de una consulta. Ten en cuenta también el espacio y el punto al final de la primera línea que comienza con <code rend="inline">?name</code>:</p>
                <ab>
                    <code xml:id="code_introduccion-datos-abiertos-enlazados_27" corresp="code_introduccion-datos-abiertos-enlazados_27.txt" rend="block"/>
                </ab>
                <p>¡Funciona! Obtengo cinco resultados. En el momento de escribir, hay cinco historiadoras británicas en <emph>DBpedia</emph>...</p>
                <figure>
                    <desc>Historiadoras británicas, según DBpedia</desc>
                    <graphic url="intro-to-linked-data-fig4.png"/>
                </figure>
                <p>¿Solo cinco mujeres británicas historiadoras? Por supuesto que hay, en realidad, muchas más que eso, como podríamos demostrar fácilmente sustituyendo el nombre de, digamos, Alison Weir en nuestra primera consulta de Lyndal Roper. Esto nos lleva al problema con <emph>Dbpedia</emph> que mencioné anteriormente: no está marcado de manera consistente con información estructural del tipo que usa <emph>DBpedia</emph>. Nuestra consulta puede enumerar algunas historiadoras británicas, pero resulta que no podemos usarla para generar una lista significativa de personas en esta categoría. Todo lo que hemos encontrado es la gente en las entradas en Wikipedia que alguien ha decidido categorizar como "Historiador británico" y "mujer historiadora".</p>
                <p>Con SPARQL en <emph>DBpedia</emph>, debes tener cuidado con las inconsistencias del material de múltiples fuentes. Podrías usar SPARQL exactamente de la misma manera en un conjunto de datos más mantenido, por ejemplo, los datos del gobierno del Reino Unido: <ref target="https://data-gov.tw.rpi.edu//sparql">https://data-gov.tw.rpi.edu//sparql</ref> y esperar obtener resultados más sólidos (hay un breve resumen tutorial para este conjunto de datos aquí: <ref target="https://data-gov.tw.rpi.edu/wiki/A_crash_course_in_SPARQL">https://data-gov.tw.rpi.edu/wiki/A_crash_course_in_SPARQL</ref>).</p>
                <p>Sin embargo, a pesar de sus inconsistencias, <emph>DBpedia</emph> es un gran lugar para aprender SPARQL. Esto solo ha sido una breve introducción pero hay mucho más en <ref target="/es/lecciones/sparql-datos-abiertos-enlazados">'Uso de SPARQL para acceder a datos abiertos enlazados'</ref>.</p>
            </div>
            <div type="2">
                <head>Lecturas adicionales y recursos</head>
                <list type="unordered">
                    <item>
                        <p>Dean Allemang y James Hendler, <emph>Semantic Web for the Working Ontologist</emph>, 2nd edn, Elsevier, 2011</p>
                    </item>
                    <item>
                        <p>Tim Berners-Lee <ref target="https://www.w3.org/DesignIssues/LinkedData.html">Linked Data</ref>
                        </p>
                    </item>
                    <item>
                        <p>Bob DuCharme, <emph>Learning SPARQL</emph>, O'Reilly, 2011</p>
                    </item>
                    <item>
                        <p>El blog de <ref target="http://www.snee.com/bobdc.blog/">Bob DuCharme</ref> merece la pena leerlo también.</p>
                    </item>
                    <item>
                        <p>Richard Gartner, <emph>Metadata: Shaping Knowledge from Antiquity to the Semantic Web</emph>, Springer, 2016</p>
                    </item>
                    <item>
                        <p>Seth van Hooland y Ruben Verborgh, <emph>Linked Data for Libraries, Archives and Museums</emph>, 2015</p>
                    </item>
                    <item>
                        <p>Mira también la <ref target="http://freeyourmetadata.org/">página web</ref> complementaria del libro</p>
                    </item>
                    <item>
                        <p>Matthew Lincoln <ref target="/en/lessons/graph-databases-and-SPARQL">'Using SPARQL to access Linked Open Data'</ref>
                        </p>
                    </item>
                    <item>
                        <p>
                            <ref target="http://linkeddata.org/guides-and-tutorials">Linked Data guides and tutorials</ref>
                        </p>
                    </item>
                    <item>
                        <p>Dominic Oldman, Martin Doerr y Stefan Gradmann, "Zen and the Art of Linked Data: New Strategies for a Semantic Web of Humanist Knowledge", in <emph>A New Companion to Digital Humanities</emph>, editado por Susan Schreibman et al.</p>
                    </item>
                    <item>
                        <p>Max Schmachtenberg, Christian Bizer y Heiko Paulheim, <ref target="http://linkeddatacatalog.dws.informatik.uni-mannheim.de/state/">State of the LOD Cloud 2017</ref>
                        </p>
                    </item>
                    <item>
                        <p>David Wood, Marsha Zaidman y Luke Ruth, <emph>Linked Data: Structured data on the Web</emph>, Manning, 2014</p>
                    </item>
                    <item>
                        <p>Biblioteca del Congreso Nacional de Chile, <ref target="http://datos.bcn.cl/es/informacion/que-es">Linked Open Data: ¿Qué es?</ref>
                        </p>
                    </item>
                    <item>
                        <p>Ana-Isabel Torre-Bastida, Marta González-Rodríguez y Esther Villar-Rodríguez, <ref target="https://web.archive.org/web/20180720105638/https://recyt.fecyt.es/index.php/EPI/article/download/epi.2015.mar.04/18804">Datos abiertos enlazados (LOD) y su implantación en bibliotecas: iniciativas y tecnologías</ref>
                        </p>
                    </item>
                </list>
            </div>
            <div type="2">
                <head>Agradecimientos</head>
                <p>El autor del tutorial agradece a los revisores del tutorial original, Matthew Lincoln y a Terhi Nurmikko-Fuller, y al editor, Admam Cyrmble, por dedicar tiempo generosamente a ayudarle a mejorar este tutorial con numerosas sugerencias, aclaraciones y correcciones. Esta lección se basa en un trabajo perteneciente al “Tesauro de historia Británica e Irlandsesa como SKOS” (proyecto <ref target="http://www.history.ac.uk/projects/digital/tobias">Tobias</ref>), financiado por el <ref target="http://www.ahrc.ac.uk/">AHRC</ref>. Ha sido revisado para <emph>The Programming Historian</emph>.</p>
            </div>
        </body>
    </text>
</TEI>
