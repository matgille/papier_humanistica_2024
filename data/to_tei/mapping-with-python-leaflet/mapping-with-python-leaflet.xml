<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="mapping-with-python-leaflet">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Web Mapping with Python and Leaflet</title>
  <author role="original_author">Kim Pham</author><editor role="reviewers"><persName>Shawn Graham</persName><persName>Jim Clifford</persName></editor><editor role="editors">Ian Milligan</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phen0070</idno><date type="published">08/29/2017</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. This lesson is original.</p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>This tutorial teaches users how to create a web map based on tabular data.</p></abstract><textClass><keywords><term xml:lang="en">mapping</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="en">
    <body>
      <div type="2"><head>Lesson Goals</head>
<p>In this lesson, you will learn how to create a web map based on that data.  By the end of this lesson, you will be able to:</p>
<list type="unordered">
<item>Manipulate tabular data programmatically to extract geonames and create location-based data</item>
<item>Convert tabular data into a meaningful geographic data structure</item>
<item>Understand and apply the basic concepts of web mapping to design your own web map</item>
</list>
<div type="3"><head>Getting Started</head>
<div type="4"><head>Initial Setup</head>
<p>This lesson uses:</p>
<list type="unordered">
<item><ref target="/lessons/?topic=python">python</ref> (<ref target="http://pip.readthedocs.org/en/stable/">pip</ref>, <ref target="https://github.com/geopy/geopy">geopy</ref>, <ref target="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe">pandas</ref>)</item>
<item><ref target="http://leafletjs.com/">leaflet</ref></item>
<item><ref target="http://geojson.io/">geojson.io (from mapbox)</ref></item>
<item><ref target="https://www.javascript.com/">javascript</ref> and <ref target="https://jquery.com/">jquery</ref></item>
</list>
<p>Optional: If you wish to follow along with pre-made scripts you can find them in <ref target="https://github.com/programminghistorian/jekyll/tree/gh-pages/assets/mapping-with-python-leaflet">this directory</ref>.</p>
<p>To set up your working environment:</p>
<list type="ordered">
<item>Create a directory for this project where you will keep all of your scripts and files that you will work from</item>
<item>If you have a text editor where you can work from the directory of your project, import that directory. You can use editors such as <ref target="http://www.barebones.com/products/textwrangler/">TextWrangler</ref> for OS X, <ref target="https://notepad-plus-plus.org/">Notepad++</ref> for Windows, or <ref target="http://www.sublimetext.com/">Sublime Text</ref>.
If you are using a code editor such as Sublime Text, to import the folder you could drag and drop the folder that you want to work from into your editor window. Once you've done that, the directory will appear on the left hand sidebar as you root folder. If you click on your folder, you'll be able to see the contents of your folder. Importing a folder allows you to easily work with the files in your project. If you need to work with multiple files and directories in directories, this will make it easier to search through these files, switch between them while you're working and keep you organized.</item>
<item>(Optional) It is recommended to use a <ref target="http://docs.python-guide.org/en/latest/dev/virtualenvs/">Python virtual environment</ref> to store the dependencies and versions required for your specific project.</item>
</list>
</div><div type="4"><head>Getting Data: Download the CSV</head>
<p>We're going to start with a plain comma-separated values (CSV) data file and create a web map from it.</p>
<p><ref target="/assets/mapping-with-python-leaflet/census.csv">The data file can be downloaded here</ref>. You can grab this by either opening the link in your browser and saving the page, or you can use the curl command from your command line:</p>
<p><code rend="inline">curl -O https://programminghistorian.org/assets/mapping-with-python-leaflet/census.csv</code></p>
<p>The original source of this data is from the <ref target="http://data.london.gov.uk/dataset/historic-census-population">Greater London Authority London Datastore</ref>.</p>
</div></div><div type="3"><head>Geocoding with Python</head>
<table>
<row>
<cell role="label">Geolocator</cell>
<cell role="label">Nominatim()</cell>
</row>
<row>
<cell>performance test on census data</cell>
<cell>33.5s</cell>
</row>
<row>
<cell>request limit</cell>
<cell>1 request/s or timeout</cell>
</row>
<row>
<cell>capabilities for app development</cell>
<cell>can geocode based on user-input</cell>
</row>
<row>
<cell>application use</cell>
<cell>single-threaded applications, can only run geolocator one process at a time</cell>
</row>
<row>
<cell>affiliation</cell>
<cell>OpenStreetMap</cell>
</row>
</table></div><div type="3"><head>Transforming Data with Python</head>
<div type="4"><head>Making GeoJSON</head>
<p>Now that you have a spreadsheet full of coordinate data, we can convert the CSV spreadsheet into a format that web maps like, like GeoJSON.  GeoJSON is a web mapping standard of JSON data.  There are a couple of ways to make GeoJSON:</p>
<p>The easiest, recommended way is to use a UI tool developed by Mapbox called <ref target="http://geojson.io">geojson.io</ref>.  All you have to do is click and drag your csv file into the data window (the right side of the screen, next to the map), and it will automatically format your data into GeoJSON for you. You can select the 'GeoJSON' option under 'Save.'  Save your GeoJSON file as <code rend="inline">census.geojson</code>.</p>
<figure><desc>Drag and Drop GeoJSON creation!</desc><graphic url="webmap-01-geojsonio.gif"/></figure>
<p>Image Credit: with permission from Mauricio Giraldo Arteaga, NYPL Labs</p>
<p>You can also do it from the command line, using the <ref target="https://github.com/mapbox/csv2geojson">csv2geojson library</ref> that powers geojson.io.</p>
<p>Test this data out by importing it again into geojson.io.  You should see points generated in the preview window.  That's your data!</p>
</div><div type="4"><head>You finally have GeoJSON... but you need to do some cleaning!</head>
<p>If you've tested your GeoJSON data, you might notice that not every point is geolocated correctly.  We know that every Area_Name is a borough of London, but points appear all over United Kingdom, and some aren't located even in the country.</p>
<p>To make the results more accurate, save another copy of the census-historic-population-borough.csv file, calling it census_country.csv and include an additional column called 'Country' and put 'United Kingdom' in every row of your data. For even greater accuracy add 'City' and put 'London' in every row of your data to provide additional context for your data.</p>
<figure><desc>A new Country column</desc><graphic url="webmap-02-countrycolumn.png"/></figure>
<p>Make a copy of your geocoder.py python script, calling it geocoder-helpercolumn.py. Remove the following lines:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_11" corresp="code_mapping-with-python-leaflet_11.txt" lang="language-python" rend="block"/></ab>
<p>and replacing it with the following that combines the Area_Name and Country or City column to geocode your data:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_12" corresp="code_mapping-with-python-leaflet_12.txt" lang="language-python" rend="block"/></ab>
<p>Note that we added the .map(str) function. This is a pandas function that is allowing you to concatenate two DataFrame columns into a new, single column (helper) using the syntax format:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_13" corresp="code_mapping-with-python-leaflet_13.txt" lang="language-python" rend="block"/></ab>
<p>You will also want to comment out and commenting out <code rend="inline">namecolumn=str(sys.argv[2])</code> since we are now directly specifying the column that we are using in the script.</p>
<p>Your final script should look like this:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_14" corresp="code_mapping-with-python-leaflet_14.txt" lang="language-python" rend="block"/></ab>
<p>Which you can now run by using the command:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_15" corresp="code_mapping-with-python-leaflet_15.txt" rend="block"/></ab>
<p>Turn your clean data into GeoJSON by saving it as <code rend="inline">census.geojson</code> and test it out at <ref target="http://geojson.io">geojson.io</ref>. Remember, drag the new CSV you created (<code rend="inline">census_country.csv</code> into the window to create that beautiful JSON). Do the results look better now? Good!</p>
</div></div><div type="3"><head>Using Leaflet to Create a Web Map</head>
<div type="4"><head>I now have clean GeoJSON data.  Lets make a map!</head>
<p>Setup a test web server to test out our maps. A web server is used to serve content from your directory to your browser.</p>
<p>If you're in your working directory, from the command line, run:</p>
<p><code rend="inline">python -m SimpleHTTPServer</code> or <code rend="inline">python3 -m http.server</code> (for Python3)</p>
<p>SimpleHTTPServer is a Python module. If you want to change the server to port 8080 (or any other port), use</p>
<p><code rend="inline">python -m SimpleHTTPServer 8080</code> or <code rend="inline">python3 -m http.server 8080</code> (for Python3)</p>
<p>In your browser go to http://localhost:8080 and you should see the files you've been working with so far.</p>
<p>Now in your text editor open a new document and save it as an html file (mymap.html).  If you want to do a quick test, copy and paste the text below, refresh your http://localhost:8080 and open the html file in your browser.</p>
<ab><code xml:id="code_mapping-with-python-leaflet_16" corresp="code_mapping-with-python-leaflet_16.txt" lang="language-html" rend="block"/></ab>
<p>Do you see a map now?  Good! If not, you can troubleshoot by inspecting the browser, or by going back and retracing your steps.</p>
</div><div type="4"><head>What did I just make?</head>
<p>You made a web map!  Web maps use map tiles, which are pixel based images (rasters) of maps that contain geographical data. This means that each pixel of a map tile has been georeferenced, or assigned a coordinate based on the location that they represent.  When you zoom in and out of a web map, you are getting a whole new set of tiles to display at each zoom level. GeoJSON (which you are now familiar with) is a widely used data standard for web mapping.  In our example, we are using an open-source Javascript library called <ref target="https://leafletjs.com/reference.html">Leaflet</ref> to help us build our web map. The benefits of using an open-source library such as Leaflet is the flexibility you get and with developing and customizing your map, without worry of the technology being deprecated or no longer supported that is beyond your control.  With frameworks like Leaflet or Google Maps Javascript API, you're not building a map completely from scratch, rather, you're using pre-written functions and controls that helps you customize your own map in code.</p>
<p>Lets go through what each part of the code is doing. But first, it's best practice to maintain your html, css, js in different files so that the web map's content, presentation and behaviour layers are kept separate (though it's not always possible). This adds a bit more structure to your code, making it easier for you and others to understand. It will be easier to focus on certain parts of the code when you're going back and making changes. So here is our code split into three files:</p>
<p>mymap.html</p>
<ab><code xml:id="code_mapping-with-python-leaflet_17" corresp="code_mapping-with-python-leaflet_17.txt" lang="language-html" rend="block"/></ab>
<p>style.css</p>
<ab><code xml:id="code_mapping-with-python-leaflet_18" corresp="code_mapping-with-python-leaflet_18.txt" lang="language-css" rend="block"/></ab>
<p>leafletmap.js</p>
<ab><code xml:id="code_mapping-with-python-leaflet_19" corresp="code_mapping-with-python-leaflet_19.txt" lang="language-javascript" rend="block"/></ab>
<p>Seems a bit easier to undestand now, doesn't it? Now lets look at what the html file is doing.</p>
<div type="5"><head>mymap.html walkthrough</head>
<p>mymap.html</p>
<ab><code xml:id="code_mapping-with-python-leaflet_20" corresp="code_mapping-with-python-leaflet_20.txt" lang="language-html" rend="block"/></ab>
<p>The above code is the first section, or header of your html document. We are linking to the external javascript library and css stylesheets provided by leaflet.  We're also linking to our own stylesheet, style.css.</p>
<ab><code xml:id="code_mapping-with-python-leaflet_21" corresp="code_mapping-with-python-leaflet_21.txt" lang="language-html" rend="block"/></ab>
<p>Next, we're declaring the body and where you want the map to go on your page. We're also linking to our own javascript file, leafletmap.js.</p>
</div><div type="5"><head>style.css walkthrough</head>
<p>style.css</p>
<ab><code xml:id="code_mapping-with-python-leaflet_22" corresp="code_mapping-with-python-leaflet_22.txt" lang="language-css" rend="block"/></ab>
<p>There's a bit of CSS styling here to specify the size of your map. Some optional styling will happen in your javascript file if you're using the Leaflet library.</p>
</div><div type="5"><head>leafletmap.js walkthrough</head>
<p>leafletmap.js</p>
<ab><code xml:id="code_mapping-with-python-leaflet_23" corresp="code_mapping-with-python-leaflet_23.txt" lang="language-javascript" rend="block"/></ab>
<p>The javascript file is what provides the behaviour, or functionality of our web map. It's what makes our web map come alive! In the code above, we're telling the javascript to load when the browser loads. We're creating our first map layer, which is your basemap.  The basemap is the tiles provided by OpenStreetMap that provides places and streetnames found on maps.</p>
<ab><code xml:id="code_mapping-with-python-leaflet_24" corresp="code_mapping-with-python-leaflet_24.txt" lang="language-javascript" rend="block"/></ab>
<p>Next, we're loading our data as another map layer, <code rend="inline">census.geojson</code>.  This data will have additional properties: each point of data is represented by an icon. It will look and behave like a popup so that when you click on the icon it will load information from your data file (in this case, the Area_Name).</p>
<ab><code xml:id="code_mapping-with-python-leaflet_25" corresp="code_mapping-with-python-leaflet_25.txt" lang="language-javascript" rend="block"/></ab>
<p>Now we're creating the view for our map.  The boundary for our map will be based on the range of our data points in <code rend="inline">census.geojson</code>.  You can also manually set your your viewport by using the <ref target="https://leafletjs.com/reference.html#map-set-methods">setView property</ref>. For example, if you're using <code rend="inline">.setView([0.0,-10.0], 2)</code> , the viewport coordinates '[0.0,-10.0], 2' means that you're setting the centre of the map to be 0.0, -10.0 and at a zoom level of 2.</p>
<figure><desc>My Web Map</desc><graphic url="webmap-03-result.jpg"/></figure>
<p>Finally, the map layers you created will be added to your map. Put it all together and hurrah, you've got your web map!  Now lets play around with it. The following five exercises give you tasks to do to learn some of the other elements, with answers provided.</p>
</div></div><div type="4"><head>Exercise 1: Default Viewports</head>
<p>Let's change the map to use a viewport to 51.505 latitude, -0.09 longitude with a zoom level 9. To do this, we just need to edit one file: <code rend="inline">leafletmap.js</code>.</p>
<ab><code xml:id="code_mapping-with-python-leaflet_26" corresp="code_mapping-with-python-leaflet_26.txt" lang="language-javascript" rend="block"/></ab>
<p>What we've done there is changed the <code rend="inline">.fitBounds</code> to <code rend="inline">.setView</code>, with the various options mentioned above. Try reloading the file, and you'll see it loads to the correct place.</p>
<figure><desc>Exercise 01</desc><graphic url="webmap-05-exercise01.jpg"/></figure>
</div><div type="4"><head>Exercise 2: Marker Properties</head>
<p>Now let's add the 2001, 1981 and 1991 population property to each marker popup. You can use HTML to style your popup window. To do so, we again need to edit the javascript.</p>
<ab><code xml:id="code_mapping-with-python-leaflet_27" corresp="code_mapping-with-python-leaflet_27.txt" lang="language-javascript" rend="block"/></ab>
<p>What we've done here is edit the <ref target="http://leafletjs.com/SlavaUkraini/reference-1.2.0.html#geojson-oneachfeature">onEachFeature function</ref>, which gets called for each feature (in this case, each marker popup) to add additional information about each marker contained in our <code rend="inline">census.geojson</code> data. To add attribute information from our <code rend="inline">census.geojson</code> file, we use the convention <code rend="inline">feature.properties.ATTRIBUTE_NAME</code> to access the population data. In this case, we are adding <code rend="inline">feature.properties.Pop_2001</code>, <code rend="inline">feature.properties.Pop_1981</code>, and <code rend="inline">feature.properties.Pop_1801</code>, and adding a bit of styling with html for readability.</p>
<figure><desc>Exercise 02</desc><graphic url="webmap-06-exercise02.jpg"/></figure>
</div><div type="4"><head>Exercise 3: Change Data Source</head>
<p>Change the data source to a different dataset, as an example you can use the <ref target="/assets/mapping-with-python-leaflet/exercises/exercise03/stations.geojson">stations.geojson</ref> file.</p>
<p>To do this, we need to edit the javascript file.</p>
<ab><code xml:id="code_mapping-with-python-leaflet_28" corresp="code_mapping-with-python-leaflet_28.txt" lang="language-javascript" rend="block"/></ab>
<p>Since we're loading a new dataset, we need a new view for our map. First, we've replaced <code rend="inline">census.geojson</code> with <code rend="inline">stations.geojson</code> to our $getJSON request. Next, we add the attribute information found in our <code rend="inline">stations.geojson</code> file, including the name (<code rend="inline">feature.properties.name</code>) and line (<code rend="inline">features.properties.line</code>). Finally, we are using the <code rend="inline">.fitBounds</code> function so that the viewport automatically centers on our new set of data points.</p>
<figure><desc>Exercise 03</desc><graphic url="webmap-07-exercise03.jpg"/></figure>
</div><div type="4"><head>Exercise 4: Custom Basemap</head>
<p>Change your data source back to <code rend="inline">census.geojson</code>. Change your basemap layer to a mapbox tileset.  You need to get a Mapbox account, create a map or style and get your Mapbox API access token.</p>
<figure><desc>Mapbox API</desc><graphic url="webmap-04-mapboxAPI.png"/></figure>
<p>First, you will need to add a reference to the mapbox javascript and css libraries:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_29" corresp="code_mapping-with-python-leaflet_29.txt" lang="language-html" rend="block"/></ab>
<p>Then we edit the javascript file:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_30" corresp="code_mapping-with-python-leaflet_30.txt" lang="language-javascript" rend="block"/></ab>
<p>In the javascript file, we've added our mapbox token in order to access the mapbox API that allows us to access the mapbox basemap that we want to use. Your final result (with your own basemap of choice) should look something like this:</p>
<figure><desc>Exercise 04</desc><graphic url="webmap-08-exercise04.jpg"/></figure>
</div><div type="4"><head>Exercise 5: Custom Marker Icon</head>
<p>Add a custom leaf icon, as an example you can use <ref target="/assets/mapping-with-python-leaflet/exercises/exercise05/leaf.png">leaf.png</ref>. Or use your own!</p>
<p>In this exercise, we only need to edit the javascript file:</p>
<ab><code xml:id="code_mapping-with-python-leaflet_31" corresp="code_mapping-with-python-leaflet_31.txt" lang="language-javascript" rend="block"/></ab>
<p>Marker icons are defined in leaflet using the <code rend="inline">L.icon</code> object. We specify the image are using to replace our marker by using the property <code rend="inline">iconUrl</code>. Make sure that you specify the proper path to your image.  We specified a few additional properties, such as iconSize (dimensions of the icon in pixels), iconAnchor (coordinates of the icon which will correspond to marker's location), popupAnchor (coordinates from which the popup should open relative to the iconAnchor). Check out the <ref target="https://leafletjs.com/reference.html#icon">Icon Leaflet documentation</ref> more information about <code rend="inline">L.Icon</code> properties.</p>
<p>The final map should look something like this:</p>
<figure><desc>Exercise 05</desc><graphic url="webmap-09-exercise05.jpg"/></figure>
</div></div><div type="3"><head>Next Steps</head>
<p>Congratulations! You now have some hands-on experience geocoding using common Python data analysis libraries and working with one of the most popular Javascript web mapping libraries out there.</p>
<p>If you want to explore other web mapping features with Leaflet, there are a number of additional <ref target="https://leafletjs.com/plugins.html">plugins</ref> to try out. Of particular interest may be ability to create <ref target="https://github.com/skeate/Leaflet.timeline">time based visualizations</ref> and do <ref target="https://github.com/pa7/heatmap.js">heat-mapping</ref>.</p>
<p>Also, check out the Programming Historian Lesson <ref target="/lessons/using-javascript-to-create-maps">Using Javascript to Create Maps of Correspondence</ref> that goes in depth on how to analyze correspondence using geospatial software, and using some of the same tools as this lesson.</p>
</div></div>
    </body>
  </text>
</TEI>
