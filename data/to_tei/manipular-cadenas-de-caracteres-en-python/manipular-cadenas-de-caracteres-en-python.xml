<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="manipular-cadenas-de-caracteres-en-python">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Manipular cadenas de caracteres en Python</title>
  <author role="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor role="reviewers">Jim Clifford</editor><author role="translators">V&#237;ctor Gayol</author><editor role="translation-reviewers"><persName>Jairo A. Melo</persName><persName>Maria Jos&#233; Afanador-Llach</persName><persName>Antonio Rojas Castro</persName></editor><editor role="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phes0018</idno><date type="published">07/17/2012</date><date type="translated">03/15/2017</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#manipulating-strings-in-python"/>.</p><p>There are other translations: <ref target="#manipular-strings-python #manipuler-chaines-caracteres-python"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Esta lecci&#243;n es una r&#225;pida introducci&#243;n a t&#233;cnicas de manipulaci&#243;n de cadenas de caracteres (o strings) en Python.</p></abstract><textClass><keywords><term xml:lang="en">python</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="es">
    <body>
      <div type="2"><head>Objetivos de la lecci&#243;n</head>
<p>Esta lecci&#243;n es una r&#225;pida introducci&#243;n a t&#233;cnicas de manipulaci&#243;n de <ref target="https://es.wikipedia.org/wiki/Cadena_de_caracteres">cadenas de caracteres</ref> (o <emph>strings</emph>) en Python. Saber c&#243;mo manipular cadenas de caracteres juega un papel fundamental en la mayor&#237;a de las tareas de procesamiento de texto. Si quieres experimentar con las siguientes lecciones puedes escribir y ejecutar peque&#241;os programas tal como lo hicimos en lecciones previas, o puedes abrir tu int&#233;rprete de comandos de Python / Terminal para probarlos ah&#237;.</p>
</div>
      <div type="2"><head>Manipular cadenas de caracteres en Python</head>
<p>Si has estado expuesto antes a otro lenguaje de programaci&#243;n, sabr&#225;s que necesitas <emph>declarar</emph> o <emph>escribir</emph> variables antes de que puedas almacenar cualquier cosa en ellas. Esto no es necesario cuando trabajas con cadenas de caracteres en Python. Podemos crear una cadena de caracteres simplemente encerrando contenido entre comillas despu&#233;s de un signo de igual (=).</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_0" corresp="code_manipular-cadenas-de-caracteres-en-python_0.txt" lang="language-python" rend="block"/></ab>
</div>
      <div type="2"><head>Operadores de cadenas de caracteres: adici&#243;n y multiplicaci&#243;n</head>
<p>Una cadena de caracteres en un objeto que consiste precisamente en una serie de signos o caracteres. Python sabe c&#243;mo tratar un n&#250;mero de representaciones poderosas y de prop&#243;sito general, incluidas las cadenas de caracteres. Una forma de manipular cadenas de caracteres es utilizar <emph>operadores de cadenas de caracteres</emph>. Dichos operadores se representan con s&#237;mbolos que asociamos a las matem&#225;ticas, como +, -, *, / y =. Estos signos realizan acciones similares a sus contrapartes matem&#225;ticas cuando se usan con las cadenas de carateres, aunque no iguales.</p>
<div type="3"><head>Concatenar</head>
<p>Este t&#233;rmino significa juntar cadenas de caracteres. El proceso de <emph>concatenaci&#243;n</emph> se realiza mediante el operador de suma (+). Ten en cuenta que debes marcar expl&#237;citamente d&#243;nde quieres los espacios en blanco y colocarlos entre comillas.</p>
<p>En este ejemplo, la cadena de caracteres "mensaje1" tiene el contenido "Hola Mundo"</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_1" corresp="code_manipular-cadenas-de-caracteres-en-python_1.txt" lang="language-python" rend="block"/></ab>
</div><div type="3"><head>Multiplicar</head>
<p>Si quieres varias copias de una cadena de caracteres utiliza el operador de multiplicaci&#243;n (*). En este ejemplo, la cadena de caracteres <emph>mensaje2a</emph> lleva el contenido "Hola" tres veces, mientras que la cadena de caracteres <emph>mensaje2b</emph> tiene el contenido "Mundo". Ordenemos imprimir las dos cadenas.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_2" corresp="code_manipular-cadenas-de-caracteres-en-python_2.txt" lang="language-python" rend="block"/></ab>
</div><div type="3"><head>A&#241;adir</head>
<p>&#191;Qu&#233; pasa si quieres a&#241;adir material de manera sucesiva al final de una cadena de caracteres? El operador especial para ello es compuesto (+=).</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_3" corresp="code_manipular-cadenas-de-caracteres-en-python_3.txt" lang="language-python" rend="block"/></ab>
</div></div>
      <div type="2"><head>M&#233;todos para cadenas de caracteres: buscar, cambiar</head>
<p>En adici&#243;n a los operadores, Python trae preinstalado docenas de m&#233;todos que te permiten hacer cosas con las cadenas de caracteres. Solos o en combinaci&#243;n, los m&#233;todos pueden hacer casi todo lo que te imagines con las cadenas de caracteres. Puedes usar como referencia la lista de m&#233;todos de cadenas de caracteres (<emph>String Methods</emph>) en el <ref target="https://docs.python.org/2/library/stdtypes.html#string-methods">sitio web de Python</ref>, que incluye informaci&#243;n de c&#243;mo utilizar correctamente cada uno. Para asegurar que tengas una comprensi&#243;n b&#225;sica de m&#233;todos para cadenas de caracteres, lo que sigue es una breve descripci&#243;n de los utilizados m&#225;s com&#250;nmente.</p>
<div type="3"><head>Extensi&#243;n</head>
<p>Puedes determinar el n&#250;mero de caracteres en una cadena utilizando el m&#233;todo <code rend="inline">len</code>. Acu&#233;rdate que los espacios en blanco cuentan como un car&#225;cter.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_4" corresp="code_manipular-cadenas-de-caracteres-en-python_4.txt" lang="language-python" rend="block"/></ab>
</div><div type="3"><head>Encontrar</head>
<p>Puedes buscar una sub-cadena en una cadena de caracteres utilizando el m&#233;todo <code rend="inline">find</code> y tu programa te indicar&#225; el &#237;ndice de inicio de la misma. Esto es muy &#250;til para procesos que veremos m&#225;s adelante. Ten en mente que los &#237;ndices est&#225;n numerados de izquierda a derecha y que el n&#250;mero en el que se comienza a contar la posici&#243;n es el 0, no el 1.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_5" corresp="code_manipular-cadenas-de-caracteres-en-python_5.txt" lang="language-python" rend="block"/></ab>
<p>Si la sub-cadena no est&#225; presente el programa imprimir&#225; el valor -1.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_6" corresp="code_manipular-cadenas-de-caracteres-en-python_6.txt" lang="language-python" rend="block"/></ab>
</div><div type="3"><head>Min&#250;sculas</head>
<p>A veces es &#250;til convertir una cadena de caracteres a min&#250;sculas. Para ello se utiliza el m&#233;todo <code rend="inline">lower</code>. Por ejemplo, al uniformar los caracteres permitimos que la computadora reconozca f&#225;cilmente que "Algunas Veces" y "algunas veces" son la misma frase.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_7" corresp="code_manipular-cadenas-de-caracteres-en-python_7.txt" lang="language-python" rend="block"/></ab>
<p>Convertir las min&#250;sculas en may&#250;sculas se logra cambiando <code rend="inline">.lower()</code> por <code rend="inline">upper()</code>.</p>
</div><div type="3"><head>Reemplazar</head>
<p>Si necesitas cambiar una sub-cadena de una cadena se puede utilizar el m&#233;todo <code rend="inline">replace</code>.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_8" corresp="code_manipular-cadenas-de-caracteres-en-python_8.txt" lang="language-python" rend="block"/></ab>
</div><div type="3"><head>Cortar</head>
<p>Si quieres <code rend="inline">cortar</code> partes que no quieras del principio o del final de la cadena de caracteres, lo puedes hacer creando una sub-cadena. El mismo tipo de t&#233;cnica te permite separar una cadena muy larga en componentes m&#225;s manejables.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_9" corresp="code_manipular-cadenas-de-caracteres-en-python_9.txt" lang="language-python" rend="block"/></ab>
<p>Puedes sustituir las variables por n&#250;meros enteros como en este ejemplo:</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_10" corresp="code_manipular-cadenas-de-caracteres-en-python_10.txt" lang="language-python" rend="block"/></ab>
<p>Esto hace mucho m&#225;s simple usar este m&#233;todo en conjunci&#243;n con el m&#233;todo <code rend="inline">find</code> como en el pr&#243;ximo ejemplo, que busca la letra "d" en los seis primeros caracteres de "Hola Mundo" y correctamente nos dice que no se encuentra ah&#237; (-1). Esta t&#233;cnica es mucho m&#225;s eficaz en cadenas largas -documentos enteros, por ejemplo. Observa que la ausencia de un n&#250;mero entero antes de los dos puntos significa que queremos empezar desde el principio de la cadena. Podemos usar la misma t&#233;cnica para decirle al programa que pase hasta el final de la cadena de caracteres dejando vac&#237;o despu&#233;s de los dos puntos. Y recuerda que la posici&#243;n del &#237;ndice empieza a contar desde 0, no desde 1.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_11" corresp="code_manipular-cadenas-de-caracteres-en-python_11.txt" lang="language-python" rend="block"/></ab>
<p>Hay muchos m&#225;s, pero los m&#233;todos para cadenas de caracteres anteriores son un buen comienzo. F&#237;jate que en el ejemplo anterior utilizamos corchetes en vez de par&#233;ntesis. Esta diferencia en los s&#237;mbolos de la <emph>sintaxis</emph> es muy importante. Los par&#233;ntesis en Python son utilizados generalmente para <emph>llevar un argumento</emph> a una funci&#243;n. De tal manera que cuando vemos algo como:</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_12" corresp="code_manipular-cadenas-de-caracteres-en-python_12.txt" lang="language-python" rend="block"/></ab>
<p>quiere decir que se lleva la cadena de caracteres "mensaje7" a la funci&#243;n <code rend="inline">len</code> y entonces enviar el valor resultante de esa funci&#243;n a la declaraci&#243;n <code rend="inline">print</code> para ser impresa. Una funci&#243;n puede ser llamada sin un argumento, pero de todas formas tienes que incluir un par de par&#233;ntesis vac&#237;os despu&#233;s del nombre de la funci&#243;n. Vimos un ejemplo de ello tambi&#233;n.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_13" corresp="code_manipular-cadenas-de-caracteres-en-python_13.txt" lang="language-python" rend="block"/></ab>
<p>Esta declaraci&#243;n le dice a Python que aplique la funci&#243;n <code rend="inline">lower</code> a la cadena <emph>mensaje7</emph> y guarde el valor resultante en la cadena <emph>mensaje7a</emph>.</p>
<p>Los corchetes sirven para prop&#243;sitos diferentes. La cadena es una secuencia de caracteres; as&#237; que si quieres acceder al contenido de la cadena a partir de su posici&#243;n en la secuencia, tienes que indicarle a Python un lugar en la secuencia. Eso es lo que hacen los corchetes: se&#241;alan el lugar del principio y del final de la secuencia, tal y como vimos en el m&#233;todo <code rend="inline">cortar</code>.</p>
</div><div type="3"><head>Secuencias de escape</head>
<p>&#191;Qu&#233; haces cuando necesitas incluir comillas en una cadena de caracteres? No quieres que el int&#233;rprete de Python se equivoque y piense que la cadena termina en donde se encuentre una comilla. En Python puedes poner una barra invertida (\) enfrente de la comilla para que no acabe ah&#237; la cadena. Esto es conocido como secuencia de escape.</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_14" corresp="code_manipular-cadenas-de-caracteres-en-python_14.txt" lang="language-python" rend="block"/></ab>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_15" corresp="code_manipular-cadenas-de-caracteres-en-python_15.txt" lang="language-python" rend="block"/></ab>
<p>Otras dos secuencias de escape te permiten incluir marcas de tabulaci&#243;n (t) y saltos de l&#237;nea (n):</p>
<ab><code xml:id="code_manipular-cadenas-de-caracteres-en-python_16" corresp="code_manipular-cadenas-de-caracteres-en-python_16.txt" lang="language-python" rend="block"/></ab>
</div></div>
      <div type="2"><head>Lecturas sugeridas</head>
<list type="unordered">
<item>
Lutz, <emph>Learning Python</emph><list type="unordered">
<item>Ch. 7: Strings</item>
<item>Ch. 8: Lists and Dictionaries</item>
<item>Ch. 10: Introducing Python Statements</item>
<item>Ch. 15: Function Basics</item>
</list>
</item>
</list>
<div type="3"><head>Sicronizaci&#243;n de c&#243;digo</head>
<p>Para seguir a lo largo de las lecciones futuras es importante que tengas los archivos correctos y programas en el directorio "programming-historian" de tu disco duro. Al final de cada lecci&#243;n puedes descargar el archivo zip "python-es-lecciones" para asegurarte que tienes el c&#243;digo correcto.</p>
<list type="unordered">
<item>python-es-lecciones1.zip (<ref target="/assets/python-es-lecciones1.zip">zip</ref>)</item>
</list>
</div></div>
    </body>
  </text>
</TEI>
