<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Miner&#237;a de datos en las colecciones del Internet Archive</title>
  <authors>Caleb McDaniel</authors>
  <date>2014-03-03</date>
  <translation_date>2017-10-07</translation_date>
  <reviewers>Adam Crymble</reviewers>
  <editors>William J. Turkel</editors>
  <translator>Jairo A. Melo</translator>
  <translation-editor>Antonio Rojas Castro</translation-editor>
  <translation-reviewer>Carlos Loz,Antonio Rojas Castro</translation-reviewer>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/59</review-ticket>
  <layout>lesson</layout>
  <difficulty>2</difficulty>
  <activity>acquiring</activity>
  <topics>web-scraping</topics>
  <original>data-mining-the-internet-archive</original>
  <redirect_from>/es/lessons/data-mining-the-internet-archive</redirect_from>
  <abstract>Las colecciones del Internet Archive incluyen una gran cantidad de fuentes hist&#243;ricas digitalizadas. Muchas de ellas contienen datos bibliogr&#225;ficos importantes en un formato llamado MARC. En esta lecci&#243;n aprender&#225;s a usar Python para automatizar la descarga de archivos MARC en grandes cantidades desde el Internet Archive, as&#237; como el an&#225;lisis sint&#225;ctico de archivos MARC con informaci&#243;n espec&#237;fica tal como autores, lugar de publicaci&#243;n y fechas. La lecci&#243;n puede aplicarse de una manera general para otros elementos del Internet Archive as&#237; como en archivos MARC en cualquier otro repositorio.
</abstract>
  <avatar_alt>Grabado de mineros trabajando en la construcci&#243;n de un t&#250;nel.</avatar_alt>
  <doi>10.46430/phes0019</doi>
</metadata>
  <text>
    <body>
      <div n="2"><head>Objetivos de la lecci&#243;n</head>
<p>Las colecciones del <link target="http://archive.org/">Internet Archive</link> (IA) incluyen muchas fuentes digitalizadas de inter&#233;s para los historiadores, entre las cuales se incluyen el <link target="https://archive.org/details/jstor_ejc">JSTOR Early Journal
Content</link>, la <link target="https://archive.org/details/johnadamsBPL">biblioteca personal de John Adams</link> y la <link target="https://archive.org/details/jcbhaiti">colecci&#243;n Hait&#237;</link> de la biblioteca John Carter Brown. En resumen, para citar al historiador-programador <link target="http://activehistory.ca/2013/09/the-internet-archive-rocks-or-two-million-plus-free-sources-to-explore/">Ian Milligan</link>, "The Internet Archive rocks."</p>
<p>En esta lecci&#243;n aprender&#225;s a descargar archivos desde esas colecciones usando un m&#243;dulo de Python dise&#241;ado espec&#237;ficamente para el an&#225;lisis sem&#225;ntico de registros MARC XML, un est&#225;ndar usado com&#250;nmente para dar formato a los metadatos bibliogr&#225;ficos.</p>
<p>Para fines demostrativos, esta lecci&#243;n se enfocar&#225; en trabajar con la versi&#243;n digitalizada de la <link target="http://archive.org/details/bplscas">Anti-Slavery Collection</link> de la Biblioteca P&#250;blica de Boston de Copley Square. Primero descargaremos una cantidad relativamente grande de registros MARC desde esa colecci&#243;n, luego, usaremos Python para recolectar y analizar la informaci&#243;n bibliogr&#225;fica asociada a los elementos en esta colecci&#243;n. Por ejemplo, al finalizar esta lecci&#243;n, ser&#225;s capaz de crear una lista con el nombre de cada lugar desde el cual las cartas de la <emph>Anti-Slavery Collection</emph> fueron escritas, la cual podr&#225;s utilizar posteriormente para un proyecto de creaci&#243;n de mapas o alg&#250;n otro tipo de an&#225;lisis.</p>
</div>
      <div n="2"><head>&#191;Para qui&#233;n es &#250;til esta lecci&#243;n?</head>
<p>Esta lecci&#243;n de nivel intermedio es &#250;til para los usuarios de <emph>Programming Historian</emph> que hayan completado las lecciones generales acerca de c&#243;mo descargar archivos y llevar a cabo an&#225;lisis de textos en ellos, o que quieran ejemplos aplicados de aquellos principios. Tambi&#233;n puede ser de inter&#233;s para historiadores o archivistas que trabajen regularmente con formato MARC o con el Internet Archive.</p>
</div>
      <div n="2"><head>Antes de empezar</head>
<p>Es necesario <link target="https://archive.org/account/login.createaccount.php">crear una cuenta</link> para poder esccribir <emph>scripts</emph> que interact&#250;en con el Internet Archive. Sigue los pasos necesarios para confirmar tu cuenta, con especial cuidado de tu cuenta de correo y  contrase&#241;a.</p>
<p>Trabajaremos con dos m&#243;dulos de Python que no est&#225;n incluidos en la librer&#237;a est&#225;ndar.</p>
<p>El primero, <link target="https://pypi.python.org/pypi/internetarchive">internetarchive</link>, provee acceso program&#225;tico al Internet Archive. El segundo, <link target="https://pypi.python.org/pypi/pymarc/">pymarc</link>, hace m&#225;s sencillo el an&#225;lisis  de los registros MARC.</p>
<p>La manera m&#225;s sencilla para descargarlos es mediante el uso de <code type="inline">pip</code>, el administrador de paquetes de Python. Comienza por instalar <code type="inline">pip</code> siguiendo la lecci&#243;n de Fred Gibbs: <link target="/es/lecciones/instalar-modulos-python-pip">Instalar m&#243;dulos de Python con pip</link>. Escribe lo siguiente en la l&#237;nea de comandos para instalar <code type="inline">internetarchive</code>:</p>
<pre><code class="language-bash" xml:id="code_mineria-de-datos-en-internet-archive_0" type="block" corresp="code_mineria-de-datos-en-internet-archive_0.txt"></code></pre>
<p>Ahora debes configurar tu ordenador de tal manera que el nuevo paquete funcione. Escribe <code type="inline">ia configure</code> en la l&#237;nea de comandos y despu&#233;s ingresa el nombre de la cuenta de correo y la contrase&#241;a con las que creaste tu cuenta en el Internet Archive.</p>
<p>Despu&#233;s instala <code type="inline">pymarc</code>:</p>
<pre><code class="language-bash" xml:id="code_mineria-de-datos-en-internet-archive_1" type="block" corresp="code_mineria-de-datos-en-internet-archive_1.txt"></code></pre>
<p>&#161;Ahora est&#225;s listo para trabajar!</p>
</div>
      <div n="2"><head>La Antislavery Collection en el Internet Archive</head>
<p>La Anti-Slavery Collection de la Biblioteca P&#250;blica de Boston en Copley Square contiene no solo las cartas de William Lloyd Garrison, uno de los personajes ic&#243;nicos en el movimiento abolicionista estadounidense; tambi&#233;n custodia una inmensa colecci&#243;n de cartas enviadas y recibidas por los reformadores conectados de alguna manera con su persona. Y por "inmensa colecci&#243;n" me refiero a gigantesca. De acuerdo con los c&#225;lculos de la biblioteca hay m&#225;s de 16 000 elementos en Copley.</p>
<p>En el momento de escribir esta lecci&#243;n, aproximadamente 7 000 de aquellos elementos hab&#237;an sido digitalizados y subidos al <link target="http://archive.org/">Internet Archive</link>. Esta es una buena noticia, no solo porque IA est&#233; comprometido en poner sus considerables recursos culturales para la libre consulta, tambi&#233;n porque cada elemento incorporado est&#225; acompa&#241;ado por una riqueza de metadatos apropiada para la lectura por parte del ordenador.</p>
<p>Consulta <link target="http://archive.org/details/lettertowilliaml00doug">esta carta</link> enviada por Frederick Douglass a William Lloyd
Garrison. Cualquiera puede leer el <link target="http://archive.org/stream/lettertowilliaml00doug/39999066767938#page/n0/mode/2up">manuscrito original</link> en l&#237;nea sin hacer el viaje a Boston, y solo eso ser&#237;a suficiente para revolucionar y democratizar la futura historiograf&#237;a del abolicionismo. Pero puedes, tambi&#233;n, descargar <link target="http://archive.org/download/lettertowilliaml00doug">m&#250;ltiples archivos</link> asociados con la carta, que ha sido enriquecida con metadatos, como un registro <link target="http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_dc.xml">Dublin Core</link> y un completo registro <link target="http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_marc.xml">MARCXML</link> que usa el <link target="http://www.loc.gov/marc/bibliographic/">formato MARC 21 de la Biblioteca del Congreso para datos bibliogr&#225;ficos</link>.</p>
<p>Detente y piensa por un momento: ahora mismo, cada elemento subido a la colecci&#243;n contiene esas cosas, lo cual significa que los historiadores tienen acceso a metadatos enriquecidos, im&#225;genes completas y descripciones parciales de <link target="http://archive.org/search.php?query=collection%3Abplscas&amp;sort=-publicdate">cientos de cartas, manuscritos y  publicaciones antiesclavistas</link>.</p>
</div>
      <div n="2"><head>Acceder a una colecci&#243;n del IA con Python</head>
<p>Todas las colecciones y archivos del Internet Archive (IA) tienen un identificador &#250;nico, por lo cual todas las URL de las colecciones y archivos se ven as&#237;:</p>
<pre><code xml:id="code_mineria-de-datos-en-internet-archive_2" type="block" corresp="code_mineria-de-datos-en-internet-archive_2.txt"></code></pre>
<p>Por ejemplo, esta es una URL al elemento mencionado arriba, la carta de Douglass a Garrison:</p>
<pre><code xml:id="code_mineria-de-datos-en-internet-archive_3" type="block" corresp="code_mineria-de-datos-en-internet-archive_3.txt"></code></pre>
<p>Y esta es la URL a la Anti-Slavery Collection de la Biblioteca P&#250;blica de Boston:</p>
<pre><code xml:id="code_mineria-de-datos-en-internet-archive_4" type="block" corresp="code_mineria-de-datos-en-internet-archive_4.txt"></code></pre>
<p>Debido a que estas URL son tan similares, la &#250;nica manera de distinguir si se est&#225; consultando la p&#225;gina de una colecci&#243;n, en lugar de la de un elemento particular, consiste en examinar la distribuci&#243;n (<emph>layout</emph>) de la p&#225;gina. <emph>La p&#225;gina de un elemento contiene una previsualizaci&#243;n del libro en la cabecera de la p&#225;gina</emph> y en la columna derecha un listado de enlaces para descargar el archivo en otros formatos. <emph>La p&#225;gina de una colecci&#243;n despliega una galer&#237;a de miniaturas y una serie de opciones para refinar la b&#250;squeda en la columna izquierda</emph>. Puedes navegar por diferentes colecciones a trav&#233;s del portal <link target="https://archive.org/details/texts">eBook and Texts</link>. Tambi&#233;n querr&#225;s leer algo acerca de c&#243;mo los <link target="http://blog.archive.org/2011/03/31/how-archive-org-items-are-structured/">elementos y sus URL est&#225;n estructurados</link>.</p>
<p>Una vez que tengas el identificador de una colecci&#243;n &#8212;<code type="inline">bplscas</code> en este caso&#8212; ver todos los elementos de la colecci&#243;n es tan sencillo como navegar a la p&#225;gina de <link target="https://archive.org/advancedsearch.php">b&#250;squeda avanzada</link> del IA, seleccionar la <emph>id</emph> del men&#250; desplegable junto a <emph>Collection</emph>, y hacer clic en el bot&#243;n de b&#250;squeda <emph>Search</emph>. Al seleccionar <code type="inline">bplscas</code> en al b&#250;squeda se obtiene <link target="https://archive.org/search.php?query=collection%3A%28bplscas%29">esta p&#225;gina</link>, que al momento de escribir esta lecci&#243;n mostraba 7 029 resultados.</p>
<p>Tambi&#233;n podemos <link target="http://internetarchive.readthedocs.io/en/latest/quickstart.html#searching">buscar en el Internet Archive usando el m&#243;dulo de Python que instalamos</link>: al hacerlo es m&#225;s f&#225;cil iterar sobre todos los elementos de la colecci&#243;n con el prop&#243;sito de realizar posteriores inspecciones y descargas.</p>
<p>Por ejemplo, vamos a modificar el c&#243;digo de ejemplo de la documentaci&#243;n del m&#243;dulo con el fin de ver si podemos saber, con Python, cu&#225;ntos elementos hay en la Anti-Slavery Collection. El c&#243;digo de ejemplo luce similar al que ves debajo. La &#250;nica diferencia es que en lugar de importar tan solo los m&#243;dulos <code type="inline">search_items</code> desde <code type="inline">internetarchive</code> vamos a importar la totalidad de la biblioteca.</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_5" type="block" corresp="code_mineria-de-datos-en-internet-archive_5.txt"></code></pre>
<p>Todo lo que debemos hacer consiste en modificar el identificador de la colecci&#243;n: de <code type="inline">nasa </code> a <code type="inline">bplscas</code>. Despu&#233;s de iniciar el int&#233;rprete del ordenador intenta ingresar cada una de las l&#237;neas anteriores seguidas por <emph>Enter</emph>, pero modificando el <emph>id</emph> de la colecci&#243;n en el segundo comando:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_6" type="block" corresp="code_mineria-de-datos-en-internet-archive_6.txt"></code></pre>
<p>Despu&#233;s de pulsar <emph>Enter</emph> en el comando de impresi&#243;n deber&#237;as ser capaz de ver un n&#250;mero que corresponde con la cantidad de resultados que ver&#237;as al hacer una <link target="http://archive.org/search.php?query=collection%3Abplscas">b&#250;squeda avanzada en una colecci&#243;n</link> [] desde el navegador.</p>
</div>
      <div n="2"><head>Aceder a un elemento del IA en Python</head>
<p>El m&#243;dulo <code type="inline">internetarchive</code> tambi&#233;n permite acceder a elementos individuales mediante el uso de sus identificadores. Probemos modificando el <link target="http://internetarchive.readthedocs.io/en/latest/quickstart.html#downloading">c&#243;digo de ejemplo de la documentaci&#243;n del m&#243;dulo</link> de tal manera que obtengamos la carta de Douglass que discutimos anteriormente.</p>
<p>Si est&#225;s todav&#237;a en el int&#233;rprete de comandos de Python no necesitas declarar <code type="inline">import internetarchive</code> de nuevo. Como ya hemos importado el m&#243;dulo completo tan s&#243;lo necesitamos modificar el c&#243;digo de ejemplo para que nuestro int&#233;rprete sepa que <code type="inline">get_item</code> pertenece al m&#243;dulo <code type="inline">internetarchive</code>. Tambi&#233;n necesitamos modificar el identificador de ejemplo <code type="inline">stairs</code> por nuestro identificador del elemento, <emph>lettertowilliaml00doug</emph> (n&#243;tese que el car&#225;cter entre los dos ceros es una L min&#250;scula, no el n&#250;mero 1):</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_7" type="block" corresp="code_mineria-de-datos-en-internet-archive_7.txt"></code></pre>
<p>Copia cada una de esas l&#237;neas en tu int&#233;rpete seguidas por <emph>Enter</emph>. Seg&#250;n la velocidad de tu conexi&#243;n a Internet tomar&#225; aproximadamente un minuto o dos para que el int&#233;rprete de comandos retorne, esto se debe a que tu ordenador se encuentra descargando todos los archivos asociados a ese elemento, incluyendo algunas im&#225;genes muy pesadas. Cuando se haya descargado podr&#225;s ver una nueva carpeta en tu ordenador cuyo nombre es el mismo del identificador del elemento. Para verificarlo, primero sal de tu int&#233;rprete de Python:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_8" type="block" corresp="code_mineria-de-datos-en-internet-archive_8.txt"></code></pre>
<p>A continuaci&#243;n puedes listar los contenidos del directorio presente para corroborar que ahora existe una carpeta llamada <code type="inline">lettertowilliaml00doug</code>. Si despliegas el contenido de esa carpeta podr&#225;s ver una lista similar a esta:</p>
<pre><code xml:id="code_mineria-de-datos-en-internet-archive_9" type="block" corresp="code_mineria-de-datos-en-internet-archive_9.txt"></code></pre>
<p>Ahora que sabemos c&#243;mo usar las funciones <emph>Search</emph> y <emph>Item</emph> en el
m&#243;dulo <code type="inline">internetarchive</code> podemos pensar en c&#243;mo llevar a cabo este proceso de manera m&#225;s eficaz para descargar grupos de informaci&#243;n desde las colecciones para un posterior an&#225;lisis.</p>
</div>
      <div n="2"><head>Descargar los registros MARC de una colecci&#243;n</head>
<p>Descargar un elemento est&#225; bien, pero &#191;y si queremos revisar miles de elementos en una colecci&#243;n? Estamos de suerte, porque la funci&#243;n <emph>Search</emph> del m&#243;dulo <code type="inline">internetarchive</code> nos permite iterar sobre todos los resultados de una b&#250;squeda.</p>
<p>Para ver c&#243;mo, comencemos iniciando nuevamente el int&#233;rprete de Python. Necesitaremos importar una vez m&#225;s nuestro m&#243;dulo y hacer de nuevo una b&#250;squeda:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_10" type="block" corresp="code_mineria-de-datos-en-internet-archive_10.txt"></code></pre>
<p>Ahora escribamos el c&#243;digo de ejemplo de la documentaci&#243;n para imprimir (<emph>print</emph>) los identificadores de cada uno de los elementos encontrados en la b&#250;squeda:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_11" type="block" corresp="code_mineria-de-datos-en-internet-archive_11.txt"></code></pre>
<p>N&#243;tese que, despu&#233;s de ingresar la primera l&#237;nea, tu int&#233;prete de Python imprimir&#225; puntos suspensivos autom&#225;ticamente en la l&#237;nea dos: esto se debe a que iniciaste un bucle (<emph>for loop</emph>) y Python espera que haya m&#225;s. El int&#233;rprete intenta saber lo que quieres conocer de cada resultado de b&#250;squeda, por ello, una vez que des <emph>Enter</emph> en la segunda l&#237;nea ver&#225;s una tercera con otros puntos suspensivos, esto se debe a que Python no sabe cu&#225;ndo has terminado de decirle qu&#233; hacer con cada resultado. Haz clic en <emph>Enter</emph> una vez m&#225;s para finalizar el bucle y ejecutar el comando.</p>
<p>Deber&#237;as ver entonces que tu terminal empieza a imprimir los identificadores de cada resultado obtenido de nuestro <emph>buscar en bplscas</emph>--(en este caso, &#161;de todos los 7 029 elementos!) Puedes interrumpir la impresi&#243;n pulsando <code type="inline">ctrl-c</code> en tu teclado, lo cual te regresar&#225; al int&#233;rprete de comandos.</p>
<p>Si en lugar de ver los identificadores imprimi&#233;ndose en tu pantalla observas un mensaje de error como el siguiente, tal vez hayas olvidado ingresar algunos espacios en tu int&#233;rprete de comandos:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_12" type="block" corresp="code_mineria-de-datos-en-internet-archive_12.txt"></code></pre>
<p>Recuerda que los espacios en blanco cuentan en Python y necesitas indentar las l&#237;neas en un <emph>for loop</emph> para que Python pueda saber qu&#233; comandos ejecutar en cada elemento del bucle.</p>
</div>
      <div n="2"><head>Entender el bucle <emph>for</emph></head>
<p>El bucle <emph>for</emph>, explicado de manera simple, le dice a Python que debe hacer algo en cada cosa dentro de un grupo de cosas. En el ejemplo anterior, hemos impreso el identificador para cada producto dentro de los resultados de la b&#250;squeda hecha en nuestra colecci&#243;n. Dos consideraciones adicionales acerca del bucle <emph>for</emph>:</p>
<p>Primero, la palabra que usamos antes de <code type="inline">for</code> es denominada en Python <emph>variable local</emph> (<emph>local variable</emph>) y funciona como un marcador de posici&#243;n para cualquier instancia o elemento con el cual vayamos a trabajar dentro del bucle. En general, tiene sentido escoger un nombre que describa el tipo de cosa con la que estemos trabajando (en este caso, un resultado de b&#250;squeda) pero podemos utilizar otros nombres en su lugar. Por ejemplo, intenta ejecutar el bucle anterior de nuevo pero esta vez substituye la variable local por otro nombre como:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_13" type="block" corresp="code_mineria-de-datos-en-internet-archive_13.txt"></code></pre>
<p>Obtendr&#225;s los mismos resultados.</p>
<p>Lo segundo que deber&#225;s tener en cuenta acerca del bucle <emph>for</emph> es que puede contener otros comandos en el bloque indentado. En este caso, hemos impreso cada identificador para cada resultado de b&#250;squeda, pero podr&#237;amos elegir qu&#233; hacer para cada resultado, cualquier cosa que podemos hacer con un elemento individual del <emph>Internet Archive</emph>.</p>
<p>Por ejemplo, anteriormente descargamos todos los archivos asociados con el elemento <emph>lettertowilliaml00doug.</emph> Podr&#237;amos haber hecho lo mismo para cada elemento de nuestra b&#250;squeda si cambi&#225;ramos la l&#237;nea <code type="inline">print resultado['identifier']</code> por <code type="inline">resultado.download()</code> en nuestro bucle <emph>for</emph>.</p>
<p>Probablemente sea mejor pensarlo dos veces antes de hacer algo as&#237; (descargar todos los archivos de cada uno de los 7 029 elementos de la colecci&#243;n <code type="inline">bplscas</code> representa un mont&#243;n de archivos). Afortunadamente, la funci&#243;n <emph>download</emph> en el m&#243;dulo <code type="inline">internetarchive</code> permite <link target="http://internetarchive.readthedocs.io/en/latest/quickstart.html#downloading">descargar archivos espec&#237;ficos asociados con un elemento</link>. Si quisi&#233;ramos descargar solamente los archivos MARC XML asociados con un &#237;tem en particular deber&#237;amos hacer lo siguiente:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_14" type="block" corresp="code_mineria-de-datos-en-internet-archive_14.txt"></code></pre>
<p>Debido a que los archivos del IA <link target="https://archive.org/about/faqs.php#140">son nombrados de acuerdo a reglas espec&#237;ficas</link> podemos saber con anterioridad cu&#225;l es el nombre del archivo MARC con tan s&#243;lo conocer el identificador &#250;nico del elemento. Armados de tal conocimiento podemos proceder a&#8230;</p>
</div>
      <div n="2"><head>Descargar todos los archivos MARC XML de una colecci&#243;n</head>
<p>Para la pr&#243;xima secci&#243;n pasaremos de usar el int&#233;rprete de Python a escribir un archivo <emph>script</emph> que descargue los archivos MARC de cada elemento en la BPL Anti-Slavery Collection. Intenta escribir este programa en Komodo o en tu editor de texto preferido:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_15" type="block" corresp="code_mineria-de-datos-en-internet-archive_15.txt"></code></pre>
<p>Este programa se parece mucho a los experimentos que hicimos previamente con la carta de Frederick Douglass, pero debido a que queremos descargar los archivos MARC de cada elemento de nuestra b&#250;squeda en la colecci&#243;n, estamos usando una variable <code type="inline">elementoid</code> para considerar el hecho que el identificador y el nombre del archivo ser&#225;n diferentes para cada resultado.</p>
<p>Antes de iniciar el programa (que, debo aclarar, va a descargar miles de peque&#241;os archivos XML en tu ordenador) crea una carpeta donde quieras que se almacenen los archivos MARC y ubica el programa en ese directorio. Despu&#233;s, inicia el programa desde la carpeta de tal manera que los archivos se guarden en un lugar f&#225;cil de encontrar.</p>
<p>(En caso de recibir una mensaje como <code type="inline">ConnectionError</code> en tu primer intento debes revisar tu conexi&#243;n a Internet, esperar unos minutos e intentarlo de nuevo.)</p>
<p>Si todo funciona correctamente, podr&#225;s ver que el programa empieza a imprimir mensajes de actualizaci&#243;n dici&#233;ndote que est&#225; en proceso de descarga de los archivos MARC, pero permitir que el programa ejecute la funci&#243;n hasta finalizar tomar&#225;, probablemente, unas cuantas horas, as&#237; que det&#233;n el programa y revisa m&#225;s detenidamente posibles maneras de mejorarlo. Presiona <code type="inline">ctrl-c</code> mientras est&#233;s en la ventana de tu terminal y har&#225;s que se detenga el programa.</p>
</div>
      <div n="2"><head>Construir un reporte de errores en el programa</head>
<p>Descargar todos esos archivos puede tomar un tiempo y probablemente queramos alejarnos de la computadora mientras tanto. Sin embargo, hay altas probabilidades de que durante esas dos horas algo salga mal e impida que nuestro programa funcione.</p>
<p>Digamos, por ejemplo, que hemos olvidado descargar previamente un archivo individual en esa carpeta o tal vez tu ordenador pierda brevemente la conexi&#243;n a Internet o alg&#250;n tipo de corte suceda en el servidor del IA que impida que el programa descargue el archivo que quiere.</p>
<p>En estos y otros casos de error, Python puede hacer una "excepci&#243;n" al decirte cu&#225;l es el problema. Desafortunadamente una excepci&#243;n tambi&#233;n har&#225; que tu programa deje de funcionar en lugar de continuar con el siguiente archivo.</p>
<p>Para prevenir esto podemos usar lo que se denomina en Python como una declaraci&#243;n <emph>try</emph> (<emph>try statement</emph>), la cual "intenta" ejecutar una cierta parte del c&#243;digo cuando se encuentra con una excepci&#243;n, en cuyo caso puedes brindar otras opciones de c&#243;digo para ejecutar. Puedes leer m&#225;s acerca del <link target="http://docs.python.org/2/tutorial/errors.html#handling-exceptions">manejo de excepciones</link> en la documentaci&#243;n de Python, pero por ahora tan s&#243;lo actualicemos nuestro programa para que luzca de esta manera:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_16" type="block" corresp="code_mineria-de-datos-en-internet-archive_16.txt"></code></pre>
<p>Lo m&#225;s importante que a&#241;adimos aqu&#237;, despu&#233;s de las declaraciones para importar los m&#243;dulos, fue una l&#237;nea que abre un archivo de texto llamado <code type="inline">errores-bpl-marcs.log</code> y lo prepara para incluir texto en &#233;l. Vamos a utilizar ese archivo para registrar las excepciones que encuentre el programa. La declaraci&#243;n <emph>try</emph> que a&#241;adimos a nuestro <emph>for loop</emph> intentar&#225; descargar el archivo MARC, en caso de que no pueda hacerlo escribir&#225; un registro descriptivo del fallo en nuestro archivo log. De esta manera podremos revisar posteriormente el archivo e identificar cu&#225;les elementos debemos intentar descargar nuevamente. Si la declaraci&#243;n <emph>try</emph> funciona y puede descargar el archivo el programa ejecutar&#225; el c&#243;digo sin la cl&#225;usula <emph>else</emph>.</p>
<p>Otra cosa que a&#241;adimos, tras una descarga exitosa, fue esta l&#237;nea:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_17" type="block" corresp="code_mineria-de-datos-en-internet-archive_17.txt"></code></pre>
<p>Dicha l&#237;nea usa el m&#243;dulo <code type="inline">time</code> que importamos al inicio para decirle a nuestro programa que se detenga por un segundo antes de proceder, lo que es b&#225;sicamente una manera en la que podemos ser amables con los servidores del IA para no sobrecargarlos cada tantos milisegundos con una solicitud.</p>
<p>Intenta actualizar tu programa para que se vea como el de arriba y ejec&#250;talo nuevamente en el directorio donde guardaste tus archivos MARC. No te sorprendas si inmediatamente encuentras una cadena con un mensaje de error &#161;eso significa que el programa hace lo que se supone debe hacer! Revisa tranquilamente tu editor de texto mientras el programa sigue ejecut&#225;ndose y abre el archivo <code type="inline">errores-bpl-marcs.log</code> para ver cu&#225;les excepciones han sido registradas. Probablemente veas que el programa registr&#243; la excepci&#243;n "File already exist" para cada uno de los archivos que se hab&#237;an descargado anteriormente cuando se ejecut&#243; el programa m&#225;s corto.</p>
<p>Si ejecutas el programa por un tiempo m&#225;s el c&#243;digo llegar&#225; hasta los elementos que no has descargado &#161;y continuar&#225;n recolectando tus archivos MARC!</p>
</div>
      <div n="2"><head>Recolecci&#243;n autom&#225;tica de informaci&#243;n desde un archivo MARC</head>
<p>Una vez que hayas el programa de descarga haya terminado estar&#225;s en la posesi&#243;n de cerca de 7 000 registros detallados MARC XML relacionados con elementos de la Anti-Slavery Collection (o cualquier otra colecci&#243;n que hayas decidido descargar, el m&#233;todo arriba explicado puede funcionar en cualquier colecci&#243;n cuyos elementos tengan archivos MARC asociados).</p>
<p>Y &#191;ahora qu&#233;?</p>
<p>El pr&#243;ximo paso depende de cual tipo de pregunta quieras responder relacionada con la colecci&#243;n. El formato de lenguaje MARC captura una rica cantidad de datos relativos a un elemento, como puedes ver si revisas el <link target="http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_marc.xml">registro MARC XML de la carta de Frederick Douglass</link> mencionado al inicio.</p>
<p>Observa, por ejemplo, que la carta de Douglass contiene informaci&#243;n acerca del lugar donde fue escrita en el campo de datos (<emph>datafield</emph>) marcado con el n&#250;mero <emph>260,</emph> dentro del subcampo (<emph>subfield</emph>) con el c&#243;digo <emph>a.</emph> La persona que prepar&#243; este registro MARC sab&#237;a poner informaci&#243;n en ese campo gracias a las <link target="http://www.loc.gov/marc/bibliographic/bd260.html">reglas espec&#237;ficas para el campo 260</link> seg&#250;n los <link target="http://www.loc.gov/marc/">est&#225;ndares MARC</link>.</p>
<p>Esto significa que es posible para nosotros revisar el interior de los archivos MARC que hemos descargado y recolectar la informaci&#243;n almacenada dentro del campo de datos <emph>260,</emph> subcampo <emph>a,</emph> y hacer una lista del nombre de cada lugar donde fueron publicados los elementos de la colecci&#243;n.</p>
<p>Para hacer esto, usaremos otro m&#243;dulo &#250;til de Python que hemos descargado al inicio con <code type="inline">pip</code>: <link target="https://github.com/edsu/pymarc"><code type="inline">pymarc</code></link></p>
<p>Ese m&#243;dulo facilita la recolecci&#243;n de informaci&#243;n de los subcampos. Asumiendo que tenemos un registro MARC preparado para analizar por el m&#243;dulo asignado a la variable del registro, podemos obtener la informaci&#243;n relativa a los nombres de los lugares de publicaci&#243;n de esta manera:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_18" type="block" corresp="code_mineria-de-datos-en-internet-archive_18.txt"></code></pre>
<p>La documentaci&#243;n de <code type="inline">pymarc</code> es un poco menos completa que la del IA, en particular cuando se trata de analizar registros XML. Pero un poco de exploraci&#243;n alrededor de la ra&#237;z del c&#243;digo fuente del m&#243;dulo revela <link target="https://github.com/edsu/pymarc/blob/master/pymarc/marcxml.py">algunas funciones que provee para trabajar con archivos MARC XML</link>. Una de ella, llamada <code type="inline">map_xml()</code>, se describe de la siguiente manera:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_19" type="block" corresp="code_mineria-de-datos-en-internet-archive_19.txt"></code></pre>
<p>En lenguaje llano significa que esta funci&#243;n puede tomar un archivo XML que contiene datos MARC (como los cerca de 7 000 que ahora tenemos en nuestro ordenador), los pasa por la funci&#243;n <code type="inline">map_xml</code> en el m&#243;dulo de <code type="inline">pymarc</code> y especifica una funci&#243;n adicional (que deberemos escribir) dici&#233;ndole a nuestro programa qu&#233; hacer con los datos recolectados del registro MARC contenidos en el archivo XML. Un dise&#241;o preliminar de nuestro c&#243;digo se ver&#225; como sigue:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_20" type="block" corresp="code_mineria-de-datos-en-internet-archive_20.txt"></code></pre>
<p>Intenta guardar el c&#243;digo en un programa y ejec&#250;talo desde una carpeta donde est&#233; guardado el XML de la carta de Douglass. Si todo funciona correctamente el programa mostrar&#225; lo siguiente:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_21" type="block" corresp="code_mineria-de-datos-en-internet-archive_21.txt"></code></pre>
<p><emph>Voil&#224;</emph>! Desde luego, este programa tiene m&#225;s utilidad si recolectamos la ubicaci&#243;n de cada carta en nuestra colecci&#243;n de archivos MARC. Agrupando toddo lo que hemos aprendido desde el inicio en esta lecci&#243;n podemos escribir un programa que lucir&#225; como el siguiente:</p>
<pre><code class="language-python" xml:id="code_mineria-de-datos-en-internet-archive_22" type="block" corresp="code_mineria-de-datos-en-internet-archive_22.txt"></code></pre>
<p>Este programa modifica nuestro c&#243;digo anterior de varias maneras. Primero, usa una declaraci&#243;n <emph>for looop</emph> para iterar sobre cada archivo de nuestro directorio. En lugar de la pesquisa de resultados con <code type="inline">internetarchive</code> con la cual iteramos en los resultados de b&#250;squeda durante la primera parte de la lecci&#243;n, ahora iteramos sobre los archivos recolectados con <code type="inline">os.listdir(path)</code> que usa el m&#243;dulo <code type="inline">os</code> de Python para listar los contenidos de los directorios especificados en la ruta de la variable, la cual debes modificar para que concuerde con la carpeta en la cual almacenaste todos tus archivos MARC.</p>
<p>Tambi&#233;n a&#241;adimos un manejador de error a nuestra funci&#243;n <code type="inline">obtener_lugar_de_pub()</code> para enfrentar el hecho de que algunos registros puedan (por cualquier raz&#243;n) carecer de la informaci&#243;n que buscamos. La funci&#243;n intentar&#225; imprimir el lugar de publicaci&#243;n, pero si llega a una excepci&#243;n imprimir&#225; la informaci&#243;n obtenida por la misma excepci&#243;n. En este caso, si la declaraci&#243;n falla la excepci&#243;n problablemente imprimir&#225; <code type="inline">None</code>. Entender por qu&#233; es asunto de otra lecci&#243;n acerca de los tipos de errores de Python, pero por ahora el mensaje <emph>None</emph> es suficientemente descriptivo para lo que sucede, por lo cual puede ser &#250;til para nosotros.</p>
<p>Intenta ejecutar este programa. Si todo funciona correctamente, tu pantalla se llenar&#225; con un listado de lugares donde las cartas fueron escritas. Si sirve, intenta modificar tu programa para que guarde los nombres de los lugares en un archivo de texto en lugar de imprimirlos en pantalla. Puedes servirte de la lecci&#243;n <link target="/es/lecciones/contar-frecuencias">Contar frecuencias</link> para saber cu&#225;les lugares son los m&#225;s comunes en la colecci&#243;n. Tambi&#233;n puedes trabajar con las ubicaciones para encontrar coordenadas que puedan ser ubicadas en un mapa usando la <link target="/lessons/googlemaps-googleearth">lecci&#243;n de introducci&#243;n a Google Maps</link>.</p>
<p>Asimismo, para obtener una visualizaci&#243;n preliminar de los lugares donde las cartas fueron escritas, puedes hacer lo que yo he hecho abajo y simplemente hacer una <link target="https://web.archive.org/web/20201202151557/http://www.wordle.net/">nube de palabras en Wordle</link> con el archivo de texto.</p>
<figure><desc>Nube de palabras en *Wordle* de los lugares de publicaci&#243;n de cartas abolicionistas</desc><graphic url="bpl-wordle.png"/></figure>
<p>Desde luego, para que esta t&#233;cnica sea &#250;til se requiere hacer algo de <link target="/lessons/cleaning-ocrd-text-with-regular-expressions">limpieza de tus datos</link>. Esta lecci&#243;n tambi&#233;n puede ser aplicada de otras maneras. Por ejemplo, trabajar con los campos de datos relativos a nombres de personas, con ellos puedes crear una red de corresponsales, o puedes analizar cuales temas (<emph>subjects</emph>) son comunes en los registros MARC. Ahora que has descargado los archivos MARC y puedes usar <code type="inline">pymarc</code> para extraer informaci&#243;n de los campos &#161;las posibilidades se multiplican r&#225;pidamente!</p>
<p><note id="1"> Agradezco a <link target="https://hypothes.is/a/AVKeGm0rvTW_3w8Lypo1">Shawn Graham</link> por se&#241;alar la dependencia de <code type="inline">six</code> en <code type="inline">pymarc</code> y brindar una soluci&#243;n.</note></p>
</div>
    </body>
  </text>
</TEI>
