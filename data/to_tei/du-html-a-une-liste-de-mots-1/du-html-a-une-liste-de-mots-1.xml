<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="du-html-a-une-liste-de-mots-1">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Du HTML &#224; une liste de mots (partie 1)</title>
  <author role="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor role="reviewers"><persName>Jim Clifford</persName><persName>Frederik Elwert</persName></editor><author role="translators">C&#233;lian Ringwald</author><editor role="translation-reviewers"><persName>Marina Giardinetti</persName><persName>Marie Flesch</persName></editor><editor role="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phfr0026</idno><date type="published">07/17/2012</date><date type="translated">09/13/2023</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#from-html-to-list-of-words-1"/>.</p><p>There are other translations: <ref target="#de-html-a-lista-de-palabras-1 #HTML-lista-palavras-1"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Dans cette le&#231;on en deux parties, nous allons utiliser les comp&#233;tences acquises dans la le&#231;on &amp;laquo;&amp;nbsp;T&#233;l&#233;charger des pages web avec Python&amp;nbsp;&amp;raquo;, et voir comment supprimer les *balises HTML* de la page de la transcription du proc&#232;s-verbal de Benjamin Bowsey en 1780 dans le but de cr&#233;er un texte propre et r&#233;utilisable. Nous r&#233;aliserons cette t&#226;che en utilisant les *op&#233;rateurs et m&#233;thodes de chaines de caract&#232;res* propres &#224; Python, ainsi que nos comp&#233;tences relatives &#224; la *lecture attentive*. Nous introduirons ensuite les concepts de *boucles* et *d&#8217;instructions conditionnelles* afin de r&#233;p&#233;ter notre processus de traitement et de tester certaines conditions nous permettant de s&#233;parer le contenu des balises HTML. Pour finir, nous convertirons les donn&#233;es obtenues et enregistr&#233;es sous la forme d&#8217;un texte sans balises HTML en une *liste de mots* qui pourra par la suite &#234;tre tri&#233;e, index&#233;e et investie lors d&#8217;analyses statistiques.</p></abstract><textClass><keywords><term xml:lang="en">python</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="fr">
    <body>
      <div type="2"><head>Objectifs de la le&#231;on</head>
<p>Dans cette le&#231;on en deux parties, nous allons utiliser les comp&#233;tences acquises dans la le&#231;on <ref target="/fr/lecons/telecharger-des-pages-web-avec-python">T&#233;l&#233;charger des pages web avec Python</ref>, et voir comment supprimer les <emph>balises HTML</emph> de la page de la <ref target="https://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33">transcription du proc&#232;s-verbal de Benjamin Bowsey en 1780</ref> dans le but de cr&#233;er un texte propre et r&#233;utilisable. Nous r&#233;aliserons cette t&#226;che en utilisant les <emph>op&#233;rateurs et m&#233;thodes de chaines de caract&#232;res</emph> propres &#224; Python, ainsi que nos comp&#233;tences relatives &#224; la <ref target="https://perma.cc/V4GX-9N5R"><emph>lecture attentive</emph></ref>. Nous introduirons ensuite les concepts de <emph>boucles</emph> et <emph>d&#8217;instructions conditionnelles</emph> afin de r&#233;p&#233;ter notre processus de traitement et de tester certaines conditions nous permettant de s&#233;parer le contenu des balises HTML. Pour finir, nous convertirons les donn&#233;es obtenues et enregistr&#233;es sous la forme d&#8217;un texte sans balises HTML en une <emph>liste de mots</emph> qui pourra par la suite &#234;tre tri&#233;e, index&#233;e et investie lors d&#8217;analyses statistiques.</p>
</div>
      <div type="2"><head>Enjeux de la le&#231;on</head>
<p>Pour rendre plus clair l&#8217;objectif de la s&#233;ance, ouvrez le fichier <code rend="inline">obo-t17800628-33.html</code> que vous avez cr&#233;&#233; lors de la le&#231;on <ref target="/fr/lecons/telecharger-des-pages-web-avec-python">T&#233;l&#233;charger des pages web avec Python</ref>.  <ref target="/assets/obo-t17800628-33.html">Ouvrez cette page web et t&#233;l&#233;chargez son code source</ref> si ce n&#8217;est pas le cas (via la commande Ctrl+S sur Windows ou &#8984;-S sur Mac). Inspectez ensuite le code HTML de ce document. En fonction du navigateur web que vous avez, il est possible d&#8217;acc&#233;der au code source d&#8217;une page en cliquant sur l&#8217;onglet <code rend="inline">Tools -&gt; Web Developer -&gt; Page Source</code>. Il est aussi g&#233;n&#233;ralement possible d&#8217;y acc&#233;der via les commandes Ctrl+U (Windows) ou &#8984;-Option-U (Mac).</p>
<p>En parcourant le fichier, vous remarquerez que celui-ci est compos&#233; de balises HTML m&#233;lang&#233;es avec du texte. Si vous &#234;tes n&#233;ophyte en mati&#232;re de d&#233;veloppement web, nous vous recommandons de consulter les tutoriels de la W3 School et de la Mozilla Foundation&#160;:</p>
<list type="unordered">
<item>HTML&#160;: <ref target="https://www.w3schools.com/html/">W3 School</ref> / <ref target="https://perma.cc/9NFS-5Z3G">Mozilla Fondation</ref></item>
<item>CSS&#160;: <ref target="https://perma.cc/6HLV-LBKQ">W3 School</ref> / <ref target="https://perma.cc/BR5N-BDEH">Mozilla Fondation</ref></item>
</list>
<p>Ces tutoriels vous permettront de vous familiariser avec la syntaxe de ces formats et de mieux comprendre le contexte d&#8217;utilisation des balises HTML lorsque vous les rencontrerez.</p>
<div type="3"><head>Mat&#233;riel n&#233;cessaire au suivi de la le&#231;on</head>
<list type="unordered">
<item>le fichier de la transcription du proc&#232;s&#160;: <ref target="/assets/obo-t17800628-33.html"><code rend="inline">obo-t17800628-33.html</code></ref></item>
<item>un &#233;diteur de texte permettant de compiler du code Python. Dans la s&#233;rie de le&#231;ons d&#8217;introduction &#224; Python du <emph>Programming Historian en fran&#231;ais</emph>, nous utilisons Komodo Edit (cf. <ref target="/fr/lecons/introduction-et-installation">la le&#231;on d&#8217;introduction de la s&#233;rie</ref>), mais <ref target="https://perma.cc/X98A-KME8">il en existe beaucoup d&#8217;autres</ref>.</item>
</list>
</div></div>
      <div type="2"><head>Conception de l&#8217;algorithme</head>
<p>Puisque le but est de se d&#233;faire du balisage HTML, la premi&#232;re &#233;tape de ce tutoriel consiste donc &#224; cr&#233;er un algorithme nous permettant d&#8217;extraire seulement le texte de la transcription (sans balises HTML).</p>
<p>Un algorithme est un ensemble de proc&#233;dures suffisamment d&#233;taill&#233;es pour &#234;tre impl&#233;ment&#233;es sur un ordinateur. Lors de la conception d&#8217;un algorithme, il est conseill&#233; dans un premier temps, de poser sur le papier son fonctionnement. C&#8217;est une mani&#232;re d&#8217;expliciter ce que l&#8217;on souhaite faire avant de traduire cela en un code informatique. Pour construire cet algorithme, une lecture vigilante de la page et de sa structure sera notamment n&#233;cessaire afin de pouvoir envisager par la suite un moyen de capturer le contenu du compte rendu du proc&#232;s.</p>
<p>&#192; la lecture du code source de <code rend="inline">obo-t17800628-33.html</code>, vous remarquerez que le contenu de la transcription n&#8217;est pas visible d&#232;s le d&#233;but du fichier. Au lieu de cela, vous trouverez de nombreuses balises HTML relatives aux m&#233;tadonn&#233;es. Le contenu qui nous int&#233;resse n&#8217;est alors visible qu&#8217;&#224; partir de la ligne 81&#160;!</p>
<ab><code xml:id="code_du-html-a-une-liste-de-mots-1_0" corresp="code_du-html-a-une-liste-de-mots-1_0.txt" lang="language-html" rend="block"/></ab>
<p>Nous nous int&#233;ressons uniquement &#224; la transcription du proc&#232;s, et non pas aux m&#233;tadonn&#233;es contenues dans les balises. Toutefois, vous remarquerez que les diff&#233;rentes parties de la transcription d&#233;butent apr&#232;s ces m&#233;tadonn&#233;es. L&#8217;emplacement de ces balises est donc potentiellement un indice utile nous permettant d&#8217;isoler le texte de la transcription.</p>
<p>En un coup d&#8217;&#339;il, vous remarquerez que la transcription du proc&#232;s commence avec une balise HTML : <code rend="inline">&lt;p&gt;</code>, qui marque ici le d&#233;but d&#8217;un paragraphe. Il s&#8217;agit l&#224; du premier paragraphe de notre document. Nous allons donc utiliser cette information pour identifier le d&#233;but du texte de la transcription. Dans le cas pr&#233;sent, nous avons de la chance, car il s&#8217;av&#232;re que cette balise est un moyen fiable nous permettant de rep&#233;rer le d&#233;but d&#8217;une partie de la transcription (vous pouvez v&#233;rifier les autres parties du proc&#232;s et vous verrez que c&#8217;est la m&#234;me chose).</p>
<p>Le texte du proc&#232;s se termine &#224; la ligne 82 avec une autre balise HTML&#160;: <code rend="inline">&lt;br/&gt;</code>, qui indique un passage &#224; la ligne. Il s&#8217;agit ici du dernier passage &#224; la ligne du document. Ces deux balises (la balise de d&#233;but de paragraphe et le dernier saut de ligne) nous offrent un moyen d&#8217;isoler le texte que nous ciblons. Les sites web bien con&#231;us ont la plupart du temps une syntaxe unique permettant de signaler la fin d&#8217;un contenu. En g&#233;n&#233;ral, il suffit de bien inspecter les pages / le code HTML pour rep&#233;rer ces indices.</p>
<p>La prochaine &#233;tape est donc de supprimer les balises HTML contenues au sein du contenu textuel. Maintenant, vous savez que les balises HTML se trouvent toujours entre deux chevrons. Il y a fort &#224; parier que si vous supprimez tout ce qui est contenu entre chevrons, vous supprimerez alors par la m&#234;me occasion tout ce qui est attribu&#233; &#224; la syntaxe HTML. R&#233;aliser cette op&#233;ration permettrait alors d'extraire seulement le contenu des transcriptions. Notez que nous faisons ici l&#8217;hypoth&#232;se que celles-ci ne contiennent pas de symboles math&#233;matiques, tels que &#171;&#8239;inf&#233;rieur &#224;&#8239;&#187; ou
&#171;&#8239;sup&#233;rieur &#224;&#8239;&#187;. Si Bowsey &#233;tait un math&#233;maticien, cette hypoth&#232;se serait alors plus fragile.</p>
<p>Nous allons maintenant d&#233;crire la proc&#233;dure de notre algorithme explicitement en fran&#231;ais&#160;:</p>
<p>Pour isoler le contenu de la transcription&#160;:</p>
<list type="unordered">
<item>Charger le document HTML contenant la transcription.</item>
<item>Chercher dans le code HTML et m&#233;moriser l&#8217;emplacement de la premi&#232;re balise <code rend="inline">&lt;p&gt;</code>.</item>
<item>Chercher dans le code HTML et m&#233;moriser l&#8217;emplacement de la derni&#232;re balise <code rend="inline">&lt;/br&gt;</code>.</item>
<item>Sauvegarder dans une variable de type <emph>chaine de caract&#232;res</emph> nomm&#233;e <code rend="inline">pageContents</code> tout ce qui se situe entre la balise <code rend="inline">&lt;p&gt;</code> et <code rend="inline">&lt;/br&gt;</code>.</item>
</list>
<p>Nous disposons maintenant de la transcription du texte, qui contient pour le moment encore quelques balises HTML. Pour nettoyer celui-ci, nous allons donc&#160;:</p>
<list type="unordered">
<item>Inspecter un &#224; un chaque caract&#232;re de la chaine <code rend="inline">pageContents</code>.</item>
<item>Si le caract&#232;re pass&#233; en revue est un chevron ouvrant (<code rend="inline">&lt;</code>), nous sommes donc &#224; partir de celui au sein d&#8217;une balise HTML et nous allons ignorer les prochains caract&#232;res.</item>
<item>Si le caract&#232;re pass&#233; en revue est un chevron fermant (<code rend="inline">&gt;</code>), nous ressortons d&#8217;une balise HTML. Nous ignorerons ce caract&#232;re, mais serons &#224; partir de celui-ci attentifs aux prochains.</item>
<item>Si nous ne sommes pas &#224; l&#8217;int&#233;rieur d&#8217;une balise HTML, nous ajouterons alors le caract&#232;re courant dans une nouvelle variable&#160;: <code rend="inline">text</code>.</item>
</list>
<p>Enfin&#160;:</p>
<list type="unordered">
<item>Nous d&#233;couperons notre chaine de caract&#232;res (<code rend="inline">pageContents</code>) en une liste de mots que nous utiliserons ensuite.</item>
</list>
</div>
      <div type="2"><head>Isoler le contenu de la transcription</head>
<p>La suite de ce tutoriel tirera parti des commandes Python introduites dans la le&#231;on <ref target="/fr/lecons/manipuler-chaines-caracteres-python">Manipuler des chaines de caract&#232;res en Python</ref>, notamment dans la premi&#232;re partie de notre algorithme, afin de supprimer tous les caract&#232;res avant la balise <code rend="inline">&lt;p&gt;</code> et apr&#232;s la balise <code rend="inline">&lt;/br&gt;</code>.</p>
<p>R&#233;capitulons, notre algorithme&#160;:</p>
<list type="unordered">
<item>Chargera le texte de la transcription.</item>
<item>Cherchera dans le code HTML la location de la premi&#232;re balise <code rend="inline">&lt;p&gt;</code> et enregistrera sa position.</item>
<item>Cherchera dans le code HTML la location de la derni&#232;re balise <code rend="inline">&lt;/br&gt;</code> et enregistrera sa position.</item>
<item>Sauvegardera tout ce qui se situe apr&#232;s la balise <code rend="inline">&lt;p&gt;</code> et avant la balise <code rend="inline">&lt;/br&gt;</code> dans une <emph>chaine de caract&#232;res</emph>&#160;: <code rend="inline">pageContents</code>.</item>
</list>
<p>Pour r&#233;aliser cela, nous utiliserons les <emph>m&#233;thodes de chaine de caract&#232;res</emph> <code rend="inline">find</code> (qui renvoie la premi&#232;re position dans une chaine d&#8217;un caract&#232;re donn&#233;) et <code rend="inline">.rfind()</code> (qui renvoie la derni&#232;re position dans une chaine d&#8217;un caract&#232;re donn&#233;). Cela nous permettra de r&#233;cup&#233;rer la sous-chaine de caract&#232;res contenant le contenu textuel compris entre les deux indices renvoy&#233;s par ces m&#233;thodes.</p>
<p>Pour illustrer et comprendre comment ces m&#233;thodes fonctionnent, vous pouvez tester cet exemple, qui renvoie la position du premier paragraphe et celle du dernier, &#224; travers la recherche des balises <code rend="inline">&lt;p&gt;</code> et<code rend="inline">&lt;/br&gt;</code>&#160;:</p>
<ab><code xml:id="code_du-html-a-une-liste-de-mots-1_1" corresp="code_du-html-a-une-liste-de-mots-1_1.txt" lang="language-python" rend="block"/></ab>
<p>Au fur et &#224; mesure de l&#8217;impl&#233;mentation, nous prendrons soin de bien s&#233;parer nos fichiers de travail. Nous appelons <code rend="inline">obo.py</code> (pour &#171;&#160;Old Bailey Online&#160;&#187;) le fichier dans lequel nous inscrivons le code que nous souhaiterons r&#233;utiliser&#160;; <code rend="inline">obo.py</code> sera alors un module. Nous avons abord&#233; la notion de module dans le tutoriel <ref target="/fr/lecons/reutilisation-de-code-et-modularite">R&#233;utilisation de code et modularit&#233;</ref> dans lequel nous avions enregistr&#233; nos fonctions dans un fichier nomm&#233; <code rend="inline">greet.py</code>.</p>
<p>Cr&#233;ez donc un nouveau fichier nomm&#233; <code rend="inline">obo.py</code> et sauvegardez-le dans votre r&#233;pertoire <code rend="inline">programming-historian</code>. Nous utiliserons ce fichier pour faire appel aux fonctions dont nous aurons besoin durant le traitement de The Old Bailey Online. Entrez ou copiez le code suivant de votre fichier.</p>
<ab><code xml:id="code_du-html-a-une-liste-de-mots-1_2" corresp="code_du-html-a-une-liste-de-mots-1_2.txt" lang="language-python" rend="block"/></ab>
<p>Cr&#233;ez ensuite un nouveau fichier, <code rend="inline">trial-content.py</code>, dans lequel vous copierez par la suite le code suivant&#160;:</p>
<ab><code xml:id="code_du-html-a-une-liste-de-mots-1_3" corresp="code_du-html-a-une-liste-de-mots-1_3.txt" lang="language-python" rend="block"/></ab>
<p>Lorsque vous ex&#233;cutez <code rend="inline">trial-content.py</code>, le programme ira dans un premier temps chercher le contenu de la page web de la transcription du proc&#232;s de Bowsey, puis ira rechercher dans le module <code rend="inline">obo.py</code> la fonction <code rend="inline">stripTags</code> . Le programme utilisera cette fonction pour extraire le contenu compris entre la premi&#232;re balise <code rend="inline">&lt;p&gt;</code> et la derni&#232;re balise <code rend="inline">&lt;/br&gt;</code>. Si tout est correct, cela nous renverra bien le contenu de la transcription de Bowsey, avec, comme nous le pr&#233;voyons, quelques balises HTML. </p>
<p>Il se peut que vous obteniez en r&#233;ponse une &#233;paisse ligne noire dans votre sortie de commande, mais ne vous inqui&#233;tiez pas. La sortie de l&#8217;&#233;diteur de texte Komodo Edit est limit&#233;e &#224; un nombre maximum de caract&#232;res qu&#8217;il est possible d&#8217;afficher, apr&#232;s lequel les caract&#232;res s&#8217;&#233;criront litt&#233;ralement les uns sur les autres &#224; l&#8217;&#233;cran, donnant l&#8217;apparence d&#8217;une tache noire. Pas de panique, le texte est dans ce cas bien ici, mais vous ne pouvez pas le lire&#160;; afin de r&#233;soudre ce probl&#232;me d&#8217;affichage, vous pouvez copier/coller ce texte dans un nouveau fichier, &#224; titre de v&#233;rification.</p>
<p>Prenons maintenant un moment pour nous assurer que vous avez bien compris comment fonctionne <code rend="inline">trial-contents.py</code>, qui est capable d&#8217;utiliser les fonctions pr&#233;sentes dans <code rend="inline">obo.py</code>. La fonction <code rend="inline">stripTags</code> du module <code rend="inline">obo.py</code> a besoin d&#8217;&#234;tre lanc&#233;e avec un argument. En d&#8217;autres termes, pour lancer cette fonction correctement, nous avons donc besoin de lui fournir cette information. La fonction <code rend="inline">stripTags</code> de <code rend="inline">obo.py</code> a besoin d&#8217;une seule chose&#160;: une chaine de caract&#232;res nomm&#233;e <code rend="inline">pageContents</code>. Mais vous remarquerez que lorsque l&#8217;on appelle la fonction <code rend="inline">stripTags</code> &#224; la fin de notre programme (<code rend="inline">trialcontents.py</code>) nous ne mentionnons pas de variable nomm&#233;e <code rend="inline">pageContents</code>. Au lieu de cela, la fonction re&#231;oit une variable nomm&#233;e HTML comme argument. Cela peut &#234;tre d&#233;routant pour de nombreuses personnes lorsqu&#8217;elles commencent &#224; programmer. Quand l&#8217;on d&#233;clare une fonction et ses arguments, nous ne sommes pas oblig&#233;&#11825;e&#11825;s de nommer les variables d&#8217;entr&#233;e de la m&#234;me mani&#232;re. Tant que le type de l&#8217;argument est le correct, tout devrait fonctionner comme pr&#233;vu, peu importe le nom que nous lui donnons. </p>
<p>Dans notre cas, nous souhaitons faire passer &#224; l&#8217;argument <code rend="inline">pageContents</code> le contenu de notre variable <emph>HTML</emph>. Vous auriez pu lui passer n&#8217;importe quelle chaine de caract&#232;res, y compris celle que vous aviez saisie directement entre les parenth&#232;ses. Essayez de relancer <code rend="inline">trial-content.py</code>, en rempla&#231;ant l&#8217;argument fourni &#224; <code rend="inline">stripTags</code> par &#171;&#160;J&#8217;aime beaucoup les chiens&#160;&#187; et observez ce qui se passe. Notez qu&#8217;en fonction de la mani&#232;re dont vous d&#233;finissez votre fonction (et ce qu&#8217;elle est cens&#233;e faire), votre argument peut &#234;tre autre chose qu&#8217;une chaine de caract&#232;res&#160;: un <emph>entier</emph>, par exemple. Pour mieux appr&#233;hender les diff&#233;rents types de donn&#233;es disponibles &#224; travers Python, nous vous invitons &#224; consulter <ref target="https://perma.cc/QH3X-BS79">les cours de Zeste de Savoir</ref> sur le sujet.</p>
</div>
      <div type="2"><head>Lectures sugg&#233;r&#233;es</head>
<list type="unordered">
<item>
Lutz, Mark. <emph>Learning Python</emph> (5th edition). O&#8217;Reilly Media, Inc., 2013.<list type="unordered">
<item>Ch. 7: Strings</item>
<item>Ch. 8: Lists and Dictionaries</item>
<item>Ch. 10: Introducing Python Statements</item>
<item>Ch. 15: Function Basics</item>
</list>
</item>
</list>
</div>
      <div type="2"><head>Synchronisation du code</head>
<p>Pour suivre les le&#231;ons &#224; venir, il est important que vous ayez les bons fichiers et programmes dans votre r&#233;pertoire <code rend="inline">programming-historian</code>. &#192; la fin de chaque chapitre, vous pouvez t&#233;l&#233;charger le fichier zip contenant le mat&#233;riel de cours du the programming-historian afin de vous assurer d&#8217;avoir le bon code. Notez que nous avons supprim&#233; les fichiers inutiles des le&#231;ons pr&#233;c&#233;dentes. Votre r&#233;pertoire peut contenir plus de fichiers&#160;; ce n&#8217;est pas grave, l&#8217;important est de s&#8217;assurer que les codes que nous utiliserons par la suite fonctionneront.</p>
<list type="unordered">
<item><ref target="/assets/python-lessons2.zip"><code rend="inline">programming-historian-2.zip</code></ref></item>
</list>
</div>
    </body>
  </text>
</TEI>
