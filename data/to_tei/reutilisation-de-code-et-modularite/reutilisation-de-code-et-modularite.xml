<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="reutilisation-de-code-et-modularite">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>R&#233;utilisation de code et modularit&#233;</title>
  <author role="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor role="reviewers">Jim Clifford</editor><author role="translators">C&#233;lian Ringwald</author><editor role="translation-reviewers">Hee-Soo Choi</editor><editor role="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phfr0024</idno><date type="published">07/17/2012</date><date type="translated">02/16/2023</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#code-reuse-and-modularity"/>.</p><p>There are other translations: <ref target="#reutilizacion-de-codigo-y-modularidad #reutilizacao-codigo-modularidade-python"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Un programme informatique peut vite devenir un tr&#232;s long fichier et ainsi devenir peu commode &#224; maintenir, notamment quand aucune strat&#233;gie n'a &#233;t&#233; mise en place afin de contr&#244;ler cette complexit&#233;. Cette le&#231;on sera l'occasion de vous expliquer comment r&#233;utiliser des parties de votre code &#224; l'aide de l'&#233;criture de fonctions, mais aussi comment organiser un programme en modules, de mani&#232;re &#224; rendre celui-ci plus concis et plus facile &#224; d&#233;bugger.</p></abstract><textClass><keywords><term xml:lang="en">python</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="fr">
    <body>
      <div type="2"><head>Objectifs de la le&#231;on</head>
<p>Un programme informatique peut vite devenir un tr&#232;s long fichier et ainsi devenir peu commode &#224; maintenir, notamment quand aucune strat&#233;gie n'a &#233;t&#233; mise en place afin de contr&#244;ler cette  complexit&#233;. Cette le&#231;on sera l'occasion de vous expliquer comment r&#233;utiliser des parties de votre code &#224; l'aide de l'&#233;criture de <emph>fonctions</emph>, mais aussi comment organiser un programme en <emph>modules</emph>, de mani&#232;re &#224; rendre celui-ci plus concis et plus facile &#224; d&#233;bugger. En effet, &#234;tre capable de rep&#233;rer et de supprimer un module dysfonctionnel vous permettra d'&#233;conomiser en temps et en efforts.</p>
<div type="3"><head>Les fonctions</head>
<p>Dans la pratique, vous vous rendrez compte qu'il est souvent n&#233;cessaire de r&#233;p&#233;ter certaines s&#233;ries d'instructions, g&#233;n&#233;ralement parce que l'on est amen&#233; &#224; r&#233;aliser certaines t&#226;ches &#224; plusieurs reprises. Les programmes sont, pour la plupart, compos&#233;s de routines qui sont assez robustes et g&#233;n&#233;rales pour &#234;tre r&#233;utilis&#233;es. Elles sont connues sous le nom de fonction et Python propose un moyen de d&#233;finir de nouvelles fonctions. Pour illustrer cela, observons un exemple simple de fonction. Supposons que vous souhaitez d&#233;finir une fonction qui saluerait des personnes. Copiez la d&#233;finition de cette fonction dans un &#233;diteur de texte et sauvegardez-la dans un fichier nomm&#233; <code rend="inline">salutation.py</code>.</p>
<ab><code xml:id="code_reutilisation-de-code-et-modularite_0" corresp="code_reutilisation-de-code-et-modularite_0.txt" lang="language-python" rend="block"/></ab>
<p>La premi&#232;re ligne commen&#231;ant par <code rend="inline">def</code> est la d&#233;claration de la fonction. Nous y d&#233;finissons (&#171;&#8239;def&#8239;&#187;) une fonction qui s'appelle &#171;&#8239;saluer&#8239;&#187;. Le <emph>param&#232;tre</emph> de la fonction est <code rend="inline">(x)</code>, vous comprendrez bient&#244;t &#224; quoi celui-ci va nous servir. La seconde ligne contient le code de notre fonction. Une fonction peut contenir autant de lignes que vous le souhaitez&#8239;; dans notre cas, elle n'est compos&#233;e que d'une ligne.</p>
<p>Notez que <emph>l'indentation</emph> est tr&#232;s importante en Python. L'espace avant le <code rend="inline">print</code> contenu dans notre fonction <code rend="inline">saluer</code> indique &#224; l'interpr&#233;teur que nous nous situons au sein de &#8239;la fonction. Nous en apprendrons plus &#224; ce sujet plus tard&#8239;; pour le moment, v&#233;rifiez que l'indentation dans votre fichier soit bien la m&#234;me que celle que nous vous pr&#233;sentons.
Lancez le programme. Vous devriez obtenir quelque chose ressemblant &#224; cela&#160;:</p>
<ab><code xml:id="code_reutilisation-de-code-et-modularite_1" corresp="code_reutilisation-de-code-et-modularite_1.txt" lang="language-python" rend="block"/></ab>
<p>Cet exemple ne contient qu'une seule fonction&#160;: <emph>saluer</emph>. Celle-ci est &#171;&#8239;appel&#233;e&#8239;&#187; deux fois (on peut aussi dire qu'elle est &#171;&#8239;invoqu&#233;e&#8239;&#187;). Appeler une fonction ou l'invoquer signifie juste que nous demandons au programme d'ex&#233;cuter le code compris dans celle-ci. Nous avons ici appel&#233; notre fonction avec deux param&#232;tres diff&#233;rents. &#201;ditez le fichier <code rend="inline">salutation.py</code>en invoquant &#224; la fin de celui-ci une nouvelle fois notre fonction en rempla&#231;ant le param&#232;tre par votre pr&#233;nom. Lancez le programme, cela devrait &#233;clairer ce que <code rend="inline">(x)</code> repr&#233;sente dans la d&#233;claration de la fonction.</p>
<p>Avant de passer &#224; la prochaine &#233;tape, &#233;ditez <code rend="inline">salutation.py</code> de mani&#232;re &#224; supprimer les appels de fonctions et en ne gardant que la d&#233;claration de la fonction et son contenu. Nous allons maintenant apprendre &#224; appeler une fonction depuis un autre programme. Lorsque vous aurez termin&#233;, votre fichier <code rend="inline">salutation.py</code> devrait ressembler &#224; cela&#160;:</p>
<ab><code xml:id="code_reutilisation-de-code-et-modularite_2" corresp="code_reutilisation-de-code-et-modularite_2.txt" lang="language-python" rend="block"/></ab>
</div></div>
      <div type="2"><head>Modularit&#233;</head>
<p>Dans notre exemple, le programme est tr&#232;s court et tient naturellement dans un unique fichier. Mais quand un programme contient un nombre important de lignes, il sera alors judicieux de le s&#233;parer en plusieurs  fichiers appel&#233;s <emph>modules</emph>.  Cette modularit&#233; facilitera grandement la maintenance de votre code, qui ne serait pas aussi &#233;vidente si vous le stockez dans un grand fichier. En effet, cette m&#233;thode de travail permet de travailler de mani&#232;re ind&#233;pendante sur chaque partie de votre code avant de les faire tenir toutes ensemble. En utilisant des modules, vous ne simplifierez pas seulement la r&#233;utilisation de votre code. Vous serez notamment capable de rep&#233;rer plus facilement la source des erreurs de vos programmes. Lorsque vous divisez un programme en modules, vous n'&#234;tes plus oblig&#233;s de r&#233;&#233;crire le d&#233;tail de chaque proc&#233;dure que vous souhaitez utiliser. Les autres modules n'ont pas besoin de savoir comment elle est cod&#233;e s'ils n'en sont pas responsables. Ce principe est appel&#233; &#171;&#8239;l'encapsulation&#8239;&#187;.</p>
<p>Supposons que vous construisiez une voiture. Vous pourriez commencer par ajouter une &#224; une des pi&#232;ces &#224; celle-ci, mais il serait peut-&#234;tre judicieux de commencer par construire et tester un module &#8212; comme par exemple un moteur &#8212; avant d'ajouter le reste. Le moteur lui-m&#234;me pourrait &#234;tre envisag&#233; comme &#233;tant compos&#233; d'un certain nombre de modules, plus petits, comme un carburateur, un syst&#232;me  d'allumage, qui pourraient eux-m&#234;mes &#234;tre compos&#233;s de modules, encore plus basiques et plus petits... Il en est de m&#234;me lorsque l'on travaille sur un code informatique&#160;: on essaye de d&#233;composer chaque probl&#232;me en petits morceaux et de les r&#233;soudre un &#224; un.</p>
<p>Vous avez d&#233;j&#224; cr&#233;&#233; un module quand nous avons &#233;crit le programme <code rend="inline">salutation.py</code>. Vous allez maintenant en &#233;crire un second, <code rend="inline">utiliser-salutation.py</code>, qui comme l'indique son nom va <emph>importer</emph> le code du module pour en tirer parti. Python poss&#232;de une instruction sp&#233;cifique appel&#233;e <code rend="inline">import</code> qui permet &#224; un programme d'acc&#233;der au contenu d'un autre programme. C'est ce que nous allons utiliser.</p>
<p>Copiez ce code dans Komodo Edit et sauvegardez-le dans un fichier nomm&#233; <code rend="inline">utiliser-salutation.py</code>. Ce fichier est votre programme, <code rend="inline">salutation.py</code> est ici un module.</p>
<ab><code xml:id="code_reutilisation-de-code-et-modularite_3" corresp="code_reutilisation-de-code-et-modularite_3.txt" lang="language-python" rend="block"/></ab>
<p>Nous faisons ici plusieurs choses&#160;: premi&#232;rement, nous demandons &#224; l'interpr&#233;teur d'<emph>importer</emph> (commande <code rend="inline">import</code> ) le module <code rend="inline">salutation.py</code> que nous avons cr&#233;&#233; pr&#233;c&#233;demment.</p>
<p>Vous remarquerez aussi que nous ne pouvons pas appeler une fonction directement &#224; travers son nom de cette mani&#232;re&#160;: saluer("Tout le monde"), nous devons faire pr&#233;c&#233;der celui-ci du nom du module suivi d'un point (.). Ce qui en clair signifie&#160;: lancez la fonction <emph>saluer</emph>, que vous devriez trouver dans le module <code rend="inline">salutation.py</code>.</p>
<p>Vous pouvez lancer alors le programme <code rend="inline">utiliser-salutation.py</code> avec la commande &#171;&#8239;Run Python&#8239;&#187; de Komodo Edit. Notez que vous n'avez pas &#224; lancer vous-m&#234;me le module... mais seulement un programme qui fait appel &#224; celui-ci. Si tout se passe bien, vous devriez voir les lignes suivantes s'afficher dans la sortie de Komodo Edit&#160;: </p>
<ab><code xml:id="code_reutilisation-de-code-et-modularite_4" corresp="code_reutilisation-de-code-et-modularite_4.txt" lang="language-python" rend="block"/></ab>
<p>Avant de poursuivre les tutoriels suivants, assurez-vous de bien avoir compris la diff&#233;rence entre le chargement d'un fichier de donn&#233;es (ex. <code rend="inline">helloworld.txt</code>) et l'importation d'un programme (e.g. <code rend="inline">salutation.py</code>).</p>
</div>
      <div type="2"><head>Lectures sugg&#233;r&#233;es</head>
<list type="unordered">
<item><ref target="https://perma.cc/DLH4-2M8W">Python Basics</ref></item>
</list>
</div>
    </body>
  </text>
</TEI>
