<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="palabras-clave-en-contexto-n-grams">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Palabras clave en contexto (usando n-grams) con Python</title>
  <author role="original_author"><persName>William J. Turkel</persName><persName>Adam Crymble</persName></author><editor role="reviewers"><persName>Jim Clifford</persName><persName>Frederik Elwert</persName></editor><author role="translators">V&#237;ctor Gayol</author><editor role="translation-reviewers"><persName>Jairo A. Melo</persName><persName>Maria Jos&#233; Afanador-Llach</persName><persName>Antonio Rojas Castro</persName></editor><editor role="editors">Miriam Posner</editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phes0021</idno><date type="published">07/17/2012</date><date type="translated">03/15/2017</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#keywords-in-context-using-n-grams"/>.</p><p>There are other translations: <ref target="#palavras-chave-contexto-usando-n-grams-python"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Esta lecci&#243;n retoma los pares de frecuencias recolectados en [Contar frecuencias de palabras][] y crea una salida de datos en HTML.</p></abstract><textClass><keywords><term xml:lang="en">python</term></keywords></textClass></profileDesc>
</teiHeader>
  <text xml:lang="es">
    <body>
      <div type="2"><head>Objetivos de la lecci&#243;n</head>
<p>Al igual que en <ref target="/es/lecciones/salida-de-datos-como-archivo-html">Salida de datos como archivo HTML</ref>, esta lecci&#243;n retoma los pares de frecuencias recolectados en <ref target="/es/lecciones/contar-frecuencias">Contar frecuencias de palabras</ref> y crea una salida de datos en HTML. Esta vez el objetivo son las palabras clave en contexto ("KWIC&#8221;, por sus siglas en ingl&#233;s) que crea n-gramas del contenido del documento original -en este caso la transcripci&#243;n de un juicio del "Old Bailey Online". Puedes utilizar tu programa para seleccionar una palabra clave y la computadora producir&#225; una salida de datos con todas las veces en que aparece esa palabra clave, junto con las palabras a la derecha e izquierda de la misma, haciendo sencillo observar a simple vista c&#243;mo es utilizada dicha palabra.</p>
<p>Una vez que se han creado las KWCIs, se envuelven en HTML y se env&#237;an al navegador en donde se pueden ver. Esto refuerza lo aprendido en <ref target="salida-de-datos-como-archivo-html">Salida de datos como archivo HTML</ref> optando por una salida ligeramente distinta.</p>
<p>Al final de la lecci&#243;n ser&#225;s capaz de extraer todos los n-gramas posibles del texto. En la siguiente lecci&#243;n, aprender&#225;s c&#243;mo crear salida de todos los n-gramas de una palabra clave dada en un documento descargado de Internet, y visualizarla claramente en la ventana de tu navegador.</p>
</div>
      <div type="2"><head>Archivos necesarios para esta lecci&#243;n</head>
<list type="unordered">
<item><code rend="inline">obo.py</code></item>
</list>
<p>Si no tienes estos archivos de las lecciones anteriores, puedes descargar python-es-lecciones7, un <ref target="/assets/python-es-lecciones7.zip">archivo zip de las lecciones anteriores</ref>.</p>
</div>
      <div type="2"><head>De texto a n-gramas a KWIC</head>
<p>Ahora que ya sabes c&#243;mo recolectar el contenido textual de una p&#225;gina Web de manera autom&#225;tica con Python, y has empezado a utilizar cadenas de caracteres, listas y diccionarios para procesamiento de texto, hay muchas otras cosas que puedes hacer con los textos aparte de contar frecuencias. Quienes estudian las propiedades estad&#237;sticas del lenguaje han encontrado que el estudiar las secuencias lineales de unidades ling&#252;&#237;sticas puede decirnos muchas cosas acerca de un texto. Estas secuencias lineales son conocidas como *bigramas+ (2 unidades), <emph>trigramas</emph> (3 unidades) o m&#225;s generalmente como <emph>n-gramas</emph>.</p>
<p>Probablemente has visto con anterioridad n-gramas muchas veces. Se utilizan generalmente en p&#225;ginas de resultados de investigaci&#243;n para dar una previsualizaci&#243;n del lugar en que aparece tu palabra clave en un documento y cu&#225;l es el contexto que la rodea. Esta aplicaci&#243;n de los n-gramas es conocida como "palabras clave en contexto" (generalmente abreviada como KWIC). Por ejemplo, si la cadena en cuesti&#243;n fuese "it was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness", entonces un 7-grama para la palabra clave "wisdom" ser&#237;a:</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_0" corresp="code_palabras-clave-en-contexto-n-grams_0.txt" rend="block"/></ab>
<p>Un n-grama puede contener cualquier tipo de unidad ling&#252;&#237;stica que quieras. Los historiadores tienen m&#225;s probabilidades de utilizar caracteres como en el bigrama "qu" o palabras como en el trigrama "el perro ladr&#243;"; sin embargo, puedes utilizar tambi&#233;n fonemas, s&#237;labas o cualquier n&#250;mero de otras unidades en funci&#243;n de tu pregunta de investigaci&#243;n.</p>
<p>Lo que vamos a hacer ahora es desarrollar la habilidad de visualizar KWIC para cualquier palabra clave en un cuerpo de texto y mostrarla en el contexto de un n&#250;mero fijo de palabras en cada lado. Como antes, vamos a "encerrar" (en HTML) la salida de datos para que se pueda ver en Firefox y a&#241;adir f&#225;cilmente a Zotero.</p>
</div>
      <div type="2"><head>De texto a n-gramas</head>
<p>Dado que queremos trabajar con palabras en lugar de caracteres o fonemas, ser&#225; mucho m&#225;s f&#225;cil crear n-gramas utilizando una lista de palabras en vez de cadenas. Como ya sabes, Python puede convertir f&#225;cilmente una cadena en una lista utilizando la operaci&#243;n dividir (<code rend="inline">split</code>). Una vez dividida resulta sencillo recuperar una subsecuencia de palabras adyacentes en la lista utilizando un <emph>fragmento</emph> representado por dos &#237;ndices separados por dos puntos. Aprendimos esto cuando trabajamos con cadenas en <ref target="/es/lecciones/manipular-cadenas-de-caracteres-en-python">Manipular cadenas de caracteres en Python</ref></p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_1" corresp="code_palabras-clave-en-contexto-n-grams_1.txt" lang="language-python" rend="block"/></ab>
<p>Sin embargo, tambi&#233;n podemos utilizar esta t&#233;cnica para tomar un n&#250;mero predeterminado de palabras vecinas de la lista con poco esfuerzo. Estudia los siguientes ejemplos que puedes probar en un int&#233;rprete de Python.</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_2" corresp="code_palabras-clave-en-contexto-n-grams_2.txt" lang="language-python" rend="block"/></ab>
<p>En estos ejemplos se ha utilizado el m&#233;todo de divisi&#243;n (<code rend="inline">slice</code>) para recuperar partes de nuestra lista. Ten en cuenta que hay dos lados respecto a los dos puntos en un <code rend="inline">slice</code>. Si a la derecha de los dos puntos se deja en blanco como en el &#250;ltimo ejemplo anterior, el programa sabe continuar autom&#225;ticamente hasta el final -en este caso, el final de la lista. En el pen&#250;ltimo ejemplo anterior se muestra que podemos comenzar desde el principio dejando vac&#237;o el espacio anterior a los dos puntos. Este es un atajo &#250;til y que est&#225; disponible para mantener tu c&#243;digo m&#225;s corto.</p>
<p>Tambi&#233;n puedes utilizar variables para representar las posiciones del &#237;ndice. Utilizado conjuntamente con un bucle <code rend="inline">for</code>, puedes crear f&#225;cilmente cualquier n-grama posible a partir de tu lista. El siguiente ejemplo recupera todos los 5-gramas de nuestra cadena a partir del ejemplo anterior.</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_3" corresp="code_palabras-clave-en-contexto-n-grams_3.txt" lang="language-python" rend="block"/></ab>
<p>Siguiendo con nuestro enfoque modular, vamos a crear una funci&#243;n y a guardarla en el m&#243;dulo <code rend="inline">obo.py</code> que puede crear n-gramas. Estudia y escribe o copia el siguiente c&#243;digo:</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_4" corresp="code_palabras-clave-en-contexto-n-grams_4.txt" lang="language-python" rend="block"/></ab>
<p>Esta funci&#243;n puede parecer un poco confusa ya que hace muchas cosas sin mucho c&#243;digo. Utiliza una lista por comprensi&#243;n para mantener el c&#243;digo compacto. El siguiente ejemplo hace exactamente lo mismo:</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_5" corresp="code_palabras-clave-en-contexto-n-grams_5.txt" lang="language-python" rend="block"/></ab>
<p>Utiliza el que tenga m&#225;s sentido para ti.</p>
<p>Un concepto que todav&#237;a te puede resultar confuso es el par de argumentos de la funci&#243;n. Ten en cuenta que nuestra funci&#243;n tiene dos nombres de variables en el par&#233;ntesis despu&#233;s de su nombre cuando la declaramos: <emph>listaPalabras</emph>, <emph>n</emph>. Estas dos variables son los argumentos de la funci&#243;n. Cuando llamas (ejecutas) esta funci&#243;n, estas variables ser&#225;n utilizadas por la funci&#243;n para su soluci&#243;n. Sin estos argumentos no hay suficiente informaci&#243;n para hacer los c&#225;lculos. En este caso, las dos piezas de informaci&#243;n son la lista de palabras que quieres covertir en n-gramas (<code rend="inline">listaPalabras</code>), y el n&#250;mero de palabras que quieres en cada n-grama (<code rend="inline">n</code>). Para que la funci&#243;n trabaje necesita ambas, as&#237; que la llamas como en este ejemplo (guarda el siguiente programa como <code rend="inline">usaobtenNGramas.py</code>y ejec&#250;talo):</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_6" corresp="code_palabras-clave-en-contexto-n-grams_6.txt" lang="language-python" rend="block"/></ab>
<p>Observa que los argumentos introducidos no tienen que tener el mismo nombre que los argumentos mencionados en la declaraci&#243;n de la funci&#243;n. Python sabe utilizar <emph>todasMisPalabras</emph> en cualquier lugar de la funci&#243;n en la que aparezca <emph>listaPalabras</emph>, ya que esto se dio desde el primer argumento. Del mismo modo, todas las apariciones de <emph>n</emph> ser&#225;n remplazadas por el entero 5 en este caso. Intenta cambiar el 5 a una cadena, como "elefantes" y observa lo que sucede cuando ejecutas tu programa. Ten en cuenta que debido a que <emph>n</emph> se utiliza como un entero, debes asegurarte que el argumento enviado es tambi&#233;n un entero. Lo mismo es v&#225;lido para cadenas de caracteres, puntos flotantes o cualquier otro tipo de variable enviada como argumento.</p>
<p>Tambi&#233;n puedes utilizar un terminal de Python para jugar con el c&#243;digo y tener una mejor comprensi&#243;n de c&#243;mo funciona. Pega la declaraci&#243;n de funci&#243;n para <emph>obtenNGramas</emph> (cualquiera de las dos funciones anteriores) en el int&#233;rprete de Python.</p>
<ab><code xml:id="code_palabras-clave-en-contexto-n-grams_7" corresp="code_palabras-clave-en-contexto-n-grams_7.txt" lang="language-python" rend="block"/></ab>
<p>En este ejemplo vemos dos cosas que debes tener en cuenta. En primer lugar, como nuestra funci&#243;n espera una lista de palabras en lugar de una cadena, tenemos que convertir las cadenas en listas antes de que nuestro programa pueda manejarlas. Podr&#237;amos haberlo hecho mediante la adici&#243;n de otra l&#237;nea de c&#243;digo por encima de la llamada a la funci&#243;n, pero en su lugar utilizamos el m&#233;todo <code rend="inline">split</code> directamente en el argumento de la funci&#243;n como una especie de atajo.</p>
<p>En segundo lugar, &#191;por qu&#233; el primer ejemplo devuelve una lista vac&#237;a en lugar del n-grama que buscamos? En <emph>test1</emph> hemos pedido un n-grama que es m&#225;s largo que el n&#250;mero de palabras en nuestra lista, lo cual ha resutado en una lista en blanco. En <emph>test2</emph> no tenemos tal problema y obtuvimos todos los posibles 5-gramas para una lista de palabras m&#225;s larga. Si quieres puedes adaptar tu funci&#243;n para que imprima un mensaje de advertencia o para recuperar toda la cadena en lugar de una lista vac&#237;a.</p>
<p>Ahora tenemos una manera de extraer todos los posibles n-gramas de un cuerpo de texto. En la siguiente lecci&#243;n podemos centrar nuestra atenci&#243;n en aislar los n-gramas que sean de inter&#233;s para nosotros.</p>
<div type="3"><head>Sincronizaci&#243;n de c&#243;digo</head>
<p>Para seguir a lo largo de las lecciones futuras es importante que tengas los archivos correctos y programas en el directorio "programming-historian" de tu disco duro. Al final de cada lecci&#243;n puedes descargar el archivo zip "python-es-lecciones" para asegurarte que tienes el c&#243;digo correcto. Si est&#225;s trabajando con la versi&#243;n Mac o Linux de las lecciones deber&#225;s abrir el archivo <code rend="inline">obo.py</code> y cambiar "file:///Users/username/Desktop/programming-historian/" a la ruta del directorio de tu propia computadora.</p>
<list type="unordered">
<item>python-es-lecciones8.zip (<ref target="/assets/python-es-lecciones8.zip">zip sync</ref>)</item>
</list>
</div></div>
    </body>
  </text>
</TEI>
