<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Generadores de texto e im&#225;genes usando gram&#225;ticas libres de contexto en Aventura.js</title>
  <slug>generadores-aventura</slug>
  <layout>lesson</layout>
  <collection>lessons</collection>
  <date>2023-07-28</date>
  <authors>Sergio Rodr&#237;guez G&#243;mez</authors>
  <reviewers>Isabelle Gribomont,Antonia Bustamante</reviewers>
  <editors>Nicol&#225;s Llano Linares</editors>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/509</review-ticket>
  <difficulty>2</difficulty>
  <activity>transforming</activity>
  <topics>creative-coding</topics>
  <abstract>Esta lecci&#243;n te ense&#241;a a crear generadores de texto e im&#225;genes usando la librer&#237;a Aventura.js para el lenguaje de programaci&#243;n JavaScript</abstract>
  <avatar_alt>Imagen en blanco y negro que muestra un collage generado con esta lecci&#243;n y que incluye la imagen de un paisaje, una iglesia y dos vaqueros</avatar_alt>
  <doi>10.46430/phes0063</doi>
</metadata>
  <text>
    <body>
      <div n="2"><head>Objetivos de la lecci&#243;n</head>
<ul>
<li>Entender el funcionamiento general de las gram&#225;ticas libres de contexto y su potencial para la generaci&#243;n de textos e im&#225;genes</li>
<li>Realizar un ejercicio de programaci&#243;n creativa usando una librer&#237;a especializada en literatura electr&#243;nica</li>
</ul>
</div>
      <div n="2"><head>Introducci&#243;n</head>
<p>Adem&#225;s de permitir procesos como el almacenamiento masivo de archivos o el an&#225;lisis algor&#237;tmico de objetos culturales, las herramientas digitales ofrecen oportunidades para desarrollar ideas creativas por medio de la computaci&#243;n. La creatividad computacional puede entenderse como un ejercicio expresivo con el que es posible crear texto, sonido, imagen, o video, entre otros medios, a trav&#233;s de c&#243;digo, algoritmos e interfaces digitales. Esta forma de expresi&#243;n puede resultar &#250;til para las artes y las humanidades de muchas maneras: como un medio de indagaci&#243;n ingeniosa de un objeto o un fen&#243;meno cultural, como una forma atractiva de divulgaci&#243;n y comunicaci&#243;n de una investigaci&#243;n para un p&#250;blico general, o como una exploraci&#243;n individual o colectiva que permita interpretaciones art&#237;sticas de un tema de inter&#233;s.</p>
<p>Siguiendo esta l&#237;nea, esta lecci&#243;n explica c&#243;mo desarrollar una forma particular de creatividad computacional: crear generadores de texto e im&#225;genes &#8212;mediante un sistema algor&#237;tmico denominado <link target="https://perma.cc/A4HU-6J8Y">gram&#225;ticas libres de contexto</link>&#8212; usando la librer&#237;a de programaci&#243;n denominada <link target="https://github.com/srsergiorodriguez/aventura">Aventura.js</link> la cual fue dise&#241;ada para el lenguaje de programaci&#243;n <link target="https://perma.cc/4UM6-YUCD">JavaScript</link>. Primero, para situarnos, hablaremos de la literatura electr&#243;nica, luego veremos en qu&#233; consisten este tipo de gram&#225;ticas y generadores, y posteriormente descubriremos paso a paso c&#243;mo crear un generador de poemas y otro de collages a partir de un archivo textual y de un archivo de im&#225;genes. Para producir el generador, utilizaremos la librer&#237;a Aventura, y para el caso del generador de im&#225;genes, nos ayudaremos de una aplicaci&#243;n complementaria a Aventura llamada igrama. Ambas piezas de software fueron escritas por Sergio Rodr&#237;guez G&#243;mez, tambi&#233;n autor de la versi&#243;n en espa&#241;ol de esta lecci&#243;n. En <link target="https://github.com/srsergiorodriguez/aventura/blob/master/README_es.md">este enlace</link> puedes ver la documentaci&#243;n completa de la librer&#237;a y algunos ejemplos de su uso.</p>
<p>Un ejemplo de un texto generado con el sistema de gram&#225;ticas libres de contexto que se describe en esta lecci&#243;n, basado en la obra <emph>Al Carb&#243;n</emph> de Jos&#233; Asunci&#243;n Silva, es el siguiente:</p>
<p>"La luz fr&#237;a, intercalada por la sombra de los nogales, se cuela por la ventana. Al pie de la ventana hay brocateles de iglesias deste&#241;idos por el tiempo, a la izquierda camisa de fuerza, a la derecha vestido gris de refinada elegancia, y sobre el piso, term&#243;metros. Es un estudio al carb&#243;n, hecho con imperceptibles transiciones entre el blanco y el negro. Vemos brillos de luz en camisa de fuerza y brocateles de iglesias deste&#241;idos por el tiempo, la penumbra domina term&#243;metros y vestido gris de refinada elegancia"</p>
<p>Y una serie de collages generados con igrama es el siguiente:</p>
<figure><desc>Figura 1. Collages producidos con un generador de im&#225;genes igrama</desc><graphic url="or-es-generadores-aventura-01.png" alt="Una secuencia de im&#225;genes que muestran composiciones compuestas de recortes de dibujos de paisajes, personas y objetos"/></figure>
</div>
      <div n="2"><head>Prerequisitos</head>
<p>Para desarrollar el ejercicio es necesario usar un editor de texto que permita escribir c&#243;digo de programaci&#243;n. En esta lecci&#243;n usaremos el editor <link target="https://code.visualstudio.com/">Visual Studio Code</link>, que est&#225; disponible gratuitamente para Windows, macOS y Linux. Tambi&#233;n necesitar&#225;s un navegador de internet que permita ver los mensajes de la consola de JavaScript; por ejemplo <link target="https://www.google.com/intl/es-419/chrome/">Chrome</link> o <link target="https://www.mozilla.org/es-ES/firefox/new/">Firefox</link>.</p>
<p>Aunque la lecci&#243;n describe todos los pasos necesarios para realizar el ejercicio, es de ayuda tener conocimientos b&#225;sicos de HTML, CSS y JavaScript. Si te interesa entrar en m&#225;s detalle acerca de c&#243;mo funciona un documento HTML, te recomiendo visitar la lecci&#243;n de <emph>Programming Historian</emph> llamada <link target="/es/lecciones/ver-archivos-html">Para entender p&#225;ginas web y HTML</link>, de William J. Turkel y Adam Crymble.</p>
<p>A lo largo de la lecci&#243;n encontrar&#225;s fragmentos de c&#243;digo que deben ir en distintos archivos espec&#237;ficos. Para seguir esta lecci&#243;n, copia y pega los fragmentos en los lugares que se indican; posteriormente puedes hacer modificaciones al c&#243;digo para personalizarlo. En la lecci&#243;n se indicar&#225; qu&#233; partes del c&#243;digo puedes modificar seg&#250;n tu preferencia. En t&#233;rminos generales, el c&#243;digo base para producir los generadores se mantiene igual, y el contenido textual y visual de los generadores se puede adaptar libremente con textos de cualquier extensi&#243;n y complejidad, y con im&#225;genes de cualquier tama&#241;o.</p>
</div>
      <div n="2"><head>La literatura electr&#243;nica</head>
<p>La literatura electr&#243;nica hace uso de herramientas computacionales y c&#243;digo de programaci&#243;n para la creaci&#243;n de obras literarias, y es por lo tanto un ejercicio de creatividad computacional. Estas obras pueden involucrar procesos digitales tanto en su forma de producci&#243;n como en su lectura. Es decir, en la manera como se construye y se compone el texto, o en la manera como la audiencia navega el texto y recorre las partes de la estructura narrativa, respectivamente. Por ejemplo, en el primer caso, un generador autom&#225;tico de textos, como los que encontramos en los bots de la red social Twitter, podr&#237;a componer las partes del texto a trav&#233;s de un sistema de reglas definido algor&#237;tmicamente. Por su parte, en el segundo caso, una obra hipertextual puede navegarse a trav&#233;s de enlaces en una interfaz gr&#225;fica que lleva a m&#250;ltiples derivaciones en el relato, y as&#237; a m&#250;ltiples posibilidades narrativas.</p>
<p>Partiendo de esta distinci&#243;n, es posible crear infinidad de obras que intervienen la producci&#243;n y la navegaci&#243;n del texto. Flores (2021) reconoce tres etapas en la historia de la literatura electr&#243;nica: la primera, la producci&#243;n de obras literarias apoyadas por procesos computacionales y distribuidas en medios f&#237;sicos como impresiones, almacenamiento magn&#233;tico o pantallas de televisi&#243;n; la segunda, desde mediados de los a&#241;os noventa, que se centr&#243; en la distribuci&#243;n a trav&#233;s de internet; y la tercera, expandida al uso de dispositivos m&#243;viles, de realidad aumentada y virtual, o a trav&#233;s de redes sociales.</p>
<p>Para hacernos una idea de esta diversidad, aqu&#237; podemos mencionar algunos ejemplos de literatura electr&#243;nica latinoamericana: las exploraciones po&#233;ticas y visuales con los recursos multimedia de la internet de los a&#241;os noventa en los Anipoemas y Tipoemas de <link target="https://www.vispo.com/uribe/">Ana Mar&#237;a Uribe</link>; los bots de Twitter de Leonardo Flores, como su generador de conmemoraciones ficticias de vidas de <link target="https://perma.cc/LL44-R2E4">&#8220;Santos Olvidados&#8221;</link>, y de &#201;lika Ortega, como su <link target="https://perma.cc/6QAJ-S4SE">Bot Poes&#237;as Carri&#243;n</link>, que produce textos generados basados en la poes&#237;a de Ulises Carri&#243;n; el mezclador de discursos pol&#237;ticos <link target="https://perma.cc/4S62-WMZZ">Promesas</link> de la artista Ana Mar&#237;a Montenegro; o el c&#243;mic interactivo <link target="https://perma.cc/6NA8-ZPX2">Muerte en el bosque</link> de las autoras Catalina Holgu&#237;n y Joni B. Sin embargo, la producci&#243;n de literatura electr&#243;nica es tan extensa en nuestro contexto, y en el mundo en general, que para tener un panorama m&#225;s amplio, vale la pena visitar compendios como la <link target="https://www.cartografiadigital.cl/">Cartograf&#237;a de la literatura digital latinoamericana</link>, el <link target="https://www.observatorioldigital.ufscar.br/atlas-da-literatura-digital-brasileira/">Atlas da literatura Digital Brasilera</link> y las <link target="https://litelat.net/">antolog&#237;as de la Red de Literatura Electr&#243;nica Latinoamericana Lit(e)Lat</link>.</p>
</div>
      <div n="2"><head>Generadores, una estrategia mec&#225;nica-aleatoria</head>
<p>En esta lecci&#243;n nos concentraremos en un tipo particular de literatura electr&#243;nica basado en la producci&#243;n de texto: los generadores autom&#225;ticos.</p>
<p>Existe una larga tradici&#243;n del uso de procesos mec&#225;nicos combinados con elementos aleatorios para la creaci&#243;n en las artes y la literatura. Con mec&#225;nicos nos referimos a que est&#225;n guiados por sistemas de reglas claramente definidos, es decir, si usamos t&#233;rminos computacionales, por algoritmos. Y por aleatorios queremos decir que alguna parte del proceso creativo est&#225; definido por una fuente de incertidumbre, como el lanzamiento de una moneda o la selecci&#243;n espont&#225;nea de elementos de una lista. Esta combinaci&#243;n creativa entre orden y azar permite un equilibrio entre el control sobre los resultados de una obra creativa y la sorpresa con respecto a la configuraci&#243;n final de la misma obra.</p>
<p>Pensemos, por ejemplo, en el ejercicio <link target="https://perma.cc/S6LR-U5AN">S + 7</link> propuesto por el poeta surrealista Jean Lescure en los a&#241;os sesenta: el ejercicio consiste en tomar un texto preexistente, por ejemplo un poema, y reemplazar cada sustantivo por la s&#233;ptima palabra que se encuentre despu&#233;s de este en un diccionario de sustantivos. En <link target="http://www.spoonbill.org/n+7/">este enlace</link> encuentras un programa en ingl&#233;s que genera textos con el ejercicio S + 7. Aqu&#237; podemos ver que hay una parte mec&#225;nica, las reglas que definen c&#243;mo proceder con el ejercicio, y una parte aleatoria, el resultado impredecible de c&#243;mo resultar&#225; el nuevo texto causado por el orden fortuito del diccionario usado.</p>
<p>Este tipo de estrategias creativas, que en principio no requieren de un computador, han sido posteriormente adaptadas por la literatura electr&#243;nica, pues sus autoras y autores com&#250;nmente aprovechan los sistemas algor&#237;tmicos que permiten los lenguajes de programaci&#243;n y el azar que proveen los generadores de n&#250;meros aleatorios para dar lugar a la conjunci&#243;n mec&#225;nica-aleatoria. Un ejemplo concreto de esta estrategia en el campo computacional es la producci&#243;n de generadores de texto &#8212;y otros medios como im&#225;genes o sonido&#8212; por medio de sistemas algor&#237;tmicos llamados gram&#225;ticas libres de contexto; este es justamente el sistema que usaremos en esta lecci&#243;n. Cabe anotar que existen otros m&#233;todos para la generaci&#243;n de textos, como las <link target="https://perma.cc/Y7FK-FM3X">cadenas de M&#225;rkov</link> o los modelos de lenguaje basados en <link target="https://perma.cc/D73Q-MMXM">aprendizaje autom&#225;tico</link>, pero no nos ocuparemos de ellos aqu&#237;.</p>
</div>
      <div n="2"><head>&#191;Qu&#233; son las gram&#225;ticas libres de contexto?</head>
<p>La idea original detr&#225;s de las gram&#225;ticas libres de contexto surgi&#243; de los estudios realizados por el ling&#252;ista <link target="https://perma.cc/M3J2-T54X">Noam Chomsky</link> en los a&#241;os cincuenta. Chomsky (1956) propuso un modelo formal y general para entender las estructuras sint&#225;cticas del lenguaje, es decir, la manera en que los elementos de un lenguaje se organizan para formar expresiones habladas o escritas. Posteriormente, estas ideas encontraron caminos fruct&#237;feros por fuera de la ling&#252;&#237;stica; fueron apropiadas por las ciencias de la computaci&#243;n y se crearon aplicaciones como el an&#225;lisis de c&#243;digo de programaci&#243;n y, lo que nos ocupa en esta lecci&#243;n, la producci&#243;n de generadores autom&#225;ticos de texto.</p>
<p>En t&#233;rminos generales una gram&#225;tica libre de contexto se compone de dos partes: una lista de elementos que componen el lenguaje y un orden en el que pueden disponerse esos elementos. Por ejemplo, supongamos que describimos una gram&#225;tica en la que, como regla, primero va un art&#237;culo, luego un sustantivo y luego un adjetivo. Y que tenemos una lista de art&#237;culos: la, una; una lista de sustantivos: ara&#241;a, ardilla, marmota; y una lista de adjetivos: valiente, elegante, generosa. Dentro del mundo de posibilidades de esa gram&#225;tica, entonces, algunas frases posibles ser&#237;an: &#8220;una ara&#241;a generosa&#8221;, &#8220;la ardilla valiente&#8221; o &#8220;una marmota valiente&#8221;. Como puedes notar, la gram&#225;tica describe qu&#233; tipos de combinaciones son posibles en este lenguaje.</p>
<p>Si representamos esta gram&#225;tica en un esquema que se ramifica como un &#225;rbol, el resultado podr&#237;a visualizarse de la siguiente manera, como se ve en la figura 2:</p>
<figure><desc>Figura 2. La gram&#225;tica de un texto representada como un &#225;rbol</desc><graphic url="or-es-generadores-aventura-02.png" alt="Un gr&#225;fico que representa la gram&#225;tica de una frase como un &#225;rbol, es decir, como un sistema jer&#225;rquico de nodos. El nodo principal, llamado base, se conecta con los nodos art&#237;culo, sustantivo y adjetivo."/></figure>
<p>Ahora, una gram&#225;tica puede ser mucho m&#225;s compleja, pues puede incluir sub-gram&#225;ticas, es decir, sistemas de reglas que se ramifican incluso en las ramas, como veremos m&#225;s adelante.</p>
<p>Las gram&#225;ticas libres de contexto nos ofrecen entonces una manera de describir claramente un sistema de reglas con el que se puede generar textos diversos; en otras palabras, nos proporcionan la parte mec&#225;nica de nuestro proceso creativo. Sin embargo, de acuerdo con lo que dijimos antes, tambi&#233;n queremos a&#241;adir un elemento aleatorio para llevar a cabo un ejercicio de creatividad computacional que pueda dar como resultado textos sorprendentes. As&#237;, supongamos que justo al final de un &#225;rbol gramatical ponemos unas bolsitas de papel que contienen las categor&#237;as de palabras de nuestro l&#233;xico. Algo como lo que se ve en la figura 3:</p>
<figure><desc>Figura 3. La gram&#225;tica de un texto representada como un &#225;rbol con opciones que se pueden escoger al azar</desc><graphic url="or-es-generadores-aventura-03.png" alt="Un gr&#225;fico que representa la gram&#225;tica de una frase como un &#225;rbol, es decir, como un sistema jer&#225;rquico de nodos. El nodo principal, llamado base, se conecta con los nodos art&#237;culo, sustantivo y adjetivo. Cada nodo final est&#225; conectado a una bolsa de palabras que contienen opciones"/></figure>
<p>El elemento de aleatoriedad ocurre cuando metemos la mano en cada una de estas bolsas y sacamos una palabra sin que intervenga nuestra elecci&#243;n voluntaria.</p>
</div>
      <div n="2"><head>Programar un generador de texto con Aventura.js</head>
<p>Ahora podemos pasar de estos &#225;rboles y bolsas de palabras imaginarias a escribir c&#243;digo de programaci&#243;n que nos permita crear un generador de textos autom&#225;tico. Usaremos <link target="https://github.com/srsergiorodriguez/aventura/blob/master/README_es.md">Aventura.js</link><ref type="footnotemark" target="#1"/>, una librer&#237;a de programaci&#243;n creada para desarrollar distintas formas de literatura electr&#243;nica: <link target="https://perma.cc/Y7FK-FM3X">cadenas de M&#225;rkov</link>, <link target="https://perma.cc/D5M2-HT5W">historias hipertextuales</link>, y, por supuesto, gram&#225;ticas libres de contexto. Esta librer&#237;a est&#225; escrita en el lenguaje de programaci&#243;n JavaScript y por lo tanto funciona dentro de los exploradores de internet; es apropiada para crear proyectos que circulan en la web. Cabe a&#241;adir que Aventura es una librer&#237;a creada espec&#237;ficamente para funcionar en espa&#241;ol y en ingl&#233;s, y busca ayudar a cerrar brechas idiom&#225;ticas en las pr&#225;cticas que involucran la escritura de c&#243;digo en las artes y las humanidades.</p>
<div n="3"><head>Preparar el entorno</head>
<p>El primer paso consiste en crear una carpeta que contendr&#225; todos los elementos de nuestro proyecto. La carpeta del proyecto de esta lecci&#243;n se llamar&#225; "generador". Una vez creada la carpeta, abre Visual Studio Code y arr&#225;strala dentro de la interfaz, esto le indicar&#225; al editor de texto que esa es la carpeta del proyecto en el que est&#225;s trabajando.</p>
<p>Ahora, en el editor de texto, crearemos un archivo con el nombre "index.html" y lo guardaremos en la carpeta. Para hacerlo, en Visual Studio Code, debes ir al men&#250; "File" y hacer clic en "New Text File"; a continuaci&#243;n, y tambi&#233;n en el men&#250; "File", haz clic en "Save As..." y guarda el archivo con el nombre <code type="inline">index.html</code>. Este es el documento de base que contendr&#225; referencias a los dem&#225;s documentos que componen nuestro proyecto. Copia, pega y guarda el siguiente c&#243;digo de base en tu archivo <code type="inline">index.html</code>:</p>
<pre><code class="language-html" xml:id="code_generadores-aventura_0" type="block" corresp="code_generadores-aventura_0.txt"></code></pre>
<p>En t&#233;rminos generales, este c&#243;digo html describe los elementos b&#225;sicos de un documento que se presenta en el explorador web, es decir, describe los elementos del sitio web donde se alojar&#225; nuestro generador de texto. Concretamente, la etiqueta <code type="inline">&lt;head&gt;</code> contiene los elementos que describen los metadatos del sitio web (es decir, los datos que contienen informaci&#243;n interna del funcionamiento del sitio), la etiqueta <code type="inline">&lt;body&gt;</code> contiene los elementos que ser&#225;n visibles en el sitio web (cosas como los t&#237;tulos, p&#225;rrafos, im&#225;genes, botones, etc.), y la etiqueta <code type="inline">&lt;script&gt;</code> se usa para cargar los archivos que contienen programaci&#243;n en JavaScript; aqu&#237; crearemos dos archivos: <code type="inline">main.js</code>, en donde escribiremos nuestro c&#243;digo, y <code type="inline">aventura.js</code>, desde donde cargaremos la librer&#237;a que nos facilitar&#225; el trabajo.</p>
<p>El siguiente paso es cargar la librer&#237;a Aventura. Para eso debemos dirigirnos al repositorio de GitHub que la aloja y buscar el "release" o lanzamiento m&#225;s reciente. En esta lecci&#243;n usaremos la versi&#243;n 2.4.1. En <link target="https://github.com/srsergiorodriguez/aventura">esta p&#225;gina</link> encontrar&#225;s un enlace con el que podr&#225;s descargar el archivo <code type="inline">aventura.js</code> como se ve en las figuras 4 y 5. Una vez descargado, p&#243;nlo en la carpeta del proyecto. Si quieres saber m&#225;s del funcionamiento de la librer&#237;a, la documentaci&#243;n est&#225; disponible tanto en <link target="https://github.com/srsergiorodriguez/aventura/blob/master/README.md">ingl&#233;s</link> como en <link target="https://github.com/srsergiorodriguez/aventura/blob/master/README_es.md">espa&#241;ol</link>.</p>
<figure><desc>Figura 4. El enlace a los lanzamientos o 'releases' de la librer&#237;a</desc><graphic url="or-es-generadores-aventura-04.png" alt="Captura de pantalla de la interfaz de github que indica el lugar donde se encuentra el enlace a los lanzamientos o 'releases' de la librer&#237;a: la columna derecha, justo debajo de la palabra releases"/></figure>
<figure><desc>Figura 5. El enlace al archivo descargable de la librer&#237;a</desc><graphic url="or-es-generadores-aventura-05.png" alt="Captura de pantalla de la interfaz de github que indica el archivo que se debe descargar: releases.js"/></figure>
<p>Finalmente, para esta etapa de preparaci&#243;n, debes crear un archivo llamado <code type="inline">main.js</code>, siguiendo pasos equivalentes a la creaci&#243;n del archivo <code type="inline">index.html</code>. En este archivo <code type="inline">main.js</code> escribiremos todo el c&#243;digo que har&#225; parte de nuestro generador de texto, as&#237; que de ahora en adelante este es el archivo en el que debes trabajar.</p>
<p>As&#237;, debemos tener estos tres archivos en nuestra carpeta: <code type="inline">index.html</code>, <code type="inline">aventura.js</code>, <code type="inline">main.js</code>, como se ve en la figura 6:</p>
<figure><desc>Figura 6. La lista de archivos necesarios para el proyecto</desc><graphic url="or-es-generadores-aventura-06.png" alt="Captura de pantalla del buscador o 'finder' del sistema operativo mac que indica los archivos que se deben tener en el proyecto: index.html, aventura.js y main.js"/></figure>
<p>Para poder ver los resultados de tu programa deber&#225;s instalar una extensi&#243;n en Visual Studio Code. Ve a al men&#250; "View" / "Extensions" en la parte superior y se abrir&#225; una barra lateral en el lado izquierdo de la aplicaci&#243;n. All&#237; encontrar&#225;s una barra de b&#250;squeda, escribe "live server" en ella y presiona "enter". Haz clic en la opci&#243;n "live server" y luego da clic en el bot&#243;n "install". Te deber&#225; aparecer un bot&#243;n en la parte inferior derecha de Visual Studio Code que dice "go live". Esta extensi&#243;n crear&#225; un servidor local que te permitir&#225; ver los efectos del c&#243;digo de programaci&#243;n en el explorador web. Cada vez que guardes nuevos cambios en tu carpeta, esa pesta&#241;a se actualizar&#225; y te mostrar&#225; el sitio web de tu proyecto. Para volver a ver los archivos en tu carpeta, ve al men&#250; "View" / "Explorer" en la parte superior de la Visual Studio Code, ahora ver&#225;s la lista de archivos en tu carpeta y podr&#225;s continuar la lecci&#243;n.</p>
</div><div n="3"><head>Programar la gram&#225;tica</head>
<p>En esta lecci&#243;n crearemos un generador de poemas basado, a grandes rasgos, en el texto <emph>Al carb&#243;n</emph> del poeta colombiano de finales del siglo XIX <link target="https://perma.cc/6VX9-K7RX">Jos&#233; Asunci&#243;n Silva</link>. El poema se encuentra dentro de sus <emph>Obras Completas</emph> (Silva, 1977), <link target="https://perma.cc/MX5K-AZV4">disponible en acceso abierto</link>. Tomaremos el formato general del texto original y procuraremos mantener su orden al tiempo que intentamos producir variaciones de su contenido. Escogimos este texto para la lecci&#243;n porque tiene un orden claro y hace listas de objetos que podr&#237;an reemplazarse por otros en nuestro generador. El texto original de Silva se puede leer en el pie de p&#225;gina referenciado aqu&#237;<ref type="footnotemark" target="#2"/>.</p>
<p>Primero tenemos que entender la estructura general del texto que nos servir&#225; como referencia. En el caso de <emph>Al carb&#243;n</emph> vemos que el texto describe los elementos atmosf&#233;ricos, la textura y los objetos representados en un dibujo hecho al carboncillo. En m&#225;s detalle, el texto habla de los siguientes elementos:</p>
<ul>
<li>La sensaci&#243;n lum&#237;nica que proporciona la luz que entra por una ventana</li>
<li>Los elementos que est&#225;n regados en varias partes de un cuarto</li>
<li>Las texturas de los muros</li>
<li>La silueta de un burro que est&#225; en la escena</li>
<li>Nos revela que lo que est&#225; describiendo es un dibujo al carboncillo y no un cuarto real</li>
<li>Finalmente, hace un recuento de los objetos descritos y en qu&#233; partes del dibujo son m&#225;s evidentes las luces y las sombras.</li>
</ul>
<p>Para simplificar nuestro generador, vamos a tomar solo algunas partes de la estructura general del texto original: la descripci&#243;n atmosf&#233;rica, la lista de objetos, la revelaci&#243;n de que se trata de un dibujo, y la descripci&#243;n de los lugares del dibujo que tienen luces y sombras. La figura 7 representa esa estructura como un esquema de &#225;rbol:</p>
<figure><desc>Figura 7. La representaci&#243;n de una gram&#225;tica basada en *Al Carb&#243;n* de Jos&#233; Asunci&#243;n Silva</desc><graphic url="or-es-generadores-aventura-07.png" alt="Un gr&#225;fico que representa la gram&#225;tica de una frase como un &#225;rbol, es decir, como un sistema jer&#225;rquico de nodos. El nodo principal, llamado base, se conecta con los nodos atmosf&#233;rica, objetos, revelaci&#243;n, y luces y sombras."/></figure>
<p>Para representar esta estructura en c&#243;digo entendible para Aventura debemos crear un <link target="https://perma.cc/DGA4-K5BZ">objeto</link> de JavaScript que contenga la gram&#225;tica en nuestro archivo <code type="inline">main.js</code>. Dentro de este objeto pondremos un conjunto de propiedades<ref type="footnotemark" target="#3"/> que representan qu&#233; ramas llevan a otras ramas dentro de nuestro &#225;rbol, y, al final de cada una, qu&#233; lista de opciones tenemos; las bolsas de papel, por as&#237; decirlo.</p>
<p>Cada una de estas propiedades es una <link target="https://perma.cc/J3LB-A7PN">"array"</link>, es decir, una lista de elementos, encerrada en corchetes cuadrados, que contiene una serie de <link target="https://perma.cc/63Y8-3M2V">"string"</link>, es decir, una cadena de caracteres, encerrada en comillas. Por ahora, empezamos por crear el tronco de nuestro generador con referencias a las ramas necesarias. Para hacer una referencia a una nueva rama, en Aventura se usa como convenci&#243;n poner el nombre de la rama entre corchetes angulares, o sea, los signos de "menor que" y "mayor que". Entonces, en un principio, el dise&#241;o de nuestra gram&#225;tica se ver&#237;a as&#237;:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_1" type="block" corresp="code_generadores-aventura_1.txt"></code></pre>
<p>De esta manera, <code type="inline">let gramatica</code> asigna una variable que contendr&#225; toda la informaci&#243;n necesaria para que Aventura pueda configurar el generador.</p>
<p>Ahora debemos crear una rama por cada referencia. Por el momento podemos poner textos fijos en cada rama, y poco a poco crearemos nuevas derivaciones y opciones. Estos textos fijos son equivalentes a poner una bolsa con solo una opci&#243;n. Aunque posteriormente en la lecci&#243;n veremos el c&#243;digo completo, revisa este ejemplo como referencia:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_2" type="block" corresp="code_generadores-aventura_2.txt"></code></pre>
<p>En este punto podemos introducir variaciones que ser&#225;n seleccionadas al azar cuando generemos nuevos textos. Como ejemplo sencillo, podemos cambiar la palabra &#225;rboles en la regla <code type="inline">atmosfera</code> por una lista de &#225;rboles concretos. Digamos, nogales, saucos y urapanes. Simplemente reemplaza la palabra &#225;rboles en esa rama por una referencia a <code type="inline">&lt;arboles&gt;</code> y crea un nuevo par&#225;metro en la gram&#225;tica con la lista de opciones:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_3" type="block" corresp="code_generadores-aventura_3.txt"></code></pre>
<p>Una vez te familiarices con el proceso, puedes crear nuevas reglas y opciones. Para crear la lista de opciones nos apoyaremos en los datos recogidos por el proyecto <link target="https://perma.cc/2U6N-94GV">Sobremesa Digital</link> de Clementina Grillo. Este proyecto hizo un recuento de todos los objetos, por cap&#237;tulos y tipos, que se mencionan en la novela <emph>De sobremesa</emph> escrita por Jos&#233; Asunci&#243;n Silva, y est&#225; disponible en un archivo en formato <link target="http://clementinagrillo.com/sobremesadigital/flare.json">JSON</link>. B&#225;sicamente, un archivo en formato JSON es equivalente a un objeto de JavaScript, sus siglas quieren decir, justamente, "JavaScript Object Notation". Estos datos son muy adecuados para el proyecto de esta lecci&#243;n, as&#237; que los usaremos como insumo para la siguiente parte. As&#237;, en vez de poner elementos fijos en la rama de objetos, pondremos elementos escogidos al azar tomados de la base de datos de "Sobremesa digital":</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_4" type="block" corresp="code_generadores-aventura_4.txt"></code></pre>
<p>Ahora debemos crear una <link target="https://perma.cc/RSC2-ABBV">instancia</link> de Aventura con la que trabajaremos. Copia y pega este c&#243;digo justo despu&#233;s del c&#243;digo de la gram&#225;tica:</p>
<p><code type="inline">let aventura = new Aventura("es");</code></p>
<p>El <code type="inline">"es"</code> dentro de los par&#233;ntesis indica que usaremos una versi&#243;n de Aventura en espa&#241;ol.</p>
<p>Para ver el resultado de nuestro generador de texto primero debemos fijar la gram&#225;tica en la instancia de Aventura que creamos anteriormente. Copia y pega este c&#243;digo despu&#233;s del c&#243;digo que crea la instancia:</p>
<p><code type="inline">aventura.fijarGramatica(gramatica);</code></p>
<p>Luego debemos expandir la gram&#225;tica, es decir, hacer que el programa recorra autom&#225;ticamente el &#225;rbol parte por parte y escoja elementos entre las opciones disponibles. En la funci&#243;n <code type="inline">expandirGramatica</code> debemos poner el nombre de la propiedad que contiene nuestra regla inicial. Copia y pega el siguiente c&#243;digo a continuaci&#243;n:</p>
<p><code type="inline">let texto = aventura.expandirGramatica('base');</code></p>
<p>El texto guardado en esta variable se puede usar en cualquier parte del sitio web y se puede estilizar de acuerdo con tus preferencias. Por ejemplo, para mostrar el resultado del texto en la consola del explorador copia y pega este c&#243;digo luego de todo lo dem&#225;s y guarda el archivo <code type="inline">main.js</code>:</p>
<p><code type="inline">console.log(texto);</code></p>
<p>Revisa la ventana del explorador web que se despleg&#243; cuando hiciste clic en el bot&#243;n "Go Live", ver&#225;s un sitio web en blanco. La consola es una herramienta que provee el explorador para obtener retroalimentaci&#243;n del c&#243;digo que se est&#225; ejecutando, as&#237;, aunque por ahora en el sitio web no tengamos ning&#250;n elemento visual, podemos ver lo que el programa est&#225; haciendo. Para abrir la consola en tu explorador, en Chrome debes hacer clic derecho en el sitio, hacer clic en la opci&#243;n "Inspeccionar" y luego, en el recuadro de que se abre, hacer clic en la pesta&#241;a de "Consola" / "Consola de Javascript". En Firefox debes navegar por el men&#250; "Herramientas" / "Desarrollador web" / "Consola web". Si usas otro navegador debes consultar cu&#225;l es el procedimiento particular. Esto desplegar&#225; una ventana adicional en tu navegador donde podr&#225;s ver la ejecuci&#243;n del c&#243;digo.</p>
<p>Un ejemplo del texto generado con la gram&#225;tica de esta lecci&#243;n es el siguiente:</p>
<p>"La luz fr&#237;a, intercalada por la sombra de los urapanes, se cuela por la ventana. Al pie de la ventana hay almohadones, a la izquierda enaguas bordadas, a la derecha frac negro, y sobre el piso, quevedos de oro. Es un estudio al carb&#243;n, hecho con imperceptibles transiciones entre el blanco y el negro. La luz brilla en el borde de la tina, y en las botellas, la penumbra domina el espacio del armario y el espaldar de los colchones"</p>
<p>Mostrar el texto en la consola es solo una demostraci&#243;n del resultado del generador. Partiendo de all&#237;, son muchas las posibilidades de presentaci&#243;n de ese texto. Si quieres experimentar con la disposici&#243;n del texto dentro del sitio web y no solo en la consola, te recomiendo revisar estos enlaces con informaci&#243;n acerca de <link target="https://perma.cc/ZVA3-6SK6">c&#243;mo mostrar texto en HTML</link> y <link target="https://perma.cc/NG5C-BMHG">c&#243;mo insertar variables de JavaScript dentro de HTML</link>.</p>
<p>Cabe decir aqu&#237; que, una vez se hace m&#225;s compleja la gram&#225;tica, es posible que por descuido dejemos ramas que no llevan a ning&#250;n lado. Convenientemente, Aventura cuenta con un sistema de errores que nos permite ver qu&#233; partes de la gram&#225;tica est&#225;n incompletas. Esto debemos hacerlo antes de expandir la gram&#225;tica:</p>
<p><code type="inline">aventura.probarGramatica(gramatica);</code></p>
<p>Si queremos, incluso pueden encadenarse todas las funciones en una sola l&#237;nea:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_5" type="block" corresp="code_generadores-aventura_5.txt"></code></pre>
<p>As&#237; quedar&#237;a el c&#243;digo completo que debe ir en <code type="inline">main.js</code>. Puedes copiarlo, pegarlo y guardarlo en tu archivo:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_6" type="block" corresp="code_generadores-aventura_6.txt"></code></pre>
</div><div n="3"><head>Recordar elementos escogidos al azar</head>
<p>Aunque en este punto nuestra gram&#225;tica ya es funcional y produce textos autom&#225;ticos, cabe mencionar que con Aventura tambi&#233;n es posible otro tipo de opciones avanzadas, como crear nuevas reglas mientras se expande el texto. Esta opci&#243;n puede usarse para hacer que el programa "recuerde" fragmentos de texto que se han escogido al azar mientras se va creando el texto. Esta funcionalidad es &#250;til, por ejemplo, para crear narraciones en las que es necesario ser consistentes con el nombre de un personaje que, aunque haya sido escogido al azar, debe repetirse varias veces en el texto. En esta lecci&#243;n usaremos esta funcionalidad para recordar los elementos escogidos aleatoriamente en la regla <code type="inline">objetos</code> y reusarlos en la regla <code type="inline">lucesYsombras</code>.</p>
<p>Para crear una nueva regla sobre la marcha debemos definir un nombre para la regla y encerrarlo entre dos signos <code type="inline">$</code>, seguido de un set de subreglas, encerradas en corchetes cuadrados: <code type="inline">[clave1:valor1,clave2:valor2...]</code>. En otras palabras, lo que pones entre los signos <code type="inline">$</code> ser&#225; el el nombre de la regla general y lo que listes dentro de los corchetes ser&#225;n subvalores espec&#237;ficos para esa regla que ser&#225;n escogidos en el momento en el que se desenvuelva esa parte del generador. Por ejemplo, en <code type="inline">objetos</code> podemos crear la regla <code type="inline">mueble1</code> que contendr&#225; la subregla <code type="inline">obj</code> que ser&#225; escogida, solo una vez, al azar de las opciones de <code type="inline">mueblesPlural</code>. De ah&#237; en adelante, lo que se haya escogido como mueble1.obj estar&#225; disponible en el resto del texto. En la gram&#225;tica, substituye solo las reglas <code type="inline">objetos</code> y <code type="inline">lucesYsombras</code> como se especifica a continuaci&#243;n:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_7" type="block" corresp="code_generadores-aventura_7.txt"></code></pre>
<p>Un resultado de texto generado es el siguiente:</p>
<p>"La luz fr&#237;a, intercalada por la sombra de los saucos, se cuela por la ventana. Al pie de la ventana hay mesas redondas de grandes hoteles, a la izquierda vestido de seda roja, a la derecha media de seda negra fina como un encaje, y sobre el piso, br&#250;julas. Es un estudio al carb&#243;n, hecho con imperceptibles transiciones entre el blanco y el negro. Vemos brillos de luz en vestido de seda roja y mesas redondas de grandes hoteles, la penumbra domina br&#250;julas y media de seda negra fina como un encaje"</p>
<p>Siguiendo el mismo m&#233;todo podr&#237;amos sofisticar nuestra gram&#225;tica gradualmente e incluir nuevas reglas y opciones. Por ejemplo, art&#237;culos adecuados (un, una, la, &#233;l, etc.) antes de cada uno de los objetos que se describen en el texto.</p>
<p>A seguir est&#225; todo el c&#243;digo del generador para que puedas asegurarte de que tu desarrollo de la lecci&#243;n est&#225; en el orden correcto:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_8" type="block" corresp="code_generadores-aventura_8.txt"></code></pre>
</div></div>
      <div n="2"><head>Crear un generador de im&#225;genes con Aventura.js</head>
<p>Las gram&#225;ticas libres de contexto no solo sirven para crear textos generativos sino tambi&#233;n otros tipos de medios. Con Aventura es posible adem&#225;s crear generadores de im&#225;genes, llamados "igramas". En esta lecci&#243;n, finalmente, crearemos un generador de collages basado en fragmentos de las acuarelas de Edward Walhouse Mark disponibles en la <link target="https://www.banrepcultural.org/coleccion-de-arte">Colecci&#243;n de Arte del Banco de la Rep&#250;blica de Colombia</link>. El procedimiento general es casi igual al de la gram&#225;tica textual que hicimos antes, los principios que implican establecer un &#225;rbol y una lista de opciones son id&#233;nticos; sin embargo, debemos definir algunos elementos extra: las posiciones y los tama&#241;os de los fragmentos de imagen que usaremos.</p>
<p>Para ayudarnos, usaremos la aplicaci&#243;n <link target="https://srsergiorodriguez.github.io/igrama/">igrama</link>, que nos facilitar&#225; los pasos necesarios para construir la gram&#225;tica. En la p&#225;gina inicial de igrama debemos hacer clic en el recuadro de estructura, como lo muestra la figura 8. All&#237; definiremos el tama&#241;o que queremos que tenga nuestro collage y la cantidad de secciones que queremos que tenga nuestro generador, es decir, de ramas que recombinan fragmentos de imagen. En esta lecci&#243;n crearemos una imagen de 400 x 400 p&#237;xels con cuatro secciones.</p>
<figure><desc>Figura 8. La interfaz inicial de la aplicaci&#243;n igrama</desc><graphic url="or-es-generadores-aventura-08.png" alt="Una captura de pantalla de la interfaz de igrama: contiene tres botones que llevan a las secciones del software: estructura, gramatica y generador"/></figure>
<p>En la nueva interfaz que se despliega podemos definir los tama&#241;os y las posiciones de las secciones, es decir, la estructura. En esta lecci&#243;n dejaremos la secci&#243;n 0 como fondo, as&#237; que ocupar&#225; todo el tama&#241;o de la imagen; la secci&#243;n 1 tendr&#225; personajes y la pondremos en el lado izquierdo, la secci&#243;n 2 incluir&#225; edificaciones y la pondremos a la derecha; la secci&#243;n 3 incluir&#225; objetos y la pondremos en la parte inferior de la imagen. Una vez definidas las secciones hacemos clic en el s&#237;mbolo de descargar (una flecha apuntando hacia abajo) y le daremos los nombres adecuados a las secciones, tambi&#233;n debemos activar la opci&#243;n de exportar plantillas.</p>
<figure><desc>Figura 9. Seleccionar las posiciones y tama&#241;os de las secciones en la aplicaci&#243;n igrama</desc><graphic url="or-es-generadores-aventura-09.png" alt="Una captura de pantalla de la interfaz de la secci&#243;n de estructura igrama: una pantalla en la que se pueden seleccionar areas dentro de un recuadro vac&#237;o"/></figure>
<figure><desc>Figura 10. Poner nombres a las secciones y exportar plantillas en la aplicaci&#243;n igrama. Para asegurar la compatibilidad, no incluyas acentos en los nombres</desc><graphic url="or-es-generadores-aventura-10.png" alt="Una captura de pantalla de la interfaz de la secci&#243;n de estructura igrama: un men&#250; en el que se pueden poner nombres a las secciones y un bot&#243;n que exporta las secciones"/></figure>
<p>Al dar clic en continuar el explorador descargar&#225; un archivo JSON con un modelo de igrama y una serie de im&#225;genes en blanco con las proporciones de nuestras secciones. Si est&#225;s haciendo un proyecto desde cero, puedes usar esas im&#225;genes en blanco como plantillas para, por medio de un programa de edici&#243;n, crear los fragmentos de imagen que se remezclar&#225;n en nuestro generador. En esta lecci&#243;n usaremos un conjunto de im&#225;genes preparadas previamente, as&#237; que no usaremos las im&#225;genes en blanco de referencia.</p>
<p>El archivo JSON que descarga la aplicaci&#243;n est&#225; en un formato muy similar a la gram&#225;tica de texto, pero con informaci&#243;n adicional para que pueda crearse una composici&#243;n visual: el tama&#241;o de la imagen, el color de fondo, los tama&#241;os y posiciones de cada una de las secciones, etc. Toda esta informaci&#243;n define un modelo de igrama. Ubica este archivo en la misma carpeta del proyecto. Al abrir el archivo JSON en Visual Studio Code, el modelo de igrama debe contener las siguiente informaci&#243;n:</p>
<pre><code class="language-JSON" xml:id="code_generadores-aventura_9" type="block" corresp="code_generadores-aventura_9.txt"></code></pre>
<p>Las coordenadas de las secciones y el contenido del "sketch" cambiar&#225; dependiendo de los tama&#241;os y las posiciones que hayas creado para las secciones, as&#237; que es posible que haya algunas diferencias entre tus posiciones y las posiciones que se usaron en la preparaci&#243;n de esta lecci&#243;n. Esas diferencias podr&#237;an producir distorsiones notorias en los collages. Si quieres asegurarte de que tus resultados sean exactamente los mismos que los de la lecci&#243;n, puedes reemplazar el contenido de tu archivo JSON por el c&#243;digo anterior.</p>
<p>Si quieres crear tus propias im&#225;genes, el siguiente paso consiste preparar una serie de im&#225;genes usando las plantillas que se descargaron con las dimensiones de cada secci&#243;n: fondo, personaje, edificaci&#243;n, objeto, as&#237; como una plantilla del tama&#241;o final de la imagen que puede servir como referencia. En este punto es posible usar cualquier software de edici&#243;n para ajustar los fragmentos de imagen que queremos incluir en nuestro generador. Por ejemplo, <link target="https://www.gimp.org/">Gimp</link> es un programa de manipulaci&#243;n de im&#225;genes gratuito y de acceso abierto con el que se puede hacer este proceso. Puedes exportar cada uno de los fragmentos de imagen en formato png con fondo transparente.  Deber&#225;s abrir cada una de las plantillas en blanco, poner y recortar fragmentos de im&#225;genes, exportarlas como archivos separados con transparencia y guardarlas en una carpeta llamada <code type="inline">imgs</code> en el archivo de tu proyecto. Cada variaci&#243;n de imagen debe estar en una carpeta con el nombre de la regla correspondiente en la gram&#225;tica: fondo, personaje, edificacion, objeto.</p>
<p>Para esta lecci&#243;n preparamos previamente cinco im&#225;genes por cada una de las secciones. Es decir, nuestra gram&#225;tica visual tendr&#225; cinco opciones para escoger en la composici&#243;n por cada una de las secciones definidas. Para seguir la lecci&#243;n, descarga las im&#225;genes en <link target="/assets/generadores-aventura/imgs.zip">este enlace</link>. Crea una carpeta llamada <code type="inline">imgs</code> en la carpeta de tu proyecto, y luego copia y pega todas las carpetas de im&#225;genes en la carpeta <code type="inline">imgs</code>.</p>
<p>Ahora debemos poner nuestro archivo JSON, es decir, nuestro modelo, en nuestra carpeta de proyecto.</p>
<p>Para hacer referencia a las im&#225;genes que creamos dentro de la gram&#225;tica de nuestro modelo de igrama, es decir, la secci&#243;n del archivo JSON con el nombre "grammar", debemos seguir la misma l&#243;gica que con una gram&#225;tica convencional. Sin embargo, como le indicaremos al programa que busque una imagen, no un fragmento de texto, debemos usar una sintaxis especial: <code type="inline">url%%URL_AL_ARCHIVO_DE_IMAGEN%%</code>. Crea una por una de las reglas que hacen referencia a las secciones de tu gram&#225;tica, haciendo referencia en cada regla a cada una de las urls de las im&#225;genes en las carpetas. Al final, el archivo json debe verse as&#237;:</p>
<pre><code class="language-JSON" xml:id="code_generadores-aventura_10" type="block" corresp="code_generadores-aventura_10.txt"></code></pre>
<p>Finalmente, para mostrar la imagen en el explorador, debemos usar el siguiente c&#243;digo al final del archivo <code type="inline">main.js</code>:</p>
<pre><code class="language-JavaScript" xml:id="code_generadores-aventura_11" type="block" corresp="code_generadores-aventura_11.txt"></code></pre>
<p>En t&#233;rminos generales, el c&#243;digo anterior usa <code type="inline">cargarJSON</code> para leer un archivo JSON, en este caso el modelo JSON, y devuelve una <link target="https://perma.cc/F25K-XWY6">promesa</link>. Una promesa en JavaScript es un tipo especial de funci&#243;n que tarda un poco en ejecutar, as&#237; que no se resuelve al mismo tiempo que el resto del c&#243;digo que se ha escrito linealmente; por ese motivo, se usa la funci&#243;n <code type="inline">then</code> para hacer uso de la informaci&#243;n que resulta de una promesa resuelta. Una vez se termina de leer el JSON y se resuelve la promesa, se devuelve la gram&#225;tica de igrama que se fija a Aventura con <code type="inline">fijarIgrama</code>. Luego de esto se debe expandir el igrama pasando la regla inicial a <code type="inline">expandirIgrama</code>; las capas del igrama expandido se guardan en la variable "capas". Finalmente se usa la funci&#243;n <code type="inline">mostrarIgrama</code> para presentar la imagen resultante en el explorador.</p>
<p><code type="inline">mostrarIgrama</code> recibe como argumentos la lista de capas, el formato de la imagen (png o gif) y, opcionalmente el id de un elemento de html que sirva como contenedor de la imagen; si no se provee el id, como en nuestro ejemplo, la imagen se incrustar&#225; en el cuerpo del documento html. Recuerda que debes haber creado una instancia de aventura con <code type="inline">let aventura = new Aventura("es")</code> justo al inicio del archivo <code type="inline">main.js</code>, para poder acceder a todas estas funciones. Puedes ver los resultados de tu programa haciendo clic en "go live" en la parte inferior derecha de Visual Studio Code (al inicio de esta lecci&#243;n se explic&#243; c&#243;mo instalar y usar la extensi&#243;n Live Server y La figura 1 muestra tres collages producidos con nuestro generador).</p>
<p>Opcionalmente puedes ahorrarte el trabajo de escribir una por una de las urls de la gram&#225;tica de igrama si, en un archivo <code type="inline">.zip</code>, guardas el modelo JSON y una serie de carpetas con las im&#225;genes de la gram&#225;tica. Las carpetas deben tener los nombres exactos de las reglas; piensa que son las bolsas de papel con los fragmentos de imagen que se sacar&#225;n aleatoriamente para obtener el resultado final. Las carpetas que descargaste y pusiste en <code type="inline">imgs</code> tienen exactamente el formato necesario para este proceso, solo hace falta guardarlas junto al archivo JSON en un archivo zip. Puedes arrastrar este archivo zip a la <link target="https://srsergiorodriguez.github.io/igrama/">aplicaci&#243;n de igrama</link> para convertirlo en un modelo que contiene en s&#237; mismo la informaci&#243;n de las im&#225;genes, de la gram&#225;tica y todos sus metadatos, como lo muestra la figura 11:</p>
<figure><desc>Figura 11. Interfaz para crear modelos autocontenidos</desc><graphic url="or-es-generadores-aventura-11.png" alt="Captura de pantalla de la interfaz general de igrama donde se destaca un espacio en la parte inferior de la interfaz, en el que se puede arrastrar una carpeta comprimida para obtener un modelo autocontenido del generador de im&#225;genes"/></figure>
<p>Al arrastrar el archivo zip, la aplicaci&#243;n de igrama descagar&#225; autom&#225;ticamente otro archivo JSON. La diferencia es que este nuevo JSON es un modelo autocontenido, es decir, ya contiene la informaci&#243;n de las im&#225;genes junto al resto de la informaci&#243;n necesaria. Puedes usar este modelo autocontenido en tu proyecto usando el mismo c&#243;digo que se ejemplific&#243; arriba, sin necesidad de subir las carpetas con im&#225;genes a la carpeta del proyecto, ya que ahora el modelo contiene toda la informaci&#243;n. La aplicaci&#243;n igrama cuenta con una interfaz para verificar el funcionamiento de tu modelo autocontenido; visita <link target="https://srsergiorodriguez.github.io/igrama/">la aplicaci&#243;n igrama</link> y selecciona la opci&#243;n 3 "generador" en el men&#250;, luego, arrastra el archivo JSON a la columna derecha del generador para poner a prueba los resultados del modelo autocontenido.</p>
</div>
      <div n="2"><head>Publicar los resultados</head>
<p>Tanto los resultados del generador de texto como los del generador de im&#225;genes existen en variables que pueden ser integradas en distintos proyectos que hagan uso de HTML y JavaScript y que se presenten en el explorador web. Los dos tipos de generadores son elementos modulares integrables a la estructura de sitios web m&#225;s complejos. Por ejemplo, los generadores pueden usarse en los procesos de dise&#241;o web que se describen en la lecci&#243;n de The <emph>Programming Historian</emph> <link target="/es/lecciones/ver-archivos-html">Para entender p&#225;ginas web y HTML</link>, de William J. Turkel y Adam Crymble, o en el dise&#241;o de sitios web est&#225;ticos con el "framework Jekyll", como se describe en la lecci&#243;n <link target="/es/lecciones/sitios-estaticos-con-jekyll-y-github-pages">Creaci&#243;n de sitios est&#225;ticos con Jekyll y GitHub Pages</link>.</p>
</div>
      <div n="2"><head>Referencias</head>
<p>Chomsky, Noam. (1956). &#8220;Three models for the description of language&#8221;. IEEE Transactions on Information Theory, 2(3), 113&#8211;124. <link target="https://doi.org/10.1109/TIT.1956.1056813">https://doi.org/10.1109/TIT.1956.1056813</link>.</p>
<p>Flores, Leonardo. (2021). Chapter 2. Third-Generation Electronic Literature. En J. O&#8217;Sullivan (Ed.), "Electronic Literature as Digital Humanities: Contexts, Forms, &amp; Practices". Bloomsbury Academic. <link target="https://doi.org/10.5040/9781501363474">https://doi.org/10.5040/9781501363474</link>.</p>
<p>Rodr&#237;guez G&#243;mez, Sergio. Aventura (v2.4.1). CC BY-NC-SA 4.0. 2022. <link target="https://github.com/srsergiorodriguez/aventura/releases/tag/v2.4.1">https://github.com/srsergiorodriguez/aventura/releases/tag/v2.4.1</link>.</p>
<p>Silva, Jos&#233; Asunci&#243;n. (1977). Obras Completas. Biblioteca Ayacucho.</p>
</div>
      <div n="2"><head>Notas</head>
<p><note id="1"> El autor de la librer&#237;a Aventura es Sergio Rodr&#237;guez G&#243;mez, quien escribe la versi&#243;n en espa&#241;ol de esta lecci&#243;n.</note></p>
<p><note id="2"> Al Carb&#243;n: "La luz fr&#237;a que entra por la hoja entreabierta de la ventana del fondo, al trav&#233;s de cuyos barrotes de hierro se ven a contra luz las ramazones de unos &#225;rboles que se cortan sobre el cielo claro y descolorido, rayado por la llovizna, aclara el cuarto desmantelado, blanqueado, con cal y el piso de ladrillos, deste&#241;idos por el polvo. Al pie de la ventana hay una cama vieja con unos colchones tirados en desorden; a la izquierda un armario abierto y vac&#237;o; a la derecha una tina de zinc, sin pintar, un caj&#243;n de madera lleno de coke y sobre el piso, con un mont&#243;n de botellas de champa&#241;a vac&#237;as tambi&#233;n, una aglomeraci&#243;n de trastos desvencijados e in&#250;tiles; un sill&#243;n de cuero, sin brazos, una sart&#233;n, dos cacerolas y una regadera de lata. El holl&#237;n de la cocina cercana y el polvo de carb&#243;n mineral han suavizado la blancura de las paredes, se han acumulado en las desigualdades del pa&#241;ete y en los rincones tenebrosos. En el primer plano un burro viejo levanta la cabeza pensativa de entre el canasto de hollejos y de desperdicios que tiene al frente; la luz que llega por detr&#225;s le platea el contorno del cuerpo, de las piernas delgadas y el pelo largo de las orejas enormes; el animal se perfila oscuro sobre la claridad d&#233;bil de la pared del frente, y parece el cuarto de trastos viejos, alumbrado as&#237; por la luz sin color de la ma&#241;ana lloviznosa de noviembre, un estudio al carb&#243;n, hecho con imperceptibles transiciones de lo blanco a lo gris, de lo gris claro a lo gris oscuro, de lo gris oscuro a lo negro suave, de lo negro suave a la sombra intensa; un estudio al carb&#243;n en que la penumbra domina en el conjunto; en que la luz brilla en el zinc de la tina, en la lata de la regadera, en el borde de las cacerolas, en el tiquete blanco de una botella de champa&#241;a, y en que la sombra se acumula en el espaldar del sill&#243;n, en el mango de la sart&#233;n, en el pliegue de los colchones, en el interior del armario vac&#237;o, debajo de las botellas y en tres puntos de la cabeza del burro, en la nariz entreabierta, en el fondo de la oreja peluda y en el ojo grande y redondo, sobre el cual brillan las pesta&#241;as plateadas y fin&#237;simas como rayas blancas que un dibujante, enamorado del detalle, hubiera trazado con la punta afilada y dura de un l&#225;piz de tiza sobre la negrura mate y grasa de una sombra rete&#241;ida con carb&#243;n Cont&#233;." (Silva, 1977, p. 251).</note></p>
<p><note id="3"> En JavaScript los objetos funcionan a trav&#233;s de combinaciones del nombre de propiedad seguida de dos puntos y luego su valor. En el caso del dise&#241;o de la gram&#225;tica, el nombre de propiedad es el nombre de la rama y el valor es la "Array" con opciones en esa rama. Por ejemplo: Objetos: [tina, regadera, sill&#243;n...]. Como regla general, el nombre de propiedad no puede contender espacios, acentos como tildes o di&#233;resis, ni puede iniciar con un n&#250;mero. Por convenci&#243;n, en JavaScript se suele usar un formato llamado "camel case", en el que, para evitar los espacios, se ponen las palabras que siguen a la primera palabra con la inicial en may&#250;sculas, as&#237;: NombreDeUnaVariable. Esto en contraste con otro tipo de convenciones como los guiones bajos, o "snake case" que se suelen usar en python: nombre_de_una_variable.</note></p>
</div>
    </body>
  </text>
</TEI>
