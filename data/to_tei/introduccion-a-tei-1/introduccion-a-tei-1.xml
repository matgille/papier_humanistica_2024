<TEI xmlns="https://tei-c.org/ns/1-0/">
  <metadata>
  <title>Introducci&#243;n a la codificaci&#243;n de textos en TEI (parte 1)</title>
  <collection>lessons</collection>
  <layout>lesson</layout>
  <slug>introduccion-a-tei-1</slug>
  <date>2021-07-27</date>
  <authors>Nicol&#225;s Vaughan</authors>
  <editors>Jennifer Isasi</editors>
  <reviewers>Roc&#237;o M&#233;ndez,I&#241;aki Cano</reviewers>
  <review-ticket>https://github.com/programminghistorian/ph-submissions/issues/366</review-ticket>
  <difficulty>2</difficulty>
  <activity>transforming</activity>
  <topics>data-manipulation,website</topics>
  <abstract>Esta lecci&#243;n (la primera de dos partes) te ense&#241;a los rudimentos de TEI-XML para codificar textos.</abstract>
  <doi>10.46430/phes0053</doi>
  <avatar_alt>Grabado de un corte transversal de suelo con sus etiquetas correspondientes.</avatar_alt>
</metadata>
  <text>
    <body>
      <div n="2"><head>Introducci&#243;n</head>
<p>Uno de los problemas centrales de las humanidades digitales ha sido el trabajo con y sobre textos:
su captura (digitalizaci&#243;n), reconocimiento, transcripci&#243;n, codificaci&#243;n, procesamiento, transformaci&#243;n y an&#225;lisis.
En esta lecci&#243;n nos centraremos exclusivamente en la codificaci&#243;n de textos, es decir, en su categorizaci&#243;n por medio de etiquetas (tags).</p>
<p>Un ejemplo puede ayudar a aclarar esta idea. Supongamos que tenemos un documento impreso que hemos digitalizado previamente.
Tenemos las im&#225;genes digitalizadas de sus p&#225;ginas y, con ayuda de un software de reconocimiento &#243;ptico de caracteres (<link target="https://es.wikipedia.org/wiki/Reconocimiento_%C3%B3ptico_de_caracteres">OCR</link>, en ingl&#233;s), extraemos el texto contenido en ellas. Este texto es lo que suele llamarse <link target="https://es.wikipedia.org/wiki/Archivo_de_texto">texto plano</link> (o texto digitalizado), es decir, el texto sin formato alguno (sin cursivas, negritas, etc.) ni ninguna otra estructuraci&#243;n sem&#225;ntica.</p>
<p>Aunque parezca extra&#241;o, el texto plano carece completamente de contenido. Para un computador es solo una larga cadena de caracteres (incluyendo puntuaci&#243;n, espacios en blanco y saltos de l&#237;nea, etc.) en alguna <link target="https://es.wikipedia.org/wiki/Codificaci%C3%B3n_de_caracteres">codificaci&#243;n</link> (por ejemplo <link target="https://es.wikipedia.org/wiki/UTF-8">UTF-8</link> o <link target="https://es.wikipedia.org/wiki/ASCII">ASCII</link>) de alg&#250;n alfabeto (por ejemplo latino, griego o cir&#237;lico). Somos nosotros quienes, cuando lo leemos, identificamos palabras (en una o varias lenguas), l&#237;neas, p&#225;rrafos, etc&#233;tera. Somos nosotros quienes identificamos asimismo nombres de personas y de lugares, t&#237;tulos de libros y art&#237;culos, fechas, citas, ep&#237;grafes, referencias cruzadas (internas y externas), notas a pie de p&#225;gina y notas al final del texto. Pero, de nuevo, el computador es completamente "ignorante" con respecto a dichas estructuras textuales en un texto plano sin procesar o codificar.</p>
<p>Sin asistencia humana, por ejemplo, por medio de codificaci&#243;n <link target="https://tei-c.org/">TEI</link> (Text Encoding Initiative), el computador no puede "entender" o detectar contenido alguno en el texto plano.
Eso quiere decir, entre otras cosas, que no podemos hacer b&#250;squedas estructuradas sobre ese texto (por ejemplo de nombres de personas, lugares y fechas), ni podemos extraer y procesar sistem&#225;ticamente dicha informaci&#243;n, sin antes haberle indicado al computador qu&#233; cadenas de caracteres corresponden a qu&#233; estructuras sem&#225;nticas: por ejemplo, que este es un nombre propio de persona, aquel otro nombre de persona se refiere a la misma persona que este, este es un nombre de lugar, esta es una nota al margen hecha por una tercera persona, o que este p&#225;rrafo pertenece a esta secci&#243;n del texto.
Codificar el texto es indicar (por medio de etiquetas y otros recursos) que ciertas cadenas de texto plano tienen determinada significaci&#243;n.
Y esa es la diferencia entre texto plano y texto sem&#225;nticamente estructurado.</p>
<p>Hay muchas formas de codificar un texto. Por ejemplo, podemos encerrar entre asteriscos simples los nombres propios de personas: <code type="inline">*Sim&#243;n Bol&#237;var*</code>, <code type="inline">*Soledad Acosta*</code>, etc. Y entre asteriscos dobles los de lugares: <code type="inline">**Bogot&#225;**</code>, <code type="inline">**Framingham**</code>, etc. Podemos tambi&#233;n usar guiones bajos para indicar los nombres de obras y de libros: <code type="inline">_La divina comedia_</code>, <code type="inline">_Cien a&#241;os de soledad_</code>, etc. Estos signos sirven para etiquetar o marcar el texto que encierran, para as&#237; identificar en el texto un determinado contenido. Como es f&#225;cil de imaginar, las posibilidades de codificaci&#243;n son casi infinitas.</p>
<p>En esta lecci&#243;n aprender&#225;s a codificar textos usando un lenguaje de computador especialmente dise&#241;ado para ello: TEI.</p>
<div n="3"><head>Software que usaremos</head>
<p>Cualquier editor de texto plano (en formato <code type="inline">.txt</code>) nos servir&#225; para hacer todo lo que necesitemos en esta lecci&#243;n: el <link target="https://es.wikipedia.org/wiki/Bloc_de_notas">Bloc de Notas (Notepad) de Windows</link>, por ejemplo, es perfectamente adecuado para ello. Sin embargo, hay otros editores de texto que ofrecen herramientas o funcionalidades dise&#241;adas para facilitar el trabajo con XML (Extensible Markup Language) e incluso con TEI. Uno de los m&#225;s recomendados actualmente es <link target="https://www.oxygenxml.com">Oxygen XML Editor</link>, disponible para Windows, MacOS y Linux. Sin embargo, no es un software gratuito (la licencia acad&#233;mica cuesta unos $100 USD) ni de c&#243;digo abierto, por lo que no lo usaremos en esta lecci&#243;n.</p>
<p>Para esta lecci&#243;n usaremos el editor <link target="https://code.visualstudio.com/">Visual Studio Code</link> (VS Code, m&#225;s brevemente), creado por Microsoft y mantenido actualmente por una gran comunidad de programadores de software libre. Es una aplicaci&#243;n completamente gratuita y de <link target="https://github.com/microsoft/vscode">c&#243;digo abierto</link>, disponible para Windows, MacOS y Linux.</p>
<p>Descarga la versi&#243;n m&#225;s reciente de VS Code en el enlace <link target="https://code.visualstudio.com/">https://code.visualstudio.com/</link> e inst&#225;lala en tu computador. &#193;brelo y ver&#225;s una pantalla como la siguiente:</p>
<figure><desc>Vista inicial de VS Code</desc><graphic url="introduccion-a-tei-1-01.png"/></figure>
<p>Ahora instalaremos una extensi&#243;n de VS Code para trabajar m&#225;s f&#225;cilmente con documentos XML y TEI-XML: <link target="https://marketplace.visualstudio.com/items?itemName=raffazizzi.sxml">Scholarly XML</link>.</p>
<p>Para ello haz clic en el bot&#243;n de extensiones en la barra lateral de herramientas, a la izquierda en la ventana principal:</p>
<figure><desc>Extensiones de VS Code</desc><graphic url="introduccion-a-tei-1-02.png"/></figure>
<p>Escribe <code type="inline">Scholarly XML</code> en el campo de b&#250;squeda:</p>
<figure><desc>B&#250;squeda de una extensi&#243;n en VS Code</desc><graphic url="introduccion-a-tei-1-03.png"/></figure>
<p>Finalmente haz clic en "Install":</p>
<figure><desc>Instalar Scholarly XML en VS Code</desc><graphic url="introduccion-a-tei-1-04.png"/></figure>
<p>Esta extensi&#243;n nos permite hacer varias cosas con el c&#243;digo:</p>
<p><hi rend="bold">Primero</hi>, seleccionar cualquier texto en un documento XML, presionar un atajo de teclado y encerrar autom&#225;ticamente el texto seleccionado dentro de un elemento XML. Cuando presionamos <code type="inline">Ctrl+E</code> (en Windows o Linux) o <code type="inline">Cmd+E</code> (en MacOS), VS Code abre una ventanita con la instrucci&#243;n <code type="inline">Enter Abbreviation (Press Enter to confirm or Escape to cancel)</code> ("Introduce la abreviatura (Presiona Intro para confirmar o Escape para cancelar)"). A continuaci&#243;n escribimos el nombre del elemento y presionamos la tecla <code type="inline">Intro</code>. El editor entonces encerrar&#225; el texto seleccionado entre una etiqueta de apertura y otra de cierre con el nombre del elemento. Cuando trabajamos con XML, automatizar la introducci&#243;n las etiquetas de apertura y de cierre nos puedo ahorrar mucho tiempo, a la vez que disminuye la probabilidad de que introduzcamos errores de tipogr&#225;ficos involuntarios en el c&#243;digo.</p>
<figure><desc>Introducir autom&#225;ticamente un elemento XML en VS Code</desc><graphic url="introduccion-a-tei-1-05.png"/></figure>
<p><hi rend="bold">Segundo</hi>, determinar si un documento est&#225; bien formado seg&#250;n la sintaxis de XML y adem&#225;s si es v&#225;lido sem&#225;nticamente con respecto a un esquema de validaci&#243;n de tipo <link target="https://en.wikipedia.org/wiki/RELAX_NG">RELAX NG</link>, por ejemplo, el esquema <code type="inline">tei-all</code> de TEI, que contiene la totalidad de los m&#243;dulos de marcado para todos los tipos de documentos previstos por el consorcio TEI. (M&#225;s abajo explicaremos los conceptos de validez sint&#225;ctica y sem&#225;ntica.) La extensi&#243;n hace las dos cosas autom&#225;ticamente. </p>
<figure><desc>Detectar errores de XML en VS Code</desc><graphic url="introduccion-a-tei-1-06.png"/></figure>
<figure><desc>Detectar errores de XML en VS Code</desc><graphic url="introduccion-a-tei-1-07.png"/></figure>
<p>Ahora bien, para realizar el segundo tipo de validaci&#243;n, es preciso que en el documento se especifique el URI del esquema en una declaraci&#243;n <code type="inline">&lt;?xml-model&gt;</code> al principio del documento, por ejemplo as&#237;:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_0" type="block" corresp="code_introduccion-a-tei-1_0.txt"></code></pre>
<p>Puedes bajar una plantilla b&#225;sica de un documento TEI-XML [aqu&#237;](<link target="https://raw.githubusercontent.com/programminghistorian/jekyll/gh-pages/assets/introduccion-a-tei-1/plantilla-TEI.xml**">https://raw.githubusercontent.com/programminghistorian/jekyll/gh-pages/assets/introduccion-a-tei-1/plantilla-TEI.xml**</link>, con estas l&#237;neas ya incluidas.</p>
<p><hi rend="bold">Tercero</hi>, la extensi&#243;n ofrece tambi&#233;n una herramientas para autocompletar el c&#243;digo de XML a partir del esquema de validaci&#243;n RELAX NG. Por ejemplo, si hemos introducido en el documento un elemento <code type="inline">&lt;q&gt;</code> (para marcar un texto entrecomillado, por ejemplo una cita), podemos presionar la barra espaciador luego del <code type="inline">q</code> de la etiqueta de apertura y VS Code nos mostrar&#225; una lista de atributos posibles para seleccionar en el men&#250;:</p>
<figure><desc>Men&#250; de autocompleci&#243;n de c&#243;digo de XML en VS Code</desc><graphic url="introduccion-a-tei-1-08.png"/></figure>
<p>Ahora bien, para poder usar esta u otras extensiones de VS Code es necesario que el editor <hi rend="bold">no</hi> est&#233; en modo restringido (<emph>Restricted Mode</emph>), como nos aparece en esta ventana:</p>
<figure><desc>Aviso de modo restringido en VS Code</desc><graphic url="introduccion-a-tei-1-09.png"/></figure>
<p>Este modo evita que las extensiones o el c&#243;digo del documento ejecuten instrucciones que puedan da&#241;ar nuestro sistema. Puesto que estamos trabajando con nuestros documento y la extensi&#243;n recomendada es altamente confiable, podemos desactivar el modo restringido haciendo clic en el hiperv&#237;nculo de arriba que dice <emph>Manage</emph> ("Administrar") y luego clic en el bot&#243;n <emph>Trust</emph> ("Confiar"), as&#237;:</p>
<figure><desc>Salir del modo restringido en VS Code</desc><graphic url="introduccion-a-tei-1-10.png"/></figure>
<p>Ahora que hemos configurado nuestro editor, podemos empezar a trabajar en TEI-XML.</p>
</div><div n="3"><head>Visualizaci&#243;n vs. categorizaci&#243;n</head>
<p>Quienes est&#233;n familiarizados con el lenguaje de marcado <link target="https://daringfireball.net/projects/markdown/syntax">Markdown</link> &#8212;hoy en d&#237;a habitual en foros t&#233;cnicos en Internet, as&#237; como en <link target="https://github.com">GitHub</link>, <link target="https://gitlab.com">GitLab</link> y otros repositorios de c&#243;digo&#8212; reconocer&#225;n seguramente el uso de elementos tales como asteriscos (<code type="inline">*</code>), guiones bajos (<code type="inline">_</code>) y numerales (<code type="inline">#</code>) para hacer que el texto aparezca de cierto modo en el navegador. Por ejemplo, un texto encerrado entre asteriscos simples ser&#225; mostrado en cursivas y uno encerrado entre asteriscos dobles lo ser&#225; en negritas. De hecho, el texto de esta lecci&#243;n est&#225; escrito en Markdown siguiendo esas convenciones.</p>
<p>Ese uso del marcado tiene como finalidad principal la visualizaci&#243;n del texto, no su categorizaci&#243;n. En otras palabras, las marcas o etiquetas de Markdown no indican que un texto sea de cierta categor&#237;a (por ejemplo, el nombre de una persona, de un lugar o de una obra), sino &#250;nicamente que el texto ha de ser visualizado o mostrado de cierto modo en un navegador o en otro medio.</p>
<p>Comprender la diferencia entre entre marcado de visualizaci&#243;n (como el de Markdown) y marcado sem&#225;ntico (o estructural, como el que veremos a continuaci&#243;n en TEI) es crucial para entender el objetivo de la codificaci&#243;n de textos. Cuando marcamos un fragmento de texto para codificarlo, lo hacemos sin importarnos en principio c&#243;mo fue representado originalmente ni c&#243;mo pueda ser eventualmente representado en el futuro. Nos interesa &#250;nicamente la funci&#243;n sem&#225;ntica o estructural que un texto particular tenga. Por eso debemos procurar identificar con precisi&#243;n las funciones o categor&#237;as de los textos, dejando de lado, en la medida de lo posible, el modo como son mostrados en el papel o la pantalla.</p>
<p>Aclaremos mejor esto volviendo a nuestro ejemplo inicial. Supongamos que en el texto digitalizado del que partimos los nombres propios aparecen siempre impresos en <link target="https://es.wikipedia.org/wiki/Versalita">letra versalita</link>, como en el siguiente fragmento:</p>
<figure><desc>Fragmento corto de texto digitalizado de _Don Quijote_</desc><graphic url="introduccion-a-tei-1-11.png"/></figure>
<p>Como veremos a continuaci&#243;n, TEI nos permite codificar, por medio de una serie de etiquetas, el texto que queremos categorizar. Por ejemplo, podemos utilizar una etiqueta como <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-name.html"><code type="inline">&lt;name&gt;</code></link> para demarcar los nombres propios contenidos en el texto, as&#237;:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_1" type="block" corresp="code_introduccion-a-tei-1_1.txt"></code></pre>
<p>Luego veremos en detalle qu&#233; es y c&#243;mo funciona una etiqueta (o m&#225;s precisamente un elemento) en XML y TEI. Por ahora notemos que la etiqueta no significa que el texto haya sido representado originalmente en versalitas (o en ning&#250;n otro modo). Tan solo significa que el texto contenido en ella tiene la categor&#237;a de nombre propio, independientemente de c&#243;mo sea representado. De hecho, podemos codificar exhaustivamente un documento con cientos o miles de etiquetas, sin que ninguna de ellas aparezca al final en una eventual representaci&#243;n.</p>
</div></div>
      <div n="2"><head>XML y TEI: hacia un est&#225;ndar de codificaci&#243;n de textos</head>
<p>Desde los inicios de las humanidades digitales en los a&#241;os sesenta, hubo muchas aproximaciones a la codificaci&#243;n de textos. Casi que cada proyecto de codificaci&#243;n ten&#237;a su propio est&#225;ndar, lo que conduc&#237;a a que los proyectos fueran incompatibles e intraducibles entre s&#237;, entorpeciendo e incluso imposibilitando el trabajo colaborativo.</p>
<p>Para resolver ese problema, unos veinte a&#241;os despu&#233;s se estableci&#243; un nuevo est&#225;ndar de codificaci&#243;n de textos, convenido un gran n&#250;mero de investigadores e investigadoras de todo el mundo, especialmente de universidades anglosajonas: el <link target="https://es.wikipedia.org/wiki/Text_Encoding_Initiative">Text Encoding Initiative (TEI)</link>.</p>
<p>TEI est&#225; a su vez construido sobre el lenguaje de marcado <link target="https://es.wikipedia.org/wiki/Extensible_Markup_Language">XML</link> y es por ello que suele ser denominado a veces como "TEI-XML" (o tambi&#233;n "XML/TEI"). Por su parte, XML (que es la sigla para "eXtensible Markup Language") es un lenguaje de computador cuyo prop&#243;sito es describir, por medio de una serie de marcas o etiquetas (<emph>tags</emph> en ingl&#233;s), un determinado texto objeto.
XML y TEI son lenguajes de marcado y en eso se diferencian de los lenguajes de programaci&#243;n como C, Python o Java, que describen objetos, funciones o procedimientos que han de ser ejecutados por un computador.</p>
<div n="3"><head>XML</head>
<p>En esta lecci&#243;n no entraremos en detalle en la sintaxis y el funcionamiento de XML. Recomendamos, por lo tanto, que el lector le d&#233; una mirada a
<link target="/es/lecciones/transformacion-datos-xml-xsl">esta otra lecci&#243;n</link> para m&#225;s informaci&#243;n sobre XML, as&#237; como a la bibliograf&#237;a y referencias sugeridas al final de esta lecci&#243;n.</p>
<p>Por ahora solo debemos saber que todo documento XML debe cumplir dos reglas b&#225;sicas para ser v&#225;lido:</p>
<ol>
<li>Debe haber un solo elemento ra&#237;z (que contiene a todos los dem&#225;s elementos, si los hay).</li>
<li>Toda etiqueta de apertura debe tener una etiqueta de cierre.</li>
</ol>
<p>Por suerte, los editores de c&#243;digo XML como VS Code (con la extensi&#243;n Scholarly XML) u OxygenXML nos permiten detectar f&#225;cilmente errores de este tipo.</p>
</div><div n="3"><head>&#191;Qu&#233; es TEI?</head>
<p>XML es un lenguaje tan general y abstracto que es totalmente indiferente respecto de su contenido. Puede ser usado, por ejemplo, para describir cosas tan dis&#237;miles como un texto en griego cl&#225;sico del siglo VIII a.C. y un mensaje que un termostato inteligente le env&#237;a a una aplicaci&#243;n de un smartphone usada para controlarlo.</p>
<p>TEI es una implementaci&#243;n particular de XML. Es decir, es una serie de reglas que determinan qu&#233; elementos y qu&#233; atributos son permitidos en un documento de cierto tipo. M&#225;s precisamente, TEI es un lenguaje de marcado para codificar textos de toda clase. Esto con el fin de que sean procesados por un computador, de modo que puedan ser analizados, transformados, reproducidos y almacenados, dependiendo de las necesidades e intereses de los usuarios (tanto los de carne y hueso como los computacionales). Es por eso que podemos decir que TEI est&#225; en el coraz&#243;n de las humanidades digitales (&#161;o al menos en uno de sus corazones!). Es un est&#225;ndar para trabajar computacionalmente con una clase de objetos tradicionalmente central a las humanidades: los textos.
As&#237; las cosas, mientras que a XML le es indiferente si los elementos de un documento describen textos (o propiedades de textos), TEI est&#225; dise&#241;ado exclusivamente para trabajar con ellos.</p>
<p>El tipo de elementos y atributos permisibles en TEI, y las relaciones existentes entre ellos, est&#225;n especificados por las <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/index.html">reglas de TEI</link>. Por ejemplo, si queremos codificar un poema, podemos usar el elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-lg.html"><code type="inline">&lt;lg&gt;</code></link> (de <emph>line group</emph>, "grupo de l&#237;neas") de TEI. Las reglas de TEI determinan qu&#233; tipos de atributos puede tener ese elemento y qu&#233; elementos pueden, a su vez, contener o ser contenidos por &#233;l. TEI determina que todo elemento elemento <code type="inline">&lt;lg&gt;</code> debe tener al menos un elemento elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-l.html"><code type="inline">&lt;l&gt;</code></link> (de <emph>line</emph>, "l&#237;nea").</p>
<p>A modo de ilustraci&#243;n, examinemos los primeros cuatro versos del soneto <emph>Amor constante m&#225;s all&#225; de la muerte</emph> de Francisco de Quevedo (a continuaci&#243;n en texto plano):</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_2" type="block" corresp="code_introduccion-a-tei-1_2.txt"></code></pre>
<p>Podemos proponer la siguiente codificaci&#243;n en TEI:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_3" type="block" corresp="code_introduccion-a-tei-1_3.txt"></code></pre>
<p>En este caso, nos hemos valido del atributo <code type="inline">@rhyme</code> del elemento <code type="inline">&lt;lg&gt;</code>, para hacer codificar el tipo de rima del pasaje; del atributo <code type="inline">@met</code> para indicar el tipo de m&#233;trica del primer verso (endecas&#237;labo) (esto tendr&#237;amos que hacerlo en cada uno de los versos, aunque por claridad del c&#243;digo lo hemos hecho solo en el primero); y finalmente el atributo <code type="inline">@n</code> para indicar el n&#250;mero del verso dentro el grupo.</p>
<p>La comparaci&#243;n entre el texto plano del fragmento del soneto con su codificaci&#243;n nos permite empezar a ver las ventajas de TEI como un lenguaje de marcado para textos. No solo queda expl&#237;citamente dicho que las l&#237;neas (en el c&#243;digo anterior) dos a la cinco son versos de un poema, sino que ellas tienen un tipo de rima y de m&#233;trica. Una vez codificado todo el poema, o todos los poemas de una colecci&#243;n, podemos ,por ejemplo, usar un software para realizar b&#250;squedas estructuradas, de modo que nos arroje todos los poemas que tienen cierto tipo de rima o todas las l&#237;neas que tienen cierto tipo de m&#233;trica. O podemos usar (o crear) una aplicaci&#243;n para determinar cu&#225;ntos versos de los sonetos de Quevedo &#8212;si los hay&#8212; tienen m&#233;trica imperfecta. O podemos comparar las distintas versiones (los "testigos" o "testimonios" manuscritos e impresos) de los sonetos, para realizar una edici&#243;n cr&#237;tica de ellos.</p>
<p>Ahora bien, todo eso y mucho m&#225;s es posible solo en virtud de que hemos hecho expl&#237;cito, gracias a TEI, el contenido de esos sonetos.
Si solo tuvi&#233;ramos el texto plano de ellos, ser&#237;a t&#233;cnicamente imposible aprovechar herramientas computacionales dise&#241;adas para editar, transformar, visualizar, analizar o publicarlos.</p>
</div></div>
      <div n="2"><head>Un documento m&#237;nimo de TEI</head>
<p>Examinemos ahora el siguiente documento m&#237;nimo de TEI:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_4" type="block" corresp="code_introduccion-a-tei-1_4.txt"></code></pre>
<p>La primera l&#237;nea ya es la tradicional declaraci&#243;n del documento XML.
La segunda l&#237;nea contiene el elemento principal o "ra&#237;z" de este documento: el elemento <code type="inline">&lt;TEI&gt;</code>. El atributo <code type="inline">@xmlns</code> con el valor <code type="inline">http://www.tei-c.org/ns/1.0</code> simplemente declara que todos los elementos y atributos hijos del elemento <code type="inline">&lt;TEI&gt;</code> pertenencen al "namespace" de TEI (representado aqu&#237; por ese URL). Eso no tendr&#225; que preocuparnos m&#225;s en lo sucesivo.</p>
<p>Lo interesante viene luego en las l&#237;neas tres y dieciseis, que contienen respectivamente a los dos hijos inmediatos del elemento ra&#237;z:</p>
<ul>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-teiHeader.html"><code type="inline">&lt;teiHeader&gt;</code></link></li>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-text.html"><code type="inline">&lt;text&gt;</code></link></li>
</ul>
<p>Veamos ahora en qu&#233; consisten esos dos elementos.</p>
<div n="3"><head>El elemento &lt;teiHeader&gt;</head>
<p>Todos los metadatos del documento est&#225;n codificados en el elemento <code type="inline">&lt;teiHeader&gt;</code>: el t&#237;tulo, autores o autoras, d&#243;nde, cu&#225;ndo y c&#243;mo fue publicado, su fuente, de d&#243;nde se tom&#243; la fuente, etc&#233;tera. Es habitual que las personas que empiezan a codificar texto de TEI pasen de largo esa informaci&#243;n, llenando estos campos con datos gen&#233;ricos e incompletos. Sin embargo, la informaci&#243;n del <code type="inline">&lt;teiHeader&gt;</code> es esencial a la tarea del codificador, pues sirve para identificar con toda precisi&#243;n el texto codificado.</p>
<p>El <code type="inline">&lt;teiHeader&gt;</code> debe contener al menos un elemento llamado <code type="inline">&lt;fileDesc&gt;</code> (de <emph>file description</emph> o descripci&#243;n del archivo), que a su vez contiene tres elementos hijos:</p>
<ul>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-titleStmt.html"><code type="inline">&lt;titleStmt&gt;</code></link> (de <emph>title statement</emph> o enunciado de t&#237;tulo): la informaci&#243;n sobre el t&#237;tulo del documento (dentro del elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-title.html"><code type="inline">&lt;title&gt;</code></link>); opcionalmente tambi&#233;n puede incluir datos sobre el autor o autores (dentro del elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-author.html"><code type="inline">&lt;author&gt;</code></link>)</li>
<li>
<link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-publicationStmt.html"><code type="inline">&lt;publicationStmt&gt;</code></link> (de <emph>publication statement</emph> o enunciado de publicaci&#243;n): la informaci&#243;n de c&#243;mo est&#225; publicado o disponible el documento (esto es, el documento mismo TEI, no su fuente). En ese sentido es an&#225;logo a la informaci&#243;n del editor/imprenta en el "imprint" o p&#225;gina legal de un libro. Puede ser un p&#225;rrafo descriptivo (dentro del elemento gen&#233;rico de p&#225;rrafo <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-p.html"><code type="inline">&lt;p&gt;</code></link>) o puede estar estructurada en uno o varios campos dentro los siguientes elementos:<ul>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-address.html"><code type="inline">&lt;address&gt;</code></link>: la direcci&#243;n postal de quien edita/codifica</li>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-date.html"><code type="inline">&lt;date&gt;</code></link>: la fecha de publicaci&#243;n del documento</li>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-pubPlace.html"><code type="inline">&lt;pubPlace&gt;</code></link>: el lugar de publicaci&#243;n del documento</li>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-publisher.html"><code type="inline">&lt;publisher&gt;</code></link>: la persona que edita/codifica el documento</li>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-ref.html"><code type="inline">&lt;ref&gt;</code></link> (o tambi&#233;n <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-ptr.html"><code type="inline">&lt;ptr&gt;</code></link>): una referencia externa (URL) donde est&#225; disponible el documento</li>
</ul>
</li>
<li><link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-sourceDesc.html"><code type="inline">&lt;sourceDesc&gt;</code></link> (de <emph>source description</emph> o descripci&#243;n de la fuente): la informaci&#243;n sobre la fuente de la que se toma el texto que est&#225; siendo codificado. Puede ser un p&#225;rrafo descriptivo (dentro del elemento gen&#233;rico de p&#225;rrafo, <code type="inline">&lt;p&gt;</code>). Tambi&#233;n puede estar estructurada de varias formas. Por ejemplo, puede tener un elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-bibl.html"><code type="inline">&lt;bibl&gt;</code></link>, que incluye una referencia bibliogr&#225;fica sin estructurar (p. ej. <code type="inline">&lt;bibl&gt;Miguel de Cervantes Saavedra, "Don Quijote de La Mancha", Madrid: Espasa-Calpe, 2010&lt;/bibl&gt;</code>); o puede contener una referencia estructurada en el elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-biblStruct.html"><code type="inline">&lt;biblStruct&gt;</code></link> que contiene a su vez otros elementos relevantes</li>
</ul>
<p>Supongamos que queremos codificar el <emph>Quijote</emph> de Cervantes, partiendo de <link target="https://archive.org/details/donquijotedelama01cerv">esta edici&#243;n</link> disponible gratuitamente en el <link target="https://archive.org">Internet Archive</link>. El <code type="inline">&lt;teiHeader&gt;</code> de nuestro documento TEI bien podr&#237;a ser el siguiente:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_5" type="block" corresp="code_introduccion-a-tei-1_5.txt"></code></pre>
<p>Esta es la informaci&#243;n m&#237;nima para identificar el documento codificado. Nos dice el t&#237;tulo y autor del texto, el responsable de la codificaci&#243;n y la fuente de donde se tom&#243; dicho texto.</p>
<p>Sin embargo, es posible &#8212;y a veces es deseable&#8212; especificar m&#225;s detalladamente los metadatos del documento. Por ejemplo, consideremos esta otra versi&#243;n del <code type="inline">&lt;teiHeader&gt;</code> para el mismo texto:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_6" type="block" corresp="code_introduccion-a-tei-1_6.txt"></code></pre>
<p>La decisi&#243;n sobre la exhaustividad de la informaci&#243;n en el <code type="inline">&lt;teiHeader&gt;</code> depende de su disponibilidad, y obedece a los fines de la codificaci&#243;n y a los intereses de quien codifica/edita. Ahora bien, aunque los metadatos contenidos en el <code type="inline">&lt;teiHeader&gt;</code> de un documento TEI no necesariamente aparezcan literalmente en el texto codificado, no por eso son irrelevantes para el proceso de codificaci&#243;n, edici&#243;n y eventual transformaci&#243;n. De hecho, en la medida en que un <code type="inline">&lt;teiHeader&gt;</code> haya sido correcta y exhaustivamente codificado, en esa misma medida podr&#225; extraerse y transformarse la informaci&#243;n contenida en el documento.</p>
<p>Por ejemplo, si fuera importante para nosotros distinguir entre las diferentes ediciones e impresiones del <emph>Quijote</emph>, la informaci&#243;n contenida en los <code type="inline">&lt;teiHeader&gt;</code> de los distintos documentos transcritos ser&#237;a suficiente para poder discriminarlos autom&#225;ticamente. En efecto, podr&#237;amos aprovechar los  elementos <code type="inline">&lt;edition&gt;</code> e <code type="inline">&lt;imprint&gt;</code> para tal fin, y con ayuda de tecnolog&#237;as como <link target="https://www.w3.org/TR/xslt/">XSLT</link>, <link target="https://www.w3.org/TR/xpath/">XPath</link> y <link target="https://www.w3.org/TR/xquery/">XQuery</link> podr&#237;amos ubicar, extraer y procesar toda esa informaci&#243;n.</p>
<p>En conclusi&#243;n, entre m&#225;s completa y minuciosamente se codifiquen los metadatos de los textos en el <code type="inline">&lt;teiHeader&gt;</code> de nuestros documentos TEI, m&#225;s control tendremos sobre su identidad y naturaleza.</p>
</div><div n="3"><head>El elemento &lt;text&gt;</head>
<p>Como vimos arriba en el documento m&#237;nimo, <code type="inline">&lt;text&gt;</code> es el segundo hijo de <code type="inline">&lt;TEI&gt;</code>. Contiene todo el texto del documento, propiamente hablando. De acuerdo con la <link target="https://tei-c.org/guidelines/p5/">documentaci&#243;n de TEI</link>, <code type="inline">&lt;text&gt;</code> puede contener una serie de elementos en los que el texto objeto se ha de estructurar:</p>
<figure><desc>Elementos posibles de `<text>`</text></desc><graphic url="introduccion-a-tei-1-12.png"/></figure>
<p>El m&#225;s importante de estos elementos es <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-body.html"><code type="inline">&lt;body&gt;</code></link>, que contiene el cuerpo principal del texto. Sin embargo, otros elementos importantes como hijos de <code type="inline">&lt;text&gt;</code> son <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-front.html"><code type="inline">&lt;front&gt;</code></link>, que contiene el <emph>frontmatter</emph> (p&#225;ginas preliminares) de un texto (introducci&#243;n, pr&#243;logo, etc.), y <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-back.html"><code type="inline">&lt;back&gt;</code></link>, que contiene el <emph>backmatter</emph> (p&#225;ginas finales, ap&#233;ndices, &#237;ndices, etc&#233;tera).</p>
<p>Por su parte, el elemento <code type="inline">&lt;body&gt;</code> puede a su vez contener muchos otros elementos:</p>
<figure><desc>Elementos posibles de ``</desc><graphic url="introduccion-a-tei-1-13.png"/></figure>
<p>Aunque todas esas posibilidades puedan abrumarnos a primera vista, debemos recordar que un texto suele dividirse naturalmente en secciones o partes constitutivas. Es recomendable, entonces, usar el elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-div.html"><code type="inline">&lt;div&gt;</code></link> para cada una de ellas y usar atributos como <code type="inline">@type</code> o <code type="inline">@n</code> para cualificar sus diferentes clases y posici&#243;n en el texto (p. ej. <code type="inline">&lt;div n="3" type="subsecci&#243;n"&gt;...&lt;/div&gt;</code>).</p>
<p>Si nuestro texto es corto o simple, podr&#237;amos usar un solo <code type="inline">&lt;div&gt;</code>. Por ejemplo:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_7" type="block" corresp="code_introduccion-a-tei-1_7.txt"></code></pre>
<p>Pero si nuestro texto es m&#225;s complejo, usar&#237;amos varios elementos <code type="inline">&lt;div&gt;</code>:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_8" type="block" corresp="code_introduccion-a-tei-1_8.txt"></code></pre>
<p>La estructura de nuestro documento TEI debe en principio ser similar a la estructura del texto objeto, es decir, el texto que queremos codificar. As&#237; pues, si nuestro texto objeto se divide en cap&#237;tulos, y estos se dividen en secciones o apartados, y estos, a su vez, en p&#225;rrafos, entonces lo recomendable es que repliquemos esa misma estructura en el documento TEI.</p>
<p>Para los cap&#237;tulos y las secciones podemos usar el elemento <code type="inline">&lt;div&gt;</code> y para los p&#225;rrafos el elemento <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-p.html"><code type="inline">&lt;p&gt;</code></link>.
Veamos, por ejemplo, el siguiente esquema:</p>
<pre><code class="language-XML" xml:id="code_introduccion-a-tei-1_9" type="block" corresp="code_introduccion-a-tei-1_9.txt"></code></pre>
<p>Aunque TEI nos permita codificar exhaustivamente muchos de los aspectos y propiedades de un texto, en ocasiones no nos interesan todos ellos. Es m&#225;s, el proceso de codificaci&#243;n puede extenderse innecesariamente en el tiempo si codificamos elementos que nunca vamos a aprovechar en una eventual transformaci&#243;n. Por ejemplo, si estamos codificando el texto de una edici&#243;n impresa, puede ocurrir que las divisiones de l&#237;nea en los p&#225;rrafos no sean relevantes para nuestra codificaci&#243;n.</p>
<p>En ese caso podemos ignorarlas y quedarnos solo con las divisiones de p&#225;rrafo, sin descender m&#225;s all&#225; de ellas. O quiz&#225;s sintamos la tentaci&#243;n de codificar sistem&#225;ticamente todas las fechas y los nombres de lugares (con los elementos <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-date.html"><code type="inline">&lt;date&gt;</code></link> y <link target="https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-placeName.html"><code type="inline">&lt;placeName&gt;</code></link>, respectivamente) que aparezcan en nuestro texto objeto, aun cuando nunca los aprovechemos posteriormente. Hacerlo no es un error, desde luego, pero quiz&#225;s perdamos tiempo valioso en ello.</p>
<p>En suma, podr&#237;amos formular la "regla de oro" de la codificaci&#243;n as&#237;: codifiquemos todos y solo los elementos que tengan una determinada significaci&#243;n para nosotros, teniendo en cuenta que eventualmente los podremos aprovechar para fines concretos.</p>
</div><div n="3"><head>Conclusiones</head>
<p>En esta primera parte de la lecci&#243;n has aprendido:</p>
<ol>
<li>Qu&#233; significa c&#243;dificar un texto</li>
<li>Qu&#233; son los documentos XML y XML-TEI</li>
</ol>
<p>En <link target="/es/lecciones/introduccion-a-tei-2">la segunda parte</link> ver&#225;s en detalle dos ejemplos de codificaci&#243;n de textos.</p>
</div><div n="3"><head>Referencias recomendadas</head>
<ul>
<li>
<p>La documentaci&#243;n completa de TEI (los <emph>TEI Guidelines</emph>) est&#225; disponible en <link target="https://tei-c.org/guidelines/">la p&#225;gina del consorcio</link>. Si  bien est&#225; disp&#243;nible en varios idiomas, solo est&#225; completa en ingl&#233;s.</p>
</li>
<li>
<p>Una buena introducci&#243;n a TEI es el libro <emph>&#191;Qu&#233; es la iniciativa de codificaci&#243;n de textos? C&#243;mo a&#241;adir marcado inteligente a los recursos digitales</emph> de Lou Burnard (Marsella: OpenEdition Press, 2012/2022) <link target="https://books.openedition.org/oep/15662">disponible gratuitamente en l&#237;nea</link>.</p>
</li>
<li>
<p>Un buen tutorial para XML est&#225; disponible en: <link target="https://www.w3schools.com/xml/">https://www.w3schools.com/xml/</link> y en: <link target="https://www.tutorialspoint.com/xml/index.htm">https://www.tutorialspoint.com/xml/index.htm</link>.</p>
</li>
<li>
<p>El consorcio TEI tambi&#233;n ofrece <link target="https://www.tei-c.org/release/doc/tei-p5-doc/en/html/SG.html">una buena introducci&#243;n a XML</link>.</p>
</li>
<li>
<p>La documentaci&#243;n oficial de XML est&#225; disponible en <link target="https://www.w3.org/XML/">la p&#225;gina del consorcio W3C</link> Tambi&#233;n est&#225; disponible <link target="https://www.w3.org/Style/XSL/">la documentaci&#243;n para toda la familia XSL</link> (incluido XSLT).</p>
</li>
<li>
<p>La Mozilla Foundation tambi&#233;n ofrece una buena p&#225;gina sobre XSLT y tecnolog&#237;as asociadas <link target="https://developer.mozilla.org/es/docs/Web/XSLT">(en espa&#241;ol)</link> y <link target="https://developer.mozilla.org/en-US/docs/Web/XSLT">(en ingl&#233;s)</link>.</p>
</li>
<li>
<p>La p&#225;gina <link target="https://tthub.io">TTHUB</link> contiene una excelente <link target="https://tthub.io/aprende/introduccion-a-tei/">"Introducci&#243;n a la Text Encoding Initiative"</link> por Susanna All&#233;s Torrent (2019).</p>
</li>
<li>
<p>Una lecci&#243;n introductoria de Programming Historian a XML y las transformaciones XSL es <link target="/es/lecciones/transformacion-datos-xml-xsl"><emph>Transformaci&#243;n de datos con XML y XSL para su reutilizaci&#243;n</emph></link>, de M. H. Beals.</p>
</li>
</ul>
</div></div>
    </body>
  </text>
</TEI>
