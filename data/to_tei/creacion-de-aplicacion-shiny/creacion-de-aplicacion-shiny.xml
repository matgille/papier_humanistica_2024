<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="creacion-de-aplicacion-shiny">
  <teiHeader>
 <fileDesc>
  <titleStmt>
   <title>Creaci&#243;n de aplicaciones web interactivas con R y Shiny</title>
  <author type="original_author">Yann Ryan</author><editor type="reviewers"><persName>Amanda Regan</persName><persName>Nicole Lemire Garlic</persName></editor><author type="translators">Jennifer Isasi</author><editor type="translation-reviewers"><persName>Ang&#233;lica Avil&#233;s Bosques</persName><persName>Isabelle Gribomont</persName><persName>Riva Quiroga</persName></editor><editor type="editors"><persName>Tiago Sousa Garcia</persName><persName>Alex Wermer-Colan</persName></editor></titleStmt>
  <publicationStmt>
   <idno type="doi">10.46430/phes0062</idno><date type="published">10/19/2022</date><date type="translated">04/26/2023</date><p>Lesson reviewed and published in Programming Historian.</p>
  </publicationStmt>
  <sourceDesc>
  <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#shiny-leaflet-newspaper-map-tutorial"/>.</p><p>There are other translations: <ref target="#aplicacao-web-interativa-r-shiny-leaflet"/></p></sourceDesc>
 </fileDesc>
 <profileDesc><abstract><p>Esta lecci&#243;n demuestra c&#243;mo crear un mapa web interactivo usando R y Shiny. En la lecci&#243;n, dise&#241;ar&#225;s e implementar&#225;s una aplicaci&#243;n simple, que consiste en un control deslizante que permite a los usuarios seleccionar un rango de fechas y mostrar un conjunto de puntos correspondientes en un mapa interactivo.</p></abstract><textClass><keyword xml:lang="en">mapping</keyword><keyword xml:lang="en">website</keyword><keyword xml:lang="en">r</keyword><keyword xml:lang="en">data-visualization</keyword></textClass></profileDesc>
</teiHeader>
  <text xml:lang="es">
    <body>
      <div type="2"><head>Introducci&#243;n</head>
<p>Esta lecci&#243;n te muestra c&#243;mo crear una aplicaci&#243;n web interactiva b&#225;sica con Shiny. Shiny es un paquete (un conjunto de funciones) para el lenguaje de programaci&#243;n R. Su prop&#243;sito es facilitar el desarrollo de aplicaciones web que permiten a los usuarios interactuar con el c&#243;digo de R en un navegador y mediante elementos de la interfaz de usuario (UI) como controles deslizantes, men&#250;s desplegables, etc. En esta lecci&#243;n dise&#241;ar&#225;s e implementar&#225;s una aplicaci&#243;n sencilla que contiene un control deslizante que permite al usuario seleccionar un rango de fechas para mostrar un conjunto de puntos correspondientes en un mapa interactivo. </p>
</div>
      <div type="2"><head>Objetivos de la lecci&#243;n</head>
<p>En esta lecci&#243;n vas a aprender: </p>
<ul>
<li>C&#243;mo crear una aplicaci&#243;n b&#225;sica interactiva en Shiny.</li>
<li>Los dise&#241;os clave y los principios de dise&#241;o de la interfaz de usuario de Shiny.</li>
<li>El concepto y la pr&#225;ctica de "programaci&#243;n reactiva" tal y como es implementada en aplicaciones Shiny. Espec&#237;ficamente, aprender&#225;s c&#243;mo puedes usar Shiny para "escuchar" ciertos datos entrantes y c&#243;mo se conectan con datos salientes para que se muestren en tu aplicaci&#243;n.</li>
</ul>
<p class="alert alert-info" style="alert alert-info">
Tener conocimiento b&#225;sico de R y de <link target="https://programminghistorian.org/es/lecciones/administracion-de-datos-en-r">tidyverse</link> en particular ser&#225; de gran utilidad. Sin embargo, en esta lecci&#243;n no te ense&#241;amos a programar en R m&#225;s all&#225; de lo necesario para crear una aplicaci&#243;n. Tampoco se explica c&#243;mo publicar la aplicaci&#243;n en la web.</p>
<div type="3"><head>Interfaces gr&#225;ficas de usuario y las Humanidades Digitales</head>
<p>Las <link target="https://perma.cc/U4Z4-SP73">interfaces gr&#225;ficas de usuario (GUI)</link> y los elementos interactivos pueden ayudar a que ciertos tipos de trabajos acad&#233;micos basados en datos sean m&#225;s accesibles o legibles. Por ejemplo, los historiadores que trabajan con datos a gran escala pueden querer demostrar el cambio en una variable a lo largo del tiempo. Un mapa interactivo con una l&#237;nea de tiempo regulable es, en algunos casos, m&#225;s f&#225;cil de leer y permite mostrar una mayor cantidad de informaci&#243;n que una serie de mapas est&#225;ticos. Adicionalmente, permitirle al usuario elegir los par&#225;metros de la visualizaci&#243;n puede ayudar a evitar algunos de los sesgos que a menudo se encuentran en las visualizaciones de datos que utilizan series temporales (por ejemplo, dibujar arbitrariamente un mapa por d&#233;cadas).</p>
<p>Muchos proyectos de investigaci&#243;n tienen elementos interactivos como parte de sus resultados. Algunos ejemplos son <link target="https://www.cartografiadigital.cl/map"><emph>Cartograf&#237;a de la Literatura Digital Latinoamericana</emph></link> o <link target="https://xpmethod.columbia.edu/torn-apart/volume/2/"><emph>Torn Apart/Separados</emph></link>, y como ejemplo de un proyecto que utiliza Shiny, <link target="https://utrecht-university.shinyapps.io/GeoNewsMiner">GeoNewsMiner</link> muestra la geolocalizaci&#243;n de lugares mencionados en un grupo de peri&#243;dicos. Las aplicaciones interactivas pueden ser herramientas &#250;tiles tambi&#233;n en los archivos. Por ejemplo, los investigadores de los Archivos Nacionales del Reino Unido han creado una aplicaci&#243;n que eval&#250;a el nivel de riesgo en una colecci&#243;n digital, utilizando Shiny y a trav&#233;s de una serie de preguntas respondidas por un usuario.</p>
<p>Otro caso de uso t&#237;pico para las aplicaciones interactivas es obtener una forma sencilla de explorar tu propio conjunto de datos sin tener la intenci&#243;n de que la aplicaci&#243;n est&#233; disponible de forma p&#250;blica. Podr&#237;as simplemente usarla para encontrar patrones interesantes o como punto de partida para futuras investigaciones. De esta manera, la interactividad puede ser particularmente &#250;til para ayudarte a explorar y encontrar patrones dentro de conjuntos de datos a gran escala. </p>
</div><div type="3"><head>Opciones para crear una GUI</head>
<p>Hay varias opciones a la hora de abordar el desarrollo de visualizaciones interactivas similares a los ejemplos anteriores. Una es aprender una herramienta especializada y dise&#241;ada para manipular p&#225;ginas web en respuesta a entradas de datos, como la <link target="https://perma.cc/BG9S-KPJE">biblioteca Javascript D3</link>. Una segunda opci&#243;n es utilizar alguna de las herramientas web ya existentes, algunas generales como <link target="https://perma.cc/M6Y9-9ZCP">Tableau</link> o <link target="https://perma.cc/TAA2-W7WA">Rawgraphs</link>, o algunas con un prop&#243;sito m&#225;s espec&#237;fico como <link target="https://perma.cc/2W5A-PBJU">Palladio</link> o <link target="https://perma.cc/SS9Z-6DAG">Gephi</link>. Un tercer acercamiento podr&#237;a ser usar <link target="https://perma.cc/9MNM-G5WQ">cuadernos Jupyter</link> que permiten compartir c&#243;digo interactivo e, incluso, con algunos <link target="https://perma.cc/ESA5-9MEJ">paquetes adicionales</link>, crear una interfaz de usuario. </p>
<p>Esta lecci&#243;n presenta una cuarta opci&#243;n: crear aplicaciones interactivas usando una GUI con un paquete para un lenguaje de programaci&#243;n de prop&#243;sito general, como <link target="https://perma.cc/LXR5-BYC9">Bokeh</link> o <link target="https://perma.cc/J7T9-EHTJ">Dash</link> para Python o, en esta lecci&#243;n, <link target="https://perma.cc/CK9W-VRKN">Shiny</link> para R. Tanto Python como R son lenguajes de programaci&#243;n vers&#225;tiles, muy utilizados y de c&#243;digo abierto, con comunidades activas y una amplia gama de paquetes creados por estas. Hay muchas circunstancias en las que tiene sentido utilizarlas como base para aplicaciones interactivas. B&#225;sicamente, estos paquetes act&#250;an como interfaces interactivas del lenguaje de programaci&#243;n con las que se pueden crear controles deslizantes, selectores y otros elementos que pueden ser usados din&#225;micamente para cambiar partes del c&#243;digo. En la mayor&#237;a de los casos, no requieren conocimientos t&#233;cnicos por parte de los usuarios. Como est&#225;n dise&#241;ados para funcionar en un navegador, funcionan en cualquier plataforma y son f&#225;ciles de compartir.</p>
</div><div type="3"><head>Shiny y la programaci&#243;n reactiva</head>
<p>Shiny est&#225; basado en el concepto de la <link target="https://perma.cc/2XNF-W56K">reactividad</link>. Normalmente, al programar, establecemos un valor espec&#237;fico para una variable, por ejemplo, <code type="inline">x = 5</code>. En la <emph>programaci&#243;n reactiva</emph>, el valor de la variable depende de una entrada cambiante, generalmente establecida por quienes interact&#250;an con la aplicaci&#243;n (desde un control deslizante o una lista desplegable, por ejemplo). El c&#243;digo "escucha" los cambios en estas variables reactivas y, cada vez que estas cambian, actualiza los resultados salientes de forma autom&#225;tica. </p>
<p>Sin embargo, esta actualizaci&#243;n solo ocurre dentro de <hi rend="bold">entornos reactivos</hi>. Shiny tiene tres contextos reactivos importantes: funciones de <code type="inline">render*</code>, usadas para crear objetos de R y mostrarlos en la aplicaci&#243;n, <code type="inline">observe({})</code>, y <code type="inline">reactive({})</code>. En este tutorial vas a utilizar la reactividad para crear un <emph>data frame</emph> resumido con t&#237;tulos de peri&#243;dicos y sus fechas, el cual se actualiza din&#225;micamente bas&#225;ndose en los datos escogidos por quienes usen la aplicaci&#243;n. Para tu aplicaci&#243;n usar&#225;s una funci&#243;n de <code type="inline">render*</code> para mostrar un mapa que se adapta a los cambios del <emph>data frame</emph> reactivo y se actualiza con ellos. </p>
</div><div type="3"><head>Ventajas y desventajas de utilizar Shiny</head>
<p>La ventaja de este m&#233;todo es que crear aplicaciones Shiny es <emph>relativamente</emph> f&#225;cil si ya sabes programar con R porque, adem&#225;s, Shiny puede aprovechar toda la gama de sus paquetes y caracter&#237;sticas. En algunas circunstancias esto puede ser mejor que aprender un nuevo lenguaje desde cero. Si tienes experiencia usando R y un poco de conocimiento sobre Shiny, puedes crear aplicaciones muy complejas y &#250;tiles, desde <link target="https://perma.cc/LHP6-6LRT">mapas interactivos</link> al <link target="https://perma.cc/25G9-2T8R">an&#225;lisis de redes</link>, a <link target="https://perma.cc/NR2G-F4F7">modelos de aprendizaje autom&#225;tico</link> o paneles completos con mucha funcionalidad. Si puedes programar algo en R, probablemente tambi&#233;n puedes hacerlo interactivo con Shiny. El proceso de crear una interfaz de usuario de Shiny es muy flexible y f&#225;cil de personalizar, por lo cual es sencillo crear una aplicaci&#243;n en un formato que podr&#237;a ser integrado en el sitio web de un proyecto utilizando <emph>iframes</emph>. Aunque tiene su interfaz en ingl&#233;s, puedes consultar el proyecto <emph><link target="https://www.mappingthegayguides.org/map/">Mapping the Gay Guides</link></emph> como un ejemplo de esto.</p>
<p>Pero tambi&#233;n hay ciertas desventajas que hay que tener en cuenta. Para aquellas personas que no tienen la intenci&#243;n de usar un lenguaje como R en otros aspectos de su trabajo, aprenderlo solo para crear aplicaciones Shiny puede ser una exageraci&#243;n. Shiny es de c&#243;digo abierto y de uso gratuito, y la forma m&#225;s f&#225;cil de publicar una aplicaci&#243;n terminada en la web es usando un servicio llamado shinyapps.io. Este es un producto comercial con una opci&#243;n gratuita pero que brinda un n&#250;mero limitado de horas de uso (25h), tras lo cual hay que pagar una tarifa mensual. Puedes ejecutar Shiny en tu propio servidor (o a trav&#233;s de algo como <link target="https://perma.cc/DEA2-HCC7">Amazon Web Services</link>), pero es un proceso bastante complicado y requiere un conocimiento bastante avanzado de configuraci&#243;n de servidores web. Debes tener esto en cuenta si est&#225; pensando en usar Shiny para una aplicaci&#243;n p&#250;blica, especialmente si crees que podr&#237;a tener mucho tr&#225;fico y un uso intensivo. Como alternativa, se puede replicar parte de la funcionalidad de Shiny en una p&#225;gina HTML simple usando el paquete de R <link target="https://rstudio.github.io/crosstalk/index.html">crosstalk</link>.</p>
</div></div>
      <div type="2"><head>Contexto hist&#243;rico y datos</head>
<p>La Hemeroteca Digital de la Biblioteca Nacional de Espa&#241;a alberga publicaciones peri&#243;dicas de la prensa hist&#243;rica espa&#241;ola desde su inicio hasta mediados del XX, digitalizadas seg&#250;n su presupuesto desde 2007 y limitada siempre por la legislaci&#243;n de propiedad intelectual vigente. Con una clara intenci&#243;n did&#225;ctica y representativa de cada &#233;poca, se puede consultar prensa de todo tipo, desde la cient&#237;fica o religiosa hasta la sat&#237;rica o deportiva, tanto de corta como de larga tirada<ref type="footnotemark" target="#1"/>. Aunque podemos consultar esta colecci&#243;n de forma individual y, despu&#233;s, p&#225;gina por p&#225;gina, aqu&#237; nos interesa explorar el conjunto de datos de los documentos de la hemeroteca digital. Para ello vamos a descargar &#250;nicamente el listado de t&#237;tulos disponible en la base de datos del Gobierno de Espa&#241;a<ref type="footnotemark" target="#2"/>.</p>
<p>Estos metadatos estructurados son el recurso que utilizar&#225;s en esta lecci&#243;n. Para quienes estudian historia, rastrear los metadatos de esta colecci&#243;n puede ser una forma para entender el crecimiento y el cambio en la prensa a lo largo del tiempo y en diferentes regiones. Adem&#225;s, puede ayudarnos a comprender m&#225;s sobre la colecci&#243;n de la Biblioteca Nacional de Espa&#241;a en s&#237;, incluidos sus silencios, sesgos, estrategias de digitalizaci&#243;n y puntos ciegos. Los datos podr&#237;an incluso indicar algo sobre los cambios demogr&#225;ficos y la industrializaci&#243;n de Espa&#241;a, as&#237; como los desarrollos en las tecnolog&#237;as de la comunicaci&#243;n (los trenes y luego los tel&#233;grafos hicieron posible tener prensas regionales y locales, por ejemplo).</p>
<p>La industria de los peri&#243;dicos (y, por lo tanto, la colecci&#243;n) pas&#243; de un peque&#241;o n&#250;mero de t&#237;tulos publicados en Madrid a principios del siglo XVII, concretamente iniciando con la <emph>Gaceta de Madrid</emph> en 1661 a una floreciente prensa provincial semanal y diaria en el XVIII, y luego a una gran prensa local en los siglos XIX y XX. Durante gran parte del siglo XVIII, se agreg&#243; un impuesto a cada copia de un peri&#243;dico, haci&#233;ndolos caros y solo disponibles para la &#233;lite. En el siglo siguiente esto fue derogado y la prensa comenz&#243; &#8212;aunque lentamente&#8212; a reflejar con mayor amplitud las aspiraciones y la diversidad del pa&#237;s y sus diversas regiones. La aplicaci&#243;n que crear&#225;s en este tutorial, un mapa interactivo de t&#237;tulos publicados, controlado por un control deslizante de tiempo seleccionado por el usuario, es una forma &#250;til de visualizar estos cambios.</p>
<p>Debemos a&#241;adir que en el listado de t&#237;tulos de esta colecci&#243;n est&#225;n incluidos algunos diarios extranjeros que contienen, de una forma u otra, informaci&#243;n referente a Espa&#241;a. Por ejemplo, encontramos el alem&#225;n <link target="https://perma.cc/XKQ7-7MJK"><emph>Darmst&#228;dter Zeitung</emph></link> publicado desde el cinco de mayo hasta el dos de junio de 1872  o el <link target="https://perma.cc/S5B5-FSRN"><emph>Almanaque sud-americano</emph></link>. Aunque quedan guardados en el documento, aqu&#237; no los vamos a mostrar en la visualizaci&#243;n, que enfocaremos en la Pen&#237;nsula Ib&#233;rica<ref type="footnotemark" target="#3"/>. </p>
<div type="3"><head>Descargar los datos</head>
<p>Para este tutorial,  descargar&#225;s dos archivos: primero, una lista a nivel de los t&#237;tulos peri&#243;dicos presentes en la Hemeroteca Digital de la Biblioteca Nacional de Espa&#241;a (a la que nos referiremos como la 'lista de t&#237;tulos') y segundo, un conjunto de datos de poblaciones de Espa&#241;a y sus coordenadas que<link target="https://www.businessintelligence.info/varios/longitud-latitud-pueblos-espana.html"> encontramos online </link>(al que nos referiremos como la 'lista de coordenadas') y que hemos convertido en un archivo separado por comas y editado ligeramente para hacer coincidir los lugares que se encuentran en la lista de t&#237;tulos con las ubicaciones en un mapa.</p>
<ol>
<li>Descarga el <link target="/assets/creacion-de-aplicacion-shiny/bne_hemeroteca-digital.csv">listado de t&#237;tulos desde el repositorio de Github</link> para esta lecci&#243;n. El <link target="https://perma.cc/JT88-ZXPD">archivo original</link> est&#225; disponible en la base de datos del Ministerio de Asuntos Econ&#243;micos y Transformaci&#243;n Digital de Espa&#241;a. Para nuestro prop&#243;sito, y como indicamos m&#225;s abajo, tuvimos que realizar algunos cambios. </li>
<li>Las <link target="/assets/creacion-de-aplicacion-shiny/listado-longitud-latitud-municipios-espana.csv">coordenadas</link> tambi&#233;n est&#225; disponibles en el repositorio de la lecci&#243;n. </li>
</ol>
</div><div type="3"><head>Entender los datos</head>
<p>Puesto que en los datos proporcionados por la BNE la informaci&#243;n original sobre la fecha (<code type="inline">comprende</code>) no sigue un formato normalizado (com&#250;n a todos los documentos), hemos creado dos nuevas columnas con inicio y final de la fecha de publicaci&#243;n. Por ejemplo, en el original algunas casillas indican el rango de fechas con preposiciones ("del" y "al" o "a") y en otras, en cambio, tienen un gui&#243;n o una coma. Aqu&#237; a&#241;adimos el primer a&#241;o en la columna <code type="inline">a&#241;o_inicio</code> y el final en <code type="inline">a&#241;o_final</code>.  </p>
<pre><code xml:id="code_creacion-de-aplicacion-shiny_0" type="block" corresp="code_creacion-de-aplicacion-shiny_0.txt"/></pre>
<p>En los casos en los que aparec&#237;an tres a&#241;os, hemos tomado la decisi&#243;n de utilizar el primero y el &#250;ltimo, suponiendo que hubo una pausa intermedia en la publicaci&#243;n pero siempre siendo el &#250;ltimo a&#241;o la fecha final. En las publicaciones en las que hubo una pausa pero siguen public&#225;ndose hoy en d&#237;a, se ha decidido duplicar su entrada (con el mismo ISSN, T&#237;tulo y &#193;mbito geogr&#225;fico) para poder notar su reaparici&#243;n (ejemplo: <code type="inline">De 2002 a 2009. 2014- </code>).  En caso de aparecer solo un a&#241;o, se utiliza como fecha &#250;nica de principio y fin. Y en aquellas publicaciones sin fecha final, hemos puesto 2023 como a&#241;o final. </p>
<p>Tambi&#233;n hemos tenido que adaptar el &#225;mbito geogr&#225;fico dado por los datos de BNE, en su mayor&#237;a la capital de provincia, a la ciudad concreta en que se imprimi&#243; la publicaci&#243;n. Mucha de esta informaci&#243;n estaba disponible entre par&#233;ntesis o en los propios t&#237;tulos de los peri&#243;dicos. Sin embargo, tambi&#233;n se han comprobado algunas localidades mediante una b&#250;squeda en la web de la hemeroteca digital. Esto ofrece mayor granularidad a nuestra visualizaci&#243;n. Hemos a&#241;adido una columna con el nombre de la comunidad aut&#243;noma a la que pertenece cada ciudad para permitir m&#225;s opciones hacia el final de la lecci&#243;n. </p>
</div></div>
      <div type="2"><head>Configurar el entorno R y creaci&#243;n de una aplicaci&#243;n Shiny</head>
<p>Para demostrarte como funciona Shiny, en este tutorial usar&#225;s un conjunto de datos con t&#237;tulos de peri&#243;dicos, sus lugares y fechas de publicaci&#243;n para crear una aplicaci&#243;n interactiva sencilla. En total, hay cinco pasos de codificaci&#243;n que deber&#225;s llevar a cabo: </p>
<ol>
<li>Cargar los dos conjuntos de datos necesarios</li>
<li>Crear una interfaz de usuario (UI)</li>
<li>Crear un conjunto de datos "reactivo" de lugares, conteo de sus apariciones y sus coordenadas geogr&#225;ficas</li>
<li>Transformar aquella en un set de datos geogr&#225;fico especial llamado en R un <emph>simple features object</emph> (objeto de caracter&#237;sticas simples)</li>
<li>Crear un mapa interactivo con otro paquete de R llamado <link target="https://perma.cc/RW6M-ZCG2">Leaflet</link></li>
</ol>
<p>Antes de hacer todo esto tienes que configurar un entorno adecuado y crear una nueva aplicaci&#243;n de Shiny. </p>
<div type="3"><head>Instalar R y RStudio</head>
<p>Debes tener la &#250;ltima versi&#243;n de R y RStudio en tu computadora para completar la lecci&#243;n. R tiene un entorno de desarrollo integrado (IDE por sus siglas en ingl&#233;s) llamado RStudio y que proporciona muchas caracter&#237;sticas que hacen que la codificaci&#243;n sea m&#225;s conveniente. Usaremos RStudio a lo largo de la lecci&#243;n.</p>
<p>Otras lecciones de <emph>Programming Historian</emph> te ense&#241;an <link target="/es/lecciones/datos-tabulares-en-r">a trabajar con R</link> y <link target="/es/lecciones/administracion-de-datos-en-r">con <emph>tidyverse</emph></link>. Si no tienes mucho conocimiento sobre R, su instalaci&#243;n y la administraci&#243;n de datos, te aconsejamos que completes primero dichas lecciones antes de completar esta lecci&#243;n. </p>
</div><div type="3"><head>Crear un nuevo proyecto en RStudio</head>
<p>Una vez que tienes R y RStudios instalados, abre el segundo y crea un nuevo proyecto para trabajar en tu aplicaci&#243;n. Para ello, abre la ventana <code type="inline">Create a Project</code> desde el men&#250; (File -&gt; New Project). Selecciona <code type="inline">New Directory</code>(directorio nuevo) y despu&#233;s <code type="inline">New Project</code> (proyecto nuevo). Da un nombre al directorio de tu proyecto, haz click en <code type="inline">Use renv with the project</code> (usar <code type="inline">renv</code> con tu proyecto) y pulsa en <code type="inline">Create Project</code>(crear proyecto).</p>
<p class="alert alert-info" style="alert alert-info">
Por lo general, se recomienda iniciar un proyecto con el <link target="https://rstudio.github.io/renv/index.html">paquete R renv</link> para administrar las dependencias de los paquetes. En este caso, uno de los paquetes necesarios, <code type="inline">sf</code>, tiene algunos problemas de compatibilidad con renv, particularmente con macOS.
</p>
<p>Antes de continuar, instala los tres paquetes necesarios para completar el tutorial si es que todav&#237;a no los tienes. Ejecuta los siguientes comandos: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_1" type="block" corresp="code_creacion-de-aplicacion-shiny_1.txt"/></pre>
<p>Dependiendo de la configuraci&#243;n de tu sistema, el cuarto paquete, <code type="inline">sf</code>, puede que requiera pasos adicionales antes de instalarlo. Los usuarios de Windows deber&#237;an poder instalarlo directamente usando el comando <code type="inline">install.packages('sf')</code> pero los usuarios de Mac y Linux tienen que instalar la librer&#237;a externa <code type="inline">gdal</code> con <link target="https://brew.sh/es/">Homebrew</link> para que <code type="inline">sf</code> funcione dentro de R. En Mac, instala <code type="inline">gdal</code> a trav&#233;s de la Terminal con los siguientes comandos: </p>
<pre><code xml:id="code_creacion-de-aplicacion-shiny_2" type="block" corresp="code_creacion-de-aplicacion-shiny_2.txt"/></pre>
<p>Las instrucciones m&#225;s recientes, con m&#225;s detalles, se pueden encontrar en <link target="https://github.com/r-spatial/sf">la p&#225;gina del paquete en Github</link> (solo disponible en ingl&#233;s). Consulta las instrucciones debajo del encabezado "Instalaci&#243;n" en el archivo ReadMe.</p>
</div><div type="3"><head>Crear una aplicaci&#243;n Shiny vac&#237;a</head>
<p>Una aplicaci&#243;n de Shiny consiste en un <emph>script</emph> con un nombre especial, <code type="inline">app.R</code>, que comunica a RStudio que se trata de una aplicaci&#243;n y que debe abrirla en una ventana del navegador al ejecutarla. En esta primera secci&#243;n, vas a crear una aplicaci&#243;n que cargar&#225; los paquetes y conjuntos de datos necesarios, y mostrar&#225; el mensaje "Hola mundo". Para ello, lleva a cabo los siguientes pasos: </p>
<p>1. Configura una carpeta para la aplicaci&#243;n</p>
<p>Es una buena pr&#225;ctica colocar todos los archivos necesarios para la aplicaci&#243;n en una misma carpeta, dentro del proyecto de RStudio. Haz esto creando una nueva carpeta llamada "aplicaci&#243;n de peri&#243;dicos" dentro de la carpeta del proyecto RStudio que has creado. Guarda los archivos que has descargado m&#225;s arriba en esa nueva carpeta. </p>
<p>2. Crea el archivo app.R</p>
<p>Haz click en File -&gt; New file -&gt; R Script. Usa el men&#250; o <code type="inline">command/ctrl + s</code> para guardar el archivo. Navega a la nueva carpeta que acabas de crear y guarda el archivo ah&#237;, con <code type="inline">app.R</code> como nombre del archivo. Ahora deber&#237;as tener los siguientes archivos en la carpeta "aplicaci&#243;n de peri&#243;dicos" que acabas de crear: </p>
<figure><desc>Figura 1: Captura de pantalla del panel de archivos R.</desc><graphic url="es-tr-creacion-de-aplicacion-shiny-1.png" alt="Figura 1: Captura de pantalla del panel de archivos R, que muestra los archivos necesarios. Hay tres archivos en total, app.R, el CSV de los peri&#243;dicos y el de las coordenadas del poblaciones."/></figure>
<p>3. Carga los paquetes relevantes</p>
<p class="alert alert-warning" style="alert alert-warning">
Es importante tener en cuenta que, a diferencia de en otras lecciones, el c&#243;digo que est&#225;s a punto de ejecutar no funcionar&#225; si se ejecuta l&#237;nea por l&#237;nea, sino solo cuando todo el script <code type="inline">app.R</code> se ejecuta desde RStudio.
</p>
<p>Lo primero que necesita hacer la aplicaci&#243;n es preparar y cargar los datos mediante el <emph>script</emph> <code type="inline">app.R</code>, pero fuera de la interfaz de usuario y elementos del servidor que crear&#225;s m&#225;s adelante. Primero, activa todas las librer&#237;as que vas a usar con el siguiente c&#243;digo: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_3" type="block" corresp="code_creacion-de-aplicacion-shiny_3.txt"/></pre>
<p>4. Carga los conjuntos de datos</p>
<p>Ahora, la aplicaci&#243;n deber&#237;a cargar los archivos con la lista de t&#237;tulos y las coordenadas en dos <emph>data frames</emph> que vamos a llamar <code type="inline">lista_de_titulos</code> y <code type="inline">lista_de_coordenadas</code> respectivamente. A&#241;ade la siguiente l&#237;nea al c&#243;digo de la <code type="inline">app.R</code>, que deber&#237;a aparecer en la parte de arriba a la izquierda de RStudio. Nota que al ser el directorio de trabajo diferente del directorio de la aplicaci&#243;n, estos comandos solo funcionar&#225;n cuando ejecutes la app en s&#237; misma. </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_4" type="block" corresp="code_creacion-de-aplicacion-shiny_4.txt"/></pre>
</div><div type="3"><head>A&#241;ade los elementos necesarios de Shiny</head>
<p>Para transformar lo anterior en una aplicaci&#243;n Shiny, el <emph>script</emph> <code type="inline">app.R</code> necesita tres elementos que crear&#225;s a continuaci&#243;n, en este orden:  </p>
<ol>
<li>Una <hi rend="bold">interfaz de usuario</hi> (UI), donde se guardar&#225; la apariencia de la aplicaci&#243;n. </li>
<li>Un <hi rend="bold">servidor</hi> (server), que contendr&#225; el c&#243;digo. </li>
<li>El comando o l&#237;nea de c&#243;digo para ejecutar la aplicaci&#243;n en s&#237; misma. </li>
</ol>
<p>A continuaci&#243;n, crear&#225;s cada uno de estos elementos de uno en uno.</p>
<p>1. Crea un elemento UI vac&#237;o</p>
<p>La interfaz de usuario es un elemento que contendr&#225; varios comandos especiales Shiny que definir&#225;n la apariencia de la aplicaci&#243;n. Examinaremos las opciones espec&#237;ficas m&#225;s abajo pero, en general, se empieza especificando un tipo de p&#225;gina dentro de la cual se anidan varios componentes de la UI; despu&#233;s, se a&#241;ade un tipo de plano y, dentro de &#233;ste, los elementos espec&#237;ficos al plano; y finalmente, dentro de estos, los varios componentes de la aplicaci&#243;n.</p>
<p>El tipo que vas a usar se llama <code type="inline">fluidPage()</code>, una p&#225;gina que contiene un plano flu&#237;do de lineas que, a su vez, tienen columnas y que se auto-redimensiona para adaptarse a la ventana del navegador. </p>
<p>El primer paso es crear todos los elementos b&#225;sicos para una aplicaci&#243;n, antes de rellenarlos con los componentes necesarios. Para empezar, crea un elemento UI vac&#237;o con la variable <code type="inline">interfaz_usuario</code> en el elemento <code type="inline">fluidPage()</code>. Para saber si la aplicaci&#243;n est&#225; funcionando cuando la ejecutes por primera vez, a&#241;ade un simple mensaje de "Hola mundo" en el elemento UI. A&#241;ade el siguiente c&#243;digo en <code type="inline">app.R</code>: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_5" type="block" corresp="code_creacion-de-aplicacion-shiny_5.txt"/></pre>
<p>2. Crea un servidor (server)</p>
<p>El servidor es creado como una funci&#243;n de R con dos argumentos, <code type="inline">input</code> (entrada) y <code type="inline">output</code> (salida) - no necesitas saber lo que hace cada uno por ahora<ref type="footnotemark" target="#4"/>. En R una funci&#243;n se crea con el comando <code type="inline">function{}</code>, especificando los argumentos entre par&#233;ntesis y el c&#243;digo de la funci&#243;n dentro de las llaves <code type="inline">{}</code>.<br/>
Especifica la parte del servidor con este c&#243;digo: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_6" type="block" corresp="code_creacion-de-aplicacion-shiny_6.txt"/></pre>
<p>3. A&#241;ade la l&#237;nea para ejecutar la aplicaci&#243;n.</p>
<p>Finalmente, a&#241;ade el comando que har&#225; ejecutar la aplicaci&#243;n. Este es otra l&#237;nea espec&#237;fica de Shiny, <code type="inline">shinyApp()</code>, que lleva la UI y los objetos del servidor que acabas de crear como argumentos.
<code type="inline">shinyApp(ui, server)</code></p>
<p>El archivo <code type="inline">app.R</code> ahora deber&#237;a, por tanto, contener las siguientes l&#237;neas: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_7" type="block" corresp="code_creacion-de-aplicacion-shiny_7.txt"/></pre>
</div><div type="3"><head>Prueba la aplicaci&#243;n</head>
<p>Una vez que hayas creado estos objetos, guarda de nuevo el archivo <code type="inline">app.R</code>. Ahora RStudio lo reconocer&#225; como una aplicaci&#243;n Shiny y los iconos en la barra superior del panel cambiar&#225;n, con un bot&#243;n que dice <code type="inline">Run App</code> o ejecutar aplicaci&#243;n (Figura 2). Si haces click en &#233;l, ejecutar&#225; la aplicaci&#243;n en una nueva ventana con el navegador propio de RStudio. </p>
<figure><desc>Figura 2: Captura de pantalla mostrando el panel de control con el bot&#243;n para ejecutar la aplicaci&#243;n, Run App, marcado en rojo.</desc><graphic url="es-tr-creacion-de-aplicacion-shiny-2.png" alt="Figura 2: Captura de pantalla mostrando el panel de control con el bot&#243;n para ejecutar la aplicaci&#243;n, Run App, marcado en rojo ."/></figure>
<p>Deber&#237;as ver una p&#225;gina web casi en blanco con la frase "Hola mundo" en la parte superior izquierda. Tambi&#233;n notar&#225;s que mientras la aplicaci&#243;n est&#233; siendo ejecutada, no puedes ejecutar ninguna l&#237;nea de c&#243;digo en RStudio: la consola aparece como ocupado (<emph>busy</emph>). Para parar la aplicaci&#243;n, simplemente cierra el navegador. Tambi&#233;n puedes usar la opci&#243;n de <code type="inline">open in browser</code> para que la aplicaci&#243;n se abra en tu navegador por defecto. </p>
</div></div>
      <div type="2"><head>Configurar la aplicaci&#243;n</head>
<div type="3"><head>Dise&#241;o de la interfaz de usuario</head>
<p>La interfaz de usuario (UI) de Shiny utiliza el formato <link target="https://getbootstrap.esdocu.com">Bootstrap</link>. La UI est&#225; basada en un sistema cuadricular formado por filas y columnas. Para este ejemplo, vamos a utilizar el dise&#241;o conocido como <code type="inline">sidebarLayout</code>, que consta de un t&#237;tulo, una barra lateral a la izquierda de la p&#225;gina para las entradas del usuario y un panel principal para mostrar los resultados. El siguiente diagrama o esquema te ayudar&#225; a visualizar el dise&#241;o: </p>
<figure><desc>Figura 3: Diagrama o esquema que muestra la estructura del dise&#241;o de la aplicaci&#243;n.</desc><graphic url="es-tr-creacion-de-aplicacion-shiny-3.png" alt="Figura 3: Diagrama o esquema que muestra la estructura del dise&#241;o de la aplicaci&#243;n."/></figure>
<p>El pr&#243;ximo paso es rellenar el elemento <code type="inline">ui</code> (interfaz de usuario) con los componentes necesarios para representar dicho dise&#241;o. Primero, usa el elemento <code type="inline">titlePanel()</code> (panel de t&#237;tulo) para dar un t&#237;tulo a tu aplicaci&#243;n y a&#241;ade la barra lateral. Borra el mensaje de "Hola mundo" dentro del objeto <code type="inline">fluidPage()</code> (p&#225;gina) y reempl&#225;zalo por lo siguiente: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_8" type="block" corresp="code_creacion-de-aplicacion-shiny_8.txt"/></pre>
<p>A continuaci&#243;n, completa el dise&#241;o con partes espec&#237;ficas de la p&#225;gina web, en concreto, con los componentes llamados <code type="inline">sidebarPanel()</code> (panel de la barra) y <code type="inline">mainPanel()</code> (panel principal) dentro del elemento <code type="inline">sidebarLayout()</code> (dise&#241;o lateral).</p>
<p class="alert alert-info" style="alert alert-info">
Debido a que el c&#243;digo de interfaz de usuario de Shiny a menudo termina con muchos par&#233;ntesis anidados, dividirlos en dos l&#237;neas (como en el fragmento de c&#243;digo a continuaci&#243;n) puede facilitar la lectura, pero no es necesario para que el c&#243;digo funcione.
</p>
<p>El elemento de la interfaz de usuario deber&#237;a contener este c&#243;digo: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_9" type="block" corresp="code_creacion-de-aplicacion-shiny_9.txt"/></pre>
<p>Notar&#225;s que estos comandos anidados corresponden al dise&#241;o del diagrama de la Figura 3.</p>
</div><div type="3"><head>A&#241;ade un 'Widget': El control del deslizador</head>
<p>En Shiny, los usuarios actualizan los valores en la visualizaci&#243;n con varios controles interactivos y customizables llamados 'widgets'. Puedes consultar el listado completo de esta opci&#243;n en <link target="https://perma.cc/GW78-FQEJ">la galer&#237;a de widgets de Shiny</link> (disponible en ingl&#233;s). </p>
<p>El que vas a usar aqu&#237; se llama <code type="inline">sliderInput()</code> y mostrar&#225; una barra deslizante interactiva con una gran cantidad de opciones, como los valores m&#237;nimo, m&#225;ximo y de inicio. Tambi&#233;n puedes establecer el paso y el formato de los n&#250;meros (escriba <code type="inline">?sliderInput</code> en la consola para obtener una lista completa de opciones y explicaciones, en ingl&#233;s). Aqu&#237; vas a crear uno con un a&#241;o m&#237;nimo de 1678 (el punto de datos m&#225;s antiguo en la lista de t&#237;tulos) y un m&#225;ximo de 2023 (el m&#225;s reciente). </p>
<p>El valor inicial (predeterminado) puede ser un solo n&#250;mero o un vector de dos n&#250;meros. Si utilizas este &#250;ltimo, el control deslizante ser&#225; de doble, con un primer y segundo valor. Esto es lo que queremos usar, para que los usuarios puedan especificar un rango de a&#241;os.</p>
<p>El siguiente c&#243;digo crear&#225; un control deslizante con dos extremos deslizables, configurado de forma predeterminada en 1800 y 1850:</p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_10" type="block" corresp="code_creacion-de-aplicacion-shiny_10.txt"/></pre>
<p>Inserta este c&#243;digo entre los par&#233;ntesis del comando <code type="inline">sidebarPanel = sidebarPanel( )</code>. Si te pierdes o algo no est&#225; del todo claro, echa un vistazo al c&#243;digo completo al final de esta lecci&#243;n.</p>
<p>En este punto, ejecuta la aplicaci&#243;n para ver c&#243;mo se ve el control deslizante. Deber&#237;as ver un panel gris a la izquierda (el panel de la barra lateral) con el control deslizante. Si pasas el cursor sobre el control, notar&#225;s que puedes arrastrar cada extremo (para seleccionar un tama&#241;o de rango) y tambi&#233;n puedes arrastrar el medio (que mover&#225; todo el control deslizante sobre una ventana del tama&#241;o de rango seleccionado).</p>
<figure><desc>Figura 4: GIF animado demostrando la funcionalidad del control deslizante.</desc><graphic url="es-tr-creacion-de-aplicacion-shiny-4.gif" alt="Figura 4: GIF animado demostrando la funcionalidad del control deslizante."/></figure>
</div><div type="3"><head>Colocar el leafletOutput en el elemento mainPanel</head>
<p>En Shiny, debes decirle a la UI que debe mostrar el <emph>output</emph> creado en el c&#243;digo del servidor (alg&#250;n tipo de elemento de R como una tabla de datos o un gr&#225;fico o algo tan sencillo como una l&#237;nea de texto).  Esto se hace creando un elemento UI de la familia de <code type="inline">*Output</code>. Cada elemento de R que puedes mostrar en Shiny tiene su propio comando <code type="inline">*Output</code>: aqu&#237;, vamos a usar el <code type="inline">leafletOutput()</code> que le dice a la UI que cree un mapa Leaflet. <code type="inline">leafletOutput</code> requiere un argumento: la identificaci&#243;n (ID) del <emph>output</emph>. Esta etiqueta se usar&#225; para hacer coincidir el elemento de la interfaz de usuario con el objeto de mapa real que vas a crear en el c&#243;digo del servidor m&#225;s adelante. Establece esta etiqueta como 'mapa' e inserta el siguiente c&#243;digo entre par&#233;ntesis del <code type="inline">mainPanel()</code>:</p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_11" type="block" corresp="code_creacion-de-aplicacion-shiny_11.txt"/></pre>
</div></div>
      <div type="2"><head>Crear la l&#243;gica del servidor</head>
<p>A continuaci&#243;n, tienes que escribir la l&#243;gica para crear el objeto a mostrar en la UI. Esto se hace en dos partes. Primero, crear&#225;s un elemento reactivo que, como se explic&#243; m&#225;s arriba, es un objeto especial que interpretar&#225; los cambios pedidos por el usuario para reajustar la visualizaci&#243;n. En segundo lugar, crear&#225;s la visualizaci&#243;n que contenga el propio mapa interactivo. </p>
<div type="3"><head>Crear el elemento reactivo con el mapa Leaflet</head>
<p>Primero, crea el elemento reactivo. En este caso, vamos a usar un conjunto de datos geogr&#225;ficos especial que se llama <emph>objeto de caracter&#237;sticas simples</emph> (<emph>simple features object</emph>). Este provee una representaci&#243;n de un objeto en el mundo real mediante uno o varios puntos que pueden o no estar conectados por segmentos en l&#237;nea recta para formar l&#237;neas y pol&#237;gonos. </p>
<p>Cada vez que los usuarios cambien las variables en el control deslizante de alguna manera (para ampliar o reducir el rango de fechas), la aplicaci&#243;n ejecutar&#225; una serie de comandos: </p>
<ul>
<li>Filtra la lista de t&#237;tulos seg&#250;n las fechas seleccionadas</li>
<li>Cuenta el n&#250;mero de veces que cada lugar aparece en ese rango de fechas</li>
<li>Une los lugares con sus coordenadas </li>
<li>Convierte el resultado a un objeto de caracter&#237;sticas simples</li>
</ul>
<p>Para crear un objeto llamado <code type="inline">mapa_df</code>, a&#241;ade el siguiente c&#243;digo dentro de las llaves del componente del servidor:</p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_12" type="block" corresp="code_creacion-de-aplicacion-shiny_12.txt"/></pre>
<p>Este c&#243;digo hace lo siguiente: </p>
<ol>
<li>Filtra el conjunto de datos de peri&#243;dicos con el comando de filtrado <code type="inline">filter()</code>, con los valores del widget <code type="inline">sliderInput</code>. Se accede a estos valores usando el <code type="inline">input$&lt;NombreEtiqueta&gt;</code> que en este caso es <code type="inline">input$a&#241;os</code>, aunque hay algo m&#225;s a notar. &#191;Te acuerdas de que estableciste el valor de <code type="inline">sliderInput</code> en un vector de dos valores, de modo que se pueda seleccionar un rango? Los dos n&#250;meros de este rango se almacenan en <code type="inline">input$a&#241;os[1]</code> e <code type="inline">input$a&#241;os[2]</code>. Estos son los valores a los que necesitas acceder para filtrar los datos. La funci&#243;n de filtro (<emph>filter</emph>) devuelve filas en un <emph>data frame</emph> (<code type="inline">df</code>) en el que un conjunto espec&#237;fico de condiciones son verdaderas: en este caso, donde la columna <code type="inline">a&#241;o_inicio</code> es mayor que el primer a&#241;o e inferior que el segundo. </li>
<li>La funci&#243;n <code type="inline">count()</code> produce un <emph>data frame</emph> de cada ciudad y un recuento de cu&#225;ntas veces aparece cada una, en el conjunto de datos ya filtrado entre dos rangos de fechas. Especificamos el nombre de la nueva columna para el recuento con el argumento <code type="inline">name = 'titulo'</code>. </li>
<li>Utiliza <code type="inline">left_join()</code> para unir el conjunto de coordenadas con el <emph>data frame</emph> que contiene el recuento de las ciudades, especificando que el elemento com&#250;n entre ambos es la columna llamada <code type="inline">poblacion</code> (En general, <emph>join</emph> es un tipo de funci&#243;n que hace coincidir o que une dos dataframes diferentes en funci&#243;n a un elemento com&#250;n).</li>
<li>Podr&#237;a haber una peque&#241;a cantidad de t&#237;tulos de publicaciones sin coordenadas, lo cual podr&#237;a causar un error al crear el objeto geogr&#225;fico. Para evitar que estos rompan la aplicaci&#243;n, puedes quitarlos con el c&#243;digo <code type="inline">filter(!is.na(lng) &amp; !is.na(lat))</code>. </li>
<li>Finalmente, convierte todo en un objeto de caracter&#237;sticas simples, usando la funci&#243;n <code type="inline">st_as_sf()</code>. En ella, especifica el nombre de las columnas que contienen las coordenadas y establece un sistema de referencias de las mismas con <code type="inline">st_set_crs()</code><ref type="footnotemark" target="#5"/>.</li>
</ol>
<p>Shiny puede acceder a este <emph>data frame</emph> de caracter&#237;sticas simples en cualquier contexto reactivo con la funci&#243;n <code type="inline">mapa_df()</code> y puede ser utilizado por m&#250;ltiples salidas a la vez: por ejemplo, podr&#237;as crear una aplicaci&#243;n que muestre un mapa y un gr&#225;fico de barras, cada uno usando el mismo objeto reactivo.</p>
</div><div type="3"><head>Crea un mapa Leaflet</head>
<p>Lo &#250;ltimo que hay que hacer es crear el mapa en s&#237; mismo con la biblioteca <code type="inline">leaflet</code>, la cual crea mapas interactivos con zoom y funciona particularmente bien con Shiny. Agrega el siguiente c&#243;digo dentro del elemento <code type="inline">server()</code>, justo debajo del elemento reactivo <code type="inline">mapa_df</code>:</p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_13" type="block" corresp="code_creacion-de-aplicacion-shiny_13.txt"/></pre>
<p>Hay varias cosas complejas dentro de esa pieza de c&#243;digo as&#237; que es importante revisarlas en detalle. En Shiny, se crea reactividad conectando entradas (<emph>inputs</emph>) con salidas (<emph>outputs</emph>). </p>
<p><hi rend="bold">Input</hi>, en este contexto, son las variables que el usuario puede ir cambiando. &#191;Recuerdas el <code type="inline">sliderInput()</code> que creaste en la interfaz de usuario anterior, con la etiqueta "a&#241;os"? Ya hemos visto que Shiny almacena dicho valor en la variable <code type="inline">input$a&#241;os</code>.
<hi rend="bold">Output</hi>, aqu&#237;, son la informaci&#243;n que le indica a Shiny qu&#233; mostrar en la interfaz de usuario y se crean en el servidor con la variable <code type="inline">output$*</code>. Esta informaci&#243;n debe coincidir con un elemento <code type="inline">*Output</code> en la UI. En esta, creaste un <emph>output</emph> <code type="inline">leaflet</code> con la etiqueta mapa usando el c&#243;digo <code type="inline">leafletOutput(outputId = 'mapa')</code>. Esto deber&#237;a coincidir con una salida o <emph>output</emph> llamada <code type="inline">output$mapa</code> en el servidor. </p>
<p>A su vez, esta variable <code type="inline">output$mapa</code> tiene que estar conectada con una funci&#243;n <code type="inline">render*</code> que le indica a Shiny qu&#233; tipo de objeto tiene que representar en la UI. El que necesitamos se llama <code type="inline">renderLeaflet</code>, con la que indicamos a la UI que el mapa debe salir de la librer&#237;a <code type="inline">leaflet</code>. El objeto <code type="inline">renderLeaflet</code> tiene tanto par&#233;ntesis como llaves, como los objetos reactivos de m&#225;s arriba. </p>
<p>El mapa Leaflet en s&#237; mismo se crea ah&#237;. Primero, a&#241;ade la funci&#243;n <code type="inline">leaflet()</code>. Luego, a&#241;ade las im&#225;genes predeterminadas (con zoom) con la funci&#243;n <code type="inline">addTiles()</code> (a&#241;adir teselado). Para finalizar, escoge la posici&#243;n y nivel de zoom por defecto a la Pen&#237;nsula Ib&#233;rica con el comando <code type="inline">setView(lng =-3.700346, lat = 40.41669, zoom = 5.2)</code> utilizando las coordenadas de Madrid ciudad como centro. </p>
</div><div type="3"><head>Muestra los puntos con el dataframe reactivo</head>
<p>Haz una pausa aqu&#237; y vuelve a ejecutar la aplicaci&#243;n. Si todo va bien, deber&#237;as ver un mapa interactivo de la Pen&#237;nsula Ib&#233;rica a la derecha del control deslizante. Puedes hacer zoom y moverte sobre &#233;l y poco m&#225;s. Ahora necesitas a&#241;adir los puntos que representan el recuento de t&#237;tulos por cada lugar y seg&#250;n el rango de fechas escogido. </p>
<figure><desc>Figura 5: Captura de pantalla del mapa Leaflet en la aplicaci&#243;n y su widget interactivo.</desc><graphic url="es-tr-creacion-de-aplicacion-shiny-5.png" alt="Figura 5: Captura de pantalla del mapa Leaflet en la aplicaci&#243;n y su widget interactivo."/></figure> 
<p>Para eso, usa el comando <code type="inline">addCircleMarkers()</code> (a&#241;adir marcadores circulares), que a&#241;ade una capa gr&#225;fica de c&#237;rculos al mapa <code type="inline">leaflet</code> tomando las coordenadas del objeto con datos geogr&#225;ficos. Con un <emph>pipe</emph> <code type="inline">%&gt;%</code>, a&#241;ade la siguiente l&#237;nea despu&#233;s de la funci&#243;n anterior con un <code type="inline">addCircleMarkers()</code>(mira el c&#243;digo final si no sabes d&#243;nde va esto): </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_14" type="block" corresp="code_creacion-de-aplicacion-shiny_14.txt"/></pre>
<p>Lo m&#225;s importante: en vez de una fuente de datos fija, dicha l&#237;nea especifica que <code type="inline">addCircleMarkers</code> debe usar el <emph>data frame</emph> reactivo que hemos creado antes, con el argumento <code type="inline">data = mapa_df()</code>. Nota que a diferencia de variables regulares en R, esta tiene dos par&#233;ntesis al final, indicando que se trata de una variable reactiva especial. Cada vez que la aplicaci&#243;n nota un cambio en este objeto reactivo, redibuja el mapa con los datos nuevos. </p>
<p>En este punto tambi&#233;n puedes configurar el radio de los c&#237;rculos para que se corresponda con la columna que contiene el recuento de t&#237;tulos de cada ciudad. Para ello usa <code type="inline">radio = ~sqrt(titulo)</code>. Usamos la ra&#237;z cuadrada (<code type="inline">sqrt</code>) porque eso hace que el &#225;rea de los c&#237;rculos se adapte proporcionalmente al conteo. </p>
</div><div type="3"><head>Prueba la aplicaci&#243;n</head>
<p>Ya puedes volver a ejecutar la aplicaci&#243;n. Ahora, deber&#237;a haber c&#237;rculos de varios tama&#241;os repartidos por el mapa. Intenta mover o arrastrar los controles deslizantes para ajustar el rango de a&#241;os que quieres explorar: El mapa deber&#237;a de actualizarse con cada cambio. &#161;Felicidades, has creado tu primera aplicaci&#243;n Shiny!</p>
<figure><desc>Figura 6: GIF animado mostrando c&#243;mo el mapa Leaflet se actualiza al cambiar los valores del control.</desc><graphic url="es-tr-creacion-de-aplicacion-shiny-6.gif" alt="Figura 6: GIF animado mostrando c&#243;mo el mapa Leaflet se actualiza al cambiar los valores del control"/></figure> 
</div></div>
      <div type="2"><head>Mejorar la aplicaci&#243;n</head>
<p>Para aprender m&#225;s sobre Shiny y Leaflet y, a la vez, hacer tu aplicaci&#243;n m&#225;s informativa o incluso &#250;til, puedes integrar algunas de las siguientes caracter&#237;sticas: </p>
<p>Primero, por ejemplo, puedes a&#241;adir una forma de filtrar los datos del mapa. Usando otro widget llamado <code type="inline">selectInput</code>, puedes hacer que tus usuarios vean datos de una o varias de las comunidades aut&#243;nomas en la lista de t&#237;tulos a&#241;adiendo el filtro al <code type="inline">sidebarPanel</code> en la UI y en el servidor: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_15" type="block" corresp="code_creacion-de-aplicacion-shiny_15.txt"/></pre>
<p>Para que esta opci&#243;n funcione, debes dejar un valor por defecto en <code type="inline">selected = </code>; aqu&#237; dejamos "Pa&#237;s Vasco" pero puedes elegir otra comunidad. </p>
<p>Luego, en el c&#243;digo del servidor como tal, debes a&#241;adir tambi&#233;n una indicaci&#243;n del filtrado por comunidades aut&#243;nomas en su filtro o <code type="inline">filter</code>: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_16" type="block" corresp="code_creacion-de-aplicacion-shiny_16.txt"/></pre>
<p>Se pueden  incluir m&#225;s tipos de opciones interactivas en el <code type="inline">sliderInput</code>, separando los comandos con comas. Lee sobre ellos, si sabes ingl&#233;s, con <code type="inline">?selectInput</code> en la consola.  </p>
<p>Por otro lado, tambi&#233;n puedes a&#241;adir algunos elementos al mapa Leaflet en el propio addCircleMarkers<code type="inline">. Por ejemplo, si quieres que aparezcan etiquetas con los nombres de las poblaciones en el mapa, puedes usar el comando </code>label = poblacion`: </p>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_17" type="block" corresp="code_creacion-de-aplicacion-shiny_17.txt"/></pre>
<p>Puedes encontrar todas las opciones de estos elementos ejecutando <code type="inline">?addCircleMarkers</code> en la consola.</p>
<p>Notar&#225;s que cada vez que mueves el control deslizante, la aplicaci&#243;n restablece la visualizaci&#243;n del mapa, lo cual no es muy c&#243;modo. Esto se puede evitar usando otra funci&#243;n llamada <code type="inline">leafletProxy</code>. En esencia, crea un mapa Leaflet vac&#237;o como arriba (sin los marcadores circulares). Despu&#233;s, en otro contexto reactivo, <code type="inline">observe</code>, a&#241;adir&#225;s el c&#243;digo para redibujar las partes cambiantes del mapa usando <code type="inline">leafletProxy</code>. Si sabes ingl&#233;s puedes leer las instrucciones para ello en <link target="https://perma.cc/CZ84-CW9F">la documentaci&#243;n de Leaflet</link>. </p>
</div>
      <div type="2"><head>Conclusi&#243;n</head>
<p>Las visualizaciones interactivas pueden ayudar a aportar nuevos conocimientos a los datos hist&#243;ricos. En este tutorial, usamos algunos paquetes R potentes, como <code type="inline">tidyverse</code> y <code type="inline">leaflet</code> en un entorno interactivo, en lugar de tener que preparar todos los datos por adelantado. Aprendimos c&#243;mo y por qu&#233; podr&#237;amos usar la programaci&#243;n reactiva, puesto que esta nos permite crear c&#243;digo R din&#225;mico donde las opciones elegidas por los usuarios sustituyen a variables fijas.</p>
<p>Este enfoque se puede adaptar f&#225;cilmente para formatos de datos y modos de an&#225;lisis diferentes. La barrera de entrada relativamente baja facilita la creaci&#243;n de aplicaciones r&#225;pidas que pueden hacer que trabajar con datos a gran escala sea menos complicado. Las aplicaciones Shiny tambi&#233;n son una forma &#250;til de compartir los beneficios de la programaci&#243;n en R con una audiencia no t&#233;cnica o miembros del equipo de un proyecto. Es relativamente f&#225;cil crear una aplicaci&#243;n que permita a un usuario visualizar su propio an&#225;lisis de datos con R, sin tener que codificar o usar la l&#237;nea de comandos.</p>
</div>
      <div type="2"><head>C&#243;digo final (sin a&#241;adidos)</head>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_18" type="block" corresp="code_creacion-de-aplicacion-shiny_18.txt"/></pre>
</div>
      <div type="2"><head>C&#243;digo final (con a&#241;adidos)</head>
<pre><code class="language-r" xml:id="code_creacion-de-aplicacion-shiny_19" type="block" corresp="code_creacion-de-aplicacion-shiny_19.txt"/></pre>
</div>
      <div type="2"><head>Notas</head>
<p><note id="1"> Para m&#225;s informaci&#243;n y contenidos relacionados, visita <link target="https://www.bne.es/es/catalogos/hemeroteca-digital">la p&#225;gina web de la Hemeroteca Digital.</link></note>
<note id="2"> Estos <link target="https://perma.cc/JT88-ZXPD">datos</link>, que luego modificamos, est&#225;n disponibles bajo licencia CCO (gratuito y editable) por parte del Ministerio de Cultura y Deporte.  </note>
<note id="3"> Podr&#237;an a&#241;adirse las coordenadas de dichas poblaciones extranjeras en el mismo CSV para visualizar el panorama completo de publicaciones referidas o en relaci&#243;n a Espa&#241;a disponibles en la Hemeroteca Digital de la BNE.</note>
<note id="4"> El objeto del servidor es en realidad una lista de R con todos los objetos de entrada o <emph>inputs</emph> guardados en el primer elemento, llamado <code type="inline">input</code> y todos los objetos resultantes u  <emph>outputs</emph> en el segundo elemento, llamado <code type="inline">output</code>.</note>
<note id="5"> Debido a que hay varias formas de transformar un globo terr&#225;queo en una representaci&#243;n 2D, la visualizaci&#243;n correcta de datos geogr&#225;ficos requiere establecer un sistema de referencia de coordenadas. 4326 es uno de uso com&#250;n para datos geogr&#225;ficos en todo el mundo.</note></p>
</div>
    </body>
  </text>
</TEI>
