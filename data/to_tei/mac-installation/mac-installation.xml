<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="mac-installation" type="original">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Setting Up an Integrated Development Environment for Python (Mac)</title>
                <author role="original_author">
                    <persName>William J. Turkel</persName>
                    <persName>Adam Crymble</persName>
                </author>
                <editor role="reviewers">
                    <persName>Jim Clifford</persName>
                    <persName>Amanda Morton</persName>
                </editor>
                <editor role="editors">Miriam Posner</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <idno type="doi">10.46430/phen0012</idno>
                <date type="published">07/17/2012</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. This lesson is original. Available translations are the following:<ref type="translations" target="#instalacion-mac #instalacao-mac"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>This lesson will help you set up an integrated development environment for Python on a computer running a Mac operating system.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">get-ready</term>
                    <term xml:lang="en">python</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="en">
        <body>
            <h3>Back up your computer</h3>
            <p>Mac users can take advantage of the <ref target="http://support.apple.com/kb/ht1427">Time Machine</ref> for this.</p>
            <h3>Install Python v.3</h3>
            <p>You may already have Python 2 installed on your machine. This version of Python will be deprecated at the end of 2019, so you will have to install Python 3. Download the latest
stable release of the Python programming language (Version 3.8 as of
November 2019) and install it by following the instructions on the <ref target="http://www.python.org/">Python
website</ref>.</p>
            <h3>Create a Directory</h3>
            <p>To stay organized, it’s best to have a dedicated directory (folder) on
your computer where you will keep your Python programs (e.g.,
<code rend="inline">programming-historian</code>). Save it anywhere you like on your hard
drive.</p>
            <h3>Install a text editor</h3>
            <p>There are many text editors that you can use to write, store, and run Python commands.
Sublime Text is the one used in this lesson. If you prefer to use another editor, there are many <ref target="http://wiki.python.org/moin/PythonEditors/">other text editing options</ref>.
Some of our testers prefer a program called <ref target="https://www.barebones.com/products/bbedit/">BBEdit</ref>. Which you use is up to
you. You can download a copy of Sublime Text from the <ref target="https://www.sublimetext.com/download">Sublime Text website</ref>.</p>
            <h5>Set up in Sublime Text</h5>
            <p>Now you need to set up the editor so that you can run Python
programs.</p>
            <p>From the menu, choose
<code rend="inline">Tools -&gt; Build System -&gt; Python</code>. </p>
            <div type="2">
                <head>Step 2 – “Hello World” in Python</head>
                <p>It is traditional to begin programming in a new language by trying to
create a program that says ‘hello world’ and terminates. We will show
you how to do this in Python and HTML.</p>
                <p>Python is a good programming language for beginners because it is very
high-level. It is possible, in other words, to write short programs that
accomplish a lot. The shorter the program, the more likely it is for the
whole thing to fit on one screen, and the easier it is to keep track of
all of it in your mind.</p>
                <p>Python is an 'interpreted' programming language. This means that
there is a special computer program (known as an interpreter) that knows
how to follow instructions written in that language. One way to use the
interpreter is to store all of your instructions in a file, and then run
the interpreter on the file. A file that contains programming language
instructions is known as a program. The interpreter will execute each of
the instructions that you gave it in your program and then stop. Let’s
try this.</p>
                <p>In your text editor, create a new file, enter the following two-line
program and save it to your <code rend="inline">programming-historian</code> directory as
<code rend="inline">hello-world.py</code>
                </p>
                <ab>
                    <code lang="language-python" xml:id="code_mac-installation_0" corresp="code_mac-installation_0.txt" rend="block"/>
                </ab>
                <p>Your chosen text editor should have a “<code rend="inline">Run</code>” or “<code rend="inline">Build</code>” button that will allow you
to execute your program. If you are using Sublime Text, click <code rend="inline">Tools -&gt; Build</code> (or type <code rend="inline">⌘B</code>). If you are using BBEdit, click on the
“#!” button and Run. If all went well, it should look something like
this:</p>
                <figure>
                    <desc>'Hello World' in Python on a Mac with BBEdit</desc>
                    <graphic url="BBEdit-hello-world.png"/>
                </figure>
                <p>Or, with Sublime Text:</p>
                <figure>
                    <desc>'Hello World' in Python on a Mac with Sublime Text</desc>
                    <graphic url="en-or-sublimetext-hello-world.png"/>
                </figure>
                <div type="3">
                    <head>Interacting with a Python shell</head>
                    <p>Another way to interact with an interpreter is to use what is known as a
shell. You can type in a statement and press the Enter key, and the
shell will respond to your command. Using a shell is a great way to test
statements to make sure that they do what you think they should. This is
done slightly differently on Mac, Linux and Windows.</p>
                    <p>You can run a Python shell by launching the 'terminal'. On the Mac, open
the Finder and double-click on <code rend="inline">Applications -&gt; Utilities -&gt; Terminal</code>
then typing “<code rend="inline">python3</code>” into the window that opens on your screen. At the
Python shell prompt, type</p>
                    <ab>
                        <code lang="language-python" xml:id="code_mac-installation_1" corresp="code_mac-installation_1.txt" rend="block"/>
                    </ab>
                    <p>and press Enter. The computer will respond with</p>
                    <ab>
                        <code lang="language-python" xml:id="code_mac-installation_2" corresp="code_mac-installation_2.txt" rend="block"/>
                    </ab>
                    <p>When we want to represent an interaction with the shell, we will use
<code rend="inline">-&gt;</code> to indicate the shell’s response to your command, as shown below:</p>
                    <ab>
                        <code lang="language-python" xml:id="code_mac-installation_3" corresp="code_mac-installation_3.txt" rend="block"/>
                    </ab>
                    <p>On your screen, it will look more like this:</p>
                    <figure>
                        <desc>Python Shell in Mac Terminal</desc>
                        <graphic url="hello-world-terminal.png"/>
                    </figure>
                    <p>Now that you and your computer are up and running, we can move onto some
more interesting tasks. If you are working through the Python lessons in
order, we suggest you next try '<ref target="/lessons/viewing-html-files">Understanding Web Pages and HTML</ref>.'</p>
                </div>
            </div>
        </body>
    </text>
</TEI>
