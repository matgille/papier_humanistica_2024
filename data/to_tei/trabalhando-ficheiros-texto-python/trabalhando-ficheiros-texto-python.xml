<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="trabalhando-ficheiros-texto-python">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Trabalhando com ficheiros de texto em Python</title>
                <author role="original_author">
                    <persName>William J. Turkel</persName>
                    <persName>Adam Crymble</persName>
                </author>
                <editor role="reviewers">Jim Clifford</editor>
                <author role="translators">Aracele Torres</author>
                <editor role="translation-reviewers">
                    <persName>Bruno Martins</persName>
                    <persName>Renato Rocha Souza</persName>
                </editor>
                <editor role="editors">Miriam Posner</editor>
            </titleStmt>
            <publicationStmt>
                <distributor>Programming Historian</distributor>
                <date type="translated">05/13/2021</date>
                <idno type="doi">10.46430/phpt0003</idno>
                <date type="published">07/17/2012</date>
            </publicationStmt>
            <sourceDesc>
                <p>Born digital, in a markdown format. Original file: <ref type="original_file" target="#working-with-text-files"/>.</p>
                <p>There are other translations: <ref target="#trabajar-con-archivos-de-texto #travailler-avec-des-fichiers-texte"/>
                </p>
            </sourceDesc>
        </fileDesc>
        <profileDesc>
            <abstract>
                <p>Nesta lição, você aprenderá a manipular ficheiros de texto usando Python.</p>
            </abstract>
            <textClass>
                <keywords>
                    <term xml:lang="en">python</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text xml:lang="pt">
        <body>
            <div type="2">
                <head>Objetivos da lição</head>
                <p>Nesta lição, você aprenderá a manipular ficheiros de texto usando Python.
Isto inclui abrir, fechar, ler e gravar ficheiros no formato <code rend="inline">.txt</code> usando instruções nesta linguagem de programação.</p>
                <p>As próximas lições desta série envolverão o download de uma página da web e a reorganização do seu conteúdo em blocos de informação úteis. Você fará a maior parte do trabalho usando código Python escrito e executado no ambiente Komodo Edit.</p>
            </div>
            <div type="2">
                <head>Trabalhando com ficheiros de texto</head>
                <p>A linguagem Python facilita o trabalho com ficheiros e texto. Vamos começar com ficheiros.</p>
            </div>
            <div type="2">
                <head>Criando e gravando um ficheiro de texto</head>
                <p>Vamos começar com uma breve discussão da terminologia. Numa lição anterior (dependendo do seu sistema operativo: <ref target="https://programminghistorian.org/lessons/mac-installation">Instalação em Mac</ref>, <ref target="https://programminghistorian.org/lessons/windows-installation">Instalação em Windows</ref>, ou <ref target="https://programminghistorian.org/lessons/linux-installation">Instalação em Linux</ref>), você viu como enviar informação para a janela de "Saída de Comando" do seu editor de texto, usando o comando <ref target="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement">print</ref> do Python.</p>
                <ab>
                    <code lang="language-python[´p" xml:id="code_trabalhando-ficheiros-texto-python_0" corresp="code_trabalhando-ficheiros-texto-python_0.txt" rend="block"/>
                </ab>
                <p>A linguagem de programação Python é <emph>orientada a objetos</emph>. Isso quer dizer que a mesma é construída em torno de um tipo especial de entidade, um <emph>objeto</emph>, que
contém <emph>dados</emph> e vários <emph>métodos</emph> para aceder e alterar esses dados. Depois de um objeto ser criado, ele pode interagir com outros objetos.</p>
                <p>No exemplo acima, vemos um tipo de objeto, a <emph>string</emph> "olá mundo". A <emph>string</emph> é a sequência de caracteres entre aspas. Você pode escrever uma <emph>string</emph> de três maneiras:</p>
                <ab>
                    <code xml:id="code_trabalhando-ficheiros-texto-python_1" corresp="code_trabalhando-ficheiros-texto-python_1.txt" rend="block"/>
                </ab>
                <p>O importante a notar é que nos primeiros dois exemplos você pode usar aspas simples ou duplas / vírgulas invertidas, mas não pode misturar as duas dentro de uma <emph>string</emph>.
No terceiro exemplo, as aspas triplas significam uma <emph>string</emph> que abrange mais de uma linha.</p>
                <p>Por exemplo, as seguintes declarações estão todas erradas:</p>
                <ab>
                    <code xml:id="code_trabalhando-ficheiros-texto-python_2" corresp="code_trabalhando-ficheiros-texto-python_2.txt" rend="block"/>
                </ab>
                <p>Conte o número de aspas simples na <emph>message3</emph>. Para funcionar você
teria que <emph>libertar</emph> o apóstrofo:</p>
                <ab>
                    <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_3" corresp="code_trabalhando-ficheiros-texto-python_3.txt" rend="block"/>
                </ab>
                <p>Alternativamente, poderia reescrever a declaração como:</p>
                <ab>
                    <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_4" corresp="code_trabalhando-ficheiros-texto-python_4.txt" rend="block"/>
                </ab>
                <p>
                    <code rend="inline">Print</code> é um comando que imprime objetos na forma textual. O comando <emph>print</emph>, quando combinado com a <emph>string</emph>, produz uma <emph>instrução</emph>.</p>
                <p>Você usará <code rend="inline">print</code> como indicado anteriormente nos casos em que deseja apresentar a informação imediatamente. Às vezes, no entanto, você criará informação que deseja guardar, enviar a outra pessoa, ou usar como entrada para processamento posterior por um outro programa ou conjunto de programas. Nestes casos, você desejará enviar a informação para ficheiros no seu disco rígido, em vez de para a janela de "saída de comando". Insira o seguinte programa no seu editor de texto e salve-o como <code rend="inline">ficheiro-saida.py</code>.</p>
                <ab>
                    <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_5" corresp="code_trabalhando-ficheiros-texto-python_5.txt" rend="block"/>
                </ab>
                <p>Em Python, qualquer linha que comece com uma marca de hash (#) é conhecida como um <emph>comentário</emph> e é ignorada pelo interpretador Python. Os comentários têm como objetivo permitir que os programadores comuniquem uns com os outros (ou para se lembrarem do que seu código faz quando o voltam a analisar alguns meses depois). Num sentido mais amplo, os próprios programas são tipicamente escritos e formatados de modo que seja mais fácil para os programadores comunicarem uns com os outros. Quando o código é mais próximo dos requisitos da máquina é conhecido como <emph>baixo nível</emph>, enquanto o que está mais próximo da linguagem natural é de <emph>alto nível</emph>. Um dos benefícios de usar uma linguagem como Python é que ela é de nível muito alto, tornando mais fácil a comunicação (com algum custo em termos de eficiência computacional).</p>
                <p>No programa anterior, <emph>f</emph> é um <emph>objeto ficheiro</emph> (<emph>file object</emph>), e <code rend="inline">open</code> (abrir), <code rend="inline">write</code> (gravar) e <code rend="inline">close</code> (fechar) são <emph>métodos de ficheiro</emph> (<emph>file
methods</emph>). Em outras palavras, abrir, gravar, e fechar fazem algo com o objeto <emph>f</emph> que, neste caso, é definido como um ficheiro <code rend="inline">.txt</code>. Este é provavelmente um uso diferente do termo "método" do que aquele que você poderia esperar e, de vez em quando, você descobrirá que as palavras usadas no contexto de programação têm significados ligeiramente (ou completamente) diferentes do que na fala do dia a dia. Neste caso, lembre-se de que os métodos são código que executa ações. Eles fazem algo a outra coisa e retornam um resultado. Você pode tentar pensar nisto usando um exemplo do mundo real, como dar comandos ao cão da família. O cão (o objeto) entende comandos (ou seja, tem "métodos") como "latir", "sentar", "fingir de morto" e assim por diante. Discutiremos e aprenderemos como usar muitos outros métodos à medida que avançarmos.</p>
                <p>
                    <emph>f</emph> é um nome de variável escolhido por nós; você poderia chamá-lo de qualquer coisa que quisesse. No Python, os nomes das variáveis podem ser constituídos por letras maiúsculas e minúsculas, números, e o símbolo <emph>underline</emph>... mas você não pode usar os nomes dos comandos Python como variáveis. Se você tentasse nomear a sua variável de ficheiro como, por exemplo, "print", o seu programa não funcionaria porque esta é uma <ref target="http://docs.python.org/release/2.5.4/ref/keywords.html">palavra reservada</ref> que faz parte da linguagem de programação.</p>
                <p>Os nomes das variáveis Python também são <emph>case-sensitive</emph>, ou seja, diferenciam letras maiúsculas de minúsculas, o que significa que <emph>foobar</emph>, <emph>Foobar</emph> e <emph>FOOBAR</emph> seriam todas variáveis diferentes.</p>
                <p>Quando você executa o programa, o método <code rend="inline">open</code> (abrir) vai dizer ao seu computador para criar um novo ficheiro de texto <code rend="inline">olamundo.txt</code> na mesma pasta que você salvou o programa <code rend="inline">ficheiro-saida.py</code>. O parâmetro <emph>w</emph> diz que você pretende gravar conteúdo neste novo ficheiro usando Python.</p>
                <p>Observe que, como o nome do ficheiro e o parâmetro estão entre aspas simples, você sabe que ambos estão armazenados como <emph>strings</emph>; esquecer de incluir as aspas fará com que o seu programa falhe.</p>
                <p>Na próxima linha, o seu programa grava a mensagem "olá mundo" (outra string) no ficheiro e o fecha. (Para obter mais informações sobre estas instruções, consulte a seção <ref target="https://docs.python.org/2/library/stdtypes.html#bltin-file-objects">File Objects</ref> na Referência da biblioteca Python.)</p>
                <p>Clique duas vezes no botão "Executar Python" no Komodo Edit para executar o programa (ou o equivalente em qualquer outro editor de texto que você tenha decidido usar: por exemplo, clique em "#!" E "Executar" no TextWrangler). Embora nada seja impresso no painel "Saída de Comando", você verá uma mensagem de status que diz algo como </p>
                <ab>
                    <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_6" corresp="code_trabalhando-ficheiros-texto-python_6.txt" rend="block"/>
                </ab>
                <p>em Mac ou Linux, ou</p>
                <ab>
                    <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_7" corresp="code_trabalhando-ficheiros-texto-python_7.txt" rend="block"/>
                </ab>
                <p>no Windows.</p>
                <p>Isso significa que o seu programa foi executado com sucesso. Se você usar <emph>Arquivo -&gt; Abrir -&gt; Arquivo</emph> no Komodo Edit, você pode abrir o ficheiro <code rend="inline">olamundo.txt</code>. Ele deve conter a sua mensagem numa linha:</p>
                <ab>
                    <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_8" corresp="code_trabalhando-ficheiros-texto-python_8.txt" rend="block"/>
                </ab>
                <p>Como os ficheiros de texto incluem uma quantidade mínima de informação de formatação, eles tendem a ser pequenos, fáceis de trocar entre plataformas diferentes
(ou seja, do Windows para Linux ou Mac, ou vice-versa) e fáceis de enviar de um programa de computador para outro. Eles geralmente também podem ser lidos por pessoas que usam um editor de texto como o Komodo Edit.</p>
                <div type="3">
                    <head>Lendo de um ficheiro de texto</head>
                    <p>A linguagem Python também possui métodos que permitem obter informação desde ficheiros. Digite o seguinte programa no seu editor de texto e salve-o como
<code rend="inline">ficheiro-entrada.py</code>. Ao clicar em "Executar" para executá-lo, será aberto o ficheiro de texto que você acabou de criar, lida a mensagem numa linha do ficheiro, e
impressa a mensagem no painel "Saída de Comando".</p>
                    <ab>
                        <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_9" corresp="code_trabalhando-ficheiros-texto-python_9.txt" rend="block"/>
                    </ab>
                    <p>Nesse caso, o parâmetro <emph>r</emph> é usado para indicar que você está abrindo um ficheiro para ler (<code rend="inline">read</code>) a partir dele. Os parâmetros permitem que você escolha entre as diferentes opções que um método específico permite. Voltando ao exemplo do cão da família, o cão pode ser treinado a latir uma vez quando faz um lanche com sabor de carne e duas vezes quando recebe um com sabor de frango. O sabor do lanche é um parâmetro. Cada método é diferente em termos de quais parâmetros aceitará. Você não pode, por exemplo, pedir a um cão que cante uma ópera italiana - a menos que o seu cão seja particularmente talentoso. Você pode pesquisar os parâmetros possíveis para um método específico no site do Python ou, frequentemente, pode encontrá-los digitando o nome do método num motor de busca, junto com o termo "Python".</p>
                    <p>
                        <code rend="inline">Read</code> é um outro método de ficheiro. Os conteúdos do ficheiro (a mensagem de uma linha) são copiados para a variável <emph>message</emph>, que é como decidimos chamar esta <emph>string</emph>, e então o comando <code rend="inline">print</code> é usado para enviar os conteúdos de <emph>message</emph> para o painel "Saída do Comando".</p>
                </div>
                <div type="3">
                    <head>Anexando conteúdo a um ficheiro de texto pré-existente</head>
                    <p>Uma terceira opção é abrir um ficheiro pré-existente e adicionar mais conteúdo a ele. Note que se você abrir (<code rend="inline">open</code>) um ficheiro e usar o método <code rend="inline">write</code> (gravar), <emph>o programa sobrescreverá tudo o que possa estar contido no ficheiro</emph>. Isso não é um problema quando você está criando um novo ficheiro, ou quando deseja sobrescrever os conteúdos de um ficheiro existente, mas pode ser indesejável quando você está criando um registro de eventos ou compilando um grande conjunto de dados em um ficheiro. Neste caso, ao invés de <code rend="inline">write</code>, você vai querer usar o método acrescentar (<code rend="inline">append</code>), designado por <code rend="inline">a</code>.</p>
                    <p>Digite o seguinte programa no seu editor de texto e salve-o como<code rend="inline">ficheiro-acrescentar.py</code>. Quando você executar este programa, ele abrirá o mesmo ficheiro <code rend="inline">olamundo.txt</code> criado anteriormente e anexará uma segunda mensagem “olá mundo” ao ficheiro. A sequência '\n' significa o início de uma nova linha.</p>
                    <ab>
                        <code lang="language-python" xml:id="code_trabalhando-ficheiros-texto-python_10" corresp="code_trabalhando-ficheiros-texto-python_10.txt" rend="block"/>
                    </ab>
                    <p>Depois de executar o programa, abra o ficheiro <code rend="inline">olamundo.txt</code> e veja o que aconteceu. Feche o ficheiro de texto e execute mais algumas vezes o programa <code rend="inline">ficheiro-acrescentar.py</code>. Quando você abrir <code rend="inline">olamundo.txt</code> novamente, notará algumas mensagens 'olá mundo' extra esperando por você.</p>
                    <p>Na próxima seção, discutiremos a modularidade e a reutilização de código.</p>
                </div>
            </div>
            <div type="2">
                <head>Leituras sugeridas</head>
                <list type="unordered">
                    <item>
                        <ref target="https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3/Hello,_World">Non-Programmer's Tutorial for Python 3/Hello, World</ref>
                    </item>
                </list>
            </div>
        </body>
    </text>
</TEI>
